
Timer_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000dd8  00000e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  000016c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2a  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042d  00000000  00000000  000024f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069a  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000314  00000000  00000000  00002fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b4  00000000  00000000  00003671  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 db 06 	call	0xdb6	; 0xdb6 <main>
  8a:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Adc_intialize>:
#include "std_macros.h"

void Adc_intialize()
{
	// enable adc
	SET_BIT(ADCSRA_,7);
  92:	37 9a       	sbi	0x06, 7	; 6
	// set reference to AVC
	CLEAR_BIT(ADMUX_,6);
  94:	3e 98       	cbi	0x07, 6	; 7
	CLEAR_BIT(ADMUX_,7);
  96:	3f 98       	cbi	0x07, 7	; 7
	// set frequency factor by 
	SET_BIT(ADCSRA_,2);
  98:	32 9a       	sbi	0x06, 2	; 6
	CLEAR_BIT(ADCSRA_,1);
  9a:	31 98       	cbi	0x06, 1	; 6
	CLEAR_BIT(ADCSRA_,0);
  9c:	30 98       	cbi	0x06, 0	; 6

	
}
  9e:	08 95       	ret

000000a0 <adc_read_u16>:
unsigned short adc_read_u16(unsigned char channel)
{
	unsigned short ADC_data = 0;

	// select channel
	ADMUX_ = (ADMUX_ & 0xF0) | (channel & 0x0F);
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	8f 70       	andi	r24, 0x0F	; 15
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	98 2b       	or	r25, r24
  a8:	97 b9       	out	0x07, r25	; 7
	// start Conversion
	SET_BIT(ADCSRA_,6);
  aa:	36 9a       	sbi	0x06, 6	; 6
	while (READ_BIT(ADCSRA_,6) == 1);
  ac:	36 99       	sbic	0x06, 6	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <adc_read_u16+0xc>
	// must read low bit first
	ADC_data = ADCL_;
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	90 e0       	ldi	r25, 0x00	; 0
	ADC_data |= (ADCH_<< 8);
  b4:	45 b1       	in	r20, 0x05	; 5


	SET_BIT(ADCSRA_,4);
  b6:	34 9a       	sbi	0x06, 4	; 6
	// start Conversion
	SET_BIT(ADCSRA_,6);
	while (READ_BIT(ADCSRA_,6) == 1);
	// must read low bit first
	ADC_data = ADCL_;
	ADC_data |= (ADCH_<< 8);
  b8:	34 2f       	mov	r19, r20
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	82 2b       	or	r24, r18
  be:	93 2b       	or	r25, r19


	SET_BIT(ADCSRA_,4);
	return ADC_data;
}
  c0:	08 95       	ret

000000c2 <Dio_VSet_pin_Dir>:
 */ 
#include "std_macros.h"
#include <string.h>

void Dio_VSet_pin_Dir(unsigned char port, unsigned char reg_numb, const char *dir)
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	c8 2f       	mov	r28, r24
  cc:	d6 2f       	mov	r29, r22
  ce:	8a 01       	movw	r16, r20
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
  d0:	ca 01       	movw	r24, r20
  d2:	60 e6       	ldi	r22, 0x60	; 96
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
  da:	28 2f       	mov	r18, r24
  dc:	39 2f       	mov	r19, r25
  de:	21 15       	cp	r18, r1
  e0:	31 05       	cpc	r19, r1
  e2:	59 f0       	breq	.+22     	; 0xfa <Dio_VSet_pin_Dir+0x38>
  e4:	c8 01       	movw	r24, r16
  e6:	67 e6       	ldi	r22, 0x67	; 103
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
  ee:	28 2f       	mov	r18, r24
  f0:	39 2f       	mov	r19, r25
  f2:	21 15       	cp	r18, r1
  f4:	31 05       	cpc	r19, r1
  f6:	09 f0       	breq	.+2      	; 0xfa <Dio_VSet_pin_Dir+0x38>
  f8:	4b c0       	rjmp	.+150    	; 0x190 <Dio_VSet_pin_Dir+0xce>
	{
		switch (port)
  fa:	c4 34       	cpi	r28, 0x44	; 68
  fc:	09 f4       	brne	.+2      	; 0x100 <Dio_VSet_pin_Dir+0x3e>
  fe:	3c c0       	rjmp	.+120    	; 0x178 <Dio_VSet_pin_Dir+0xb6>
 100:	c5 34       	cpi	r28, 0x45	; 69
 102:	40 f4       	brcc	.+16     	; 0x114 <Dio_VSet_pin_Dir+0x52>
 104:	c2 34       	cpi	r28, 0x42	; 66
 106:	01 f1       	breq	.+64     	; 0x148 <Dio_VSet_pin_Dir+0x86>
 108:	c3 34       	cpi	r28, 0x43	; 67
 10a:	50 f5       	brcc	.+84     	; 0x160 <Dio_VSet_pin_Dir+0x9e>
 10c:	c1 34       	cpi	r28, 0x41	; 65
 10e:	09 f0       	breq	.+2      	; 0x112 <Dio_VSet_pin_Dir+0x50>
 110:	a0 c0       	rjmp	.+320    	; 0x252 <Dio_VSet_pin_Dir+0x190>
 112:	0e c0       	rjmp	.+28     	; 0x130 <Dio_VSet_pin_Dir+0x6e>
 114:	c2 36       	cpi	r28, 0x62	; 98
 116:	c1 f0       	breq	.+48     	; 0x148 <Dio_VSet_pin_Dir+0x86>
 118:	c3 36       	cpi	r28, 0x63	; 99
 11a:	20 f4       	brcc	.+8      	; 0x124 <Dio_VSet_pin_Dir+0x62>
 11c:	c1 36       	cpi	r28, 0x61	; 97
 11e:	09 f0       	breq	.+2      	; 0x122 <Dio_VSet_pin_Dir+0x60>
 120:	98 c0       	rjmp	.+304    	; 0x252 <Dio_VSet_pin_Dir+0x190>
 122:	06 c0       	rjmp	.+12     	; 0x130 <Dio_VSet_pin_Dir+0x6e>
 124:	c3 36       	cpi	r28, 0x63	; 99
 126:	e1 f0       	breq	.+56     	; 0x160 <Dio_VSet_pin_Dir+0x9e>
 128:	c4 36       	cpi	r28, 0x64	; 100
 12a:	09 f0       	breq	.+2      	; 0x12e <Dio_VSet_pin_Dir+0x6c>
 12c:	92 c0       	rjmp	.+292    	; 0x252 <Dio_VSet_pin_Dir+0x190>
 12e:	24 c0       	rjmp	.+72     	; 0x178 <Dio_VSet_pin_Dir+0xb6>
		{
			case 'A':
			case 'a':
				SET_BIT(DDRA_, reg_numb);
 130:	4a b3       	in	r20, 0x1a	; 26
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	c9 01       	movw	r24, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_VSet_pin_Dir+0x7c>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	da 95       	dec	r29
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_VSet_pin_Dir+0x78>
 142:	84 2b       	or	r24, r20
 144:	8a bb       	out	0x1a, r24	; 26
				break;
 146:	85 c0       	rjmp	.+266    	; 0x252 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
				SET_BIT(DDRB_, reg_numb);
 148:	47 b3       	in	r20, 0x17	; 23
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	c9 01       	movw	r24, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <Dio_VSet_pin_Dir+0x94>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	da 95       	dec	r29
 158:	e2 f7       	brpl	.-8      	; 0x152 <Dio_VSet_pin_Dir+0x90>
 15a:	84 2b       	or	r24, r20
 15c:	87 bb       	out	0x17, r24	; 23
				break;
 15e:	79 c0       	rjmp	.+242    	; 0x252 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
				SET_BIT(DDRC_, reg_numb);
 160:	44 b3       	in	r20, 0x14	; 20
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	c9 01       	movw	r24, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <Dio_VSet_pin_Dir+0xac>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	da 95       	dec	r29
 170:	e2 f7       	brpl	.-8      	; 0x16a <Dio_VSet_pin_Dir+0xa8>
 172:	84 2b       	or	r24, r20
 174:	84 bb       	out	0x14, r24	; 20
				break;
 176:	6d c0       	rjmp	.+218    	; 0x252 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
				SET_BIT(DDRD_, reg_numb);
 178:	41 b3       	in	r20, 0x11	; 17
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	c9 01       	movw	r24, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <Dio_VSet_pin_Dir+0xc4>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	da 95       	dec	r29
 188:	e2 f7       	brpl	.-8      	; 0x182 <Dio_VSet_pin_Dir+0xc0>
 18a:	84 2b       	or	r24, r20
 18c:	81 bb       	out	0x11, r24	; 17
				break;
 18e:	61 c0       	rjmp	.+194    	; 0x252 <Dio_VSet_pin_Dir+0x190>
			default:
				break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
 190:	c8 01       	movw	r24, r16
 192:	6e e6       	ldi	r22, 0x6E	; 110
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 19a:	28 2f       	mov	r18, r24
 19c:	39 2f       	mov	r19, r25
 19e:	21 15       	cp	r18, r1
 1a0:	31 05       	cpc	r19, r1
 1a2:	59 f0       	breq	.+22     	; 0x1ba <Dio_VSet_pin_Dir+0xf8>
 1a4:	c8 01       	movw	r24, r16
 1a6:	64 e7       	ldi	r22, 0x74	; 116
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 1ae:	28 2f       	mov	r18, r24
 1b0:	39 2f       	mov	r19, r25
 1b2:	21 15       	cp	r18, r1
 1b4:	31 05       	cpc	r19, r1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <Dio_VSet_pin_Dir+0xf8>
 1b8:	4c c0       	rjmp	.+152    	; 0x252 <Dio_VSet_pin_Dir+0x190>
	{
		switch (port)
 1ba:	c4 34       	cpi	r28, 0x44	; 68
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <Dio_VSet_pin_Dir+0xfe>
 1be:	3d c0       	rjmp	.+122    	; 0x23a <Dio_VSet_pin_Dir+0x178>
 1c0:	c5 34       	cpi	r28, 0x45	; 69
 1c2:	40 f4       	brcc	.+16     	; 0x1d4 <Dio_VSet_pin_Dir+0x112>
 1c4:	c2 34       	cpi	r28, 0x42	; 66
 1c6:	f9 f0       	breq	.+62     	; 0x206 <Dio_VSet_pin_Dir+0x144>
 1c8:	c3 34       	cpi	r28, 0x43	; 67
 1ca:	50 f5       	brcc	.+84     	; 0x220 <Dio_VSet_pin_Dir+0x15e>
 1cc:	c1 34       	cpi	r28, 0x41	; 65
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <Dio_VSet_pin_Dir+0x110>
 1d0:	40 c0       	rjmp	.+128    	; 0x252 <Dio_VSet_pin_Dir+0x190>
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <Dio_VSet_pin_Dir+0x12a>
 1d4:	c2 36       	cpi	r28, 0x62	; 98
 1d6:	b9 f0       	breq	.+46     	; 0x206 <Dio_VSet_pin_Dir+0x144>
 1d8:	c3 36       	cpi	r28, 0x63	; 99
 1da:	18 f4       	brcc	.+6      	; 0x1e2 <Dio_VSet_pin_Dir+0x120>
 1dc:	c1 36       	cpi	r28, 0x61	; 97
 1de:	c9 f5       	brne	.+114    	; 0x252 <Dio_VSet_pin_Dir+0x190>
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <Dio_VSet_pin_Dir+0x12a>
 1e2:	c3 36       	cpi	r28, 0x63	; 99
 1e4:	e9 f0       	breq	.+58     	; 0x220 <Dio_VSet_pin_Dir+0x15e>
 1e6:	c4 36       	cpi	r28, 0x64	; 100
 1e8:	a1 f5       	brne	.+104    	; 0x252 <Dio_VSet_pin_Dir+0x190>
 1ea:	27 c0       	rjmp	.+78     	; 0x23a <Dio_VSet_pin_Dir+0x178>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(DDRA_, reg_numb);
 1ec:	4a b3       	in	r20, 0x1a	; 26
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	c9 01       	movw	r24, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <Dio_VSet_pin_Dir+0x138>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	da 95       	dec	r29
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <Dio_VSet_pin_Dir+0x134>
 1fe:	80 95       	com	r24
 200:	84 23       	and	r24, r20
 202:	8a bb       	out	0x1a, r24	; 26
			break;
 204:	26 c0       	rjmp	.+76     	; 0x252 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
			CLEAR_BIT(DDRB_, reg_numb);
 206:	47 b3       	in	r20, 0x17	; 23
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	c9 01       	movw	r24, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <Dio_VSet_pin_Dir+0x152>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	da 95       	dec	r29
 216:	e2 f7       	brpl	.-8      	; 0x210 <Dio_VSet_pin_Dir+0x14e>
 218:	80 95       	com	r24
 21a:	84 23       	and	r24, r20
 21c:	87 bb       	out	0x17, r24	; 23
			break;
 21e:	19 c0       	rjmp	.+50     	; 0x252 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
			CLEAR_BIT(DDRC_, reg_numb);
 220:	44 b3       	in	r20, 0x14	; 20
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	c9 01       	movw	r24, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <Dio_VSet_pin_Dir+0x16c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	da 95       	dec	r29
 230:	e2 f7       	brpl	.-8      	; 0x22a <Dio_VSet_pin_Dir+0x168>
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	84 bb       	out	0x14, r24	; 20
			break;
 238:	0c c0       	rjmp	.+24     	; 0x252 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(DDRD_, reg_numb);
 23a:	41 b3       	in	r20, 0x11	; 17
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	c9 01       	movw	r24, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <Dio_VSet_pin_Dir+0x186>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	da 95       	dec	r29
 24a:	e2 f7       	brpl	.-8      	; 0x244 <Dio_VSet_pin_Dir+0x182>
 24c:	80 95       	com	r24
 24e:	84 23       	and	r24, r20
 250:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			break;  // Handle unexpected port values
		}
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <DIO_vwrite>:

void DIO_vwrite(unsigned char port , unsigned char reg_numb, const char *val)
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	c8 2f       	mov	r28, r24
 266:	d6 2f       	mov	r29, r22
 268:	8a 01       	movw	r16, r20
	if (((strcmp(val, "HIGH")) == 0) || ((strcmp(val, "high")) == 0) || ((strcmp(val, "1")) == 0) )
 26a:	ca 01       	movw	r24, r20
 26c:	6a e7       	ldi	r22, 0x7A	; 122
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 274:	28 2f       	mov	r18, r24
 276:	39 2f       	mov	r19, r25
 278:	21 15       	cp	r18, r1
 27a:	31 05       	cpc	r19, r1
 27c:	a9 f0       	breq	.+42     	; 0x2a8 <DIO_vwrite+0x4c>
 27e:	c8 01       	movw	r24, r16
 280:	6f e7       	ldi	r22, 0x7F	; 127
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 288:	28 2f       	mov	r18, r24
 28a:	39 2f       	mov	r19, r25
 28c:	21 15       	cp	r18, r1
 28e:	31 05       	cpc	r19, r1
 290:	59 f0       	breq	.+22     	; 0x2a8 <DIO_vwrite+0x4c>
 292:	c8 01       	movw	r24, r16
 294:	64 e8       	ldi	r22, 0x84	; 132
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 29c:	28 2f       	mov	r18, r24
 29e:	39 2f       	mov	r19, r25
 2a0:	21 15       	cp	r18, r1
 2a2:	31 05       	cpc	r19, r1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <DIO_vwrite+0x4c>
 2a6:	4b c0       	rjmp	.+150    	; 0x33e <DIO_vwrite+0xe2>
	{
		switch (port)
 2a8:	c4 34       	cpi	r28, 0x44	; 68
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_vwrite+0x52>
 2ac:	3c c0       	rjmp	.+120    	; 0x326 <DIO_vwrite+0xca>
 2ae:	c5 34       	cpi	r28, 0x45	; 69
 2b0:	40 f4       	brcc	.+16     	; 0x2c2 <DIO_vwrite+0x66>
 2b2:	c2 34       	cpi	r28, 0x42	; 66
 2b4:	01 f1       	breq	.+64     	; 0x2f6 <DIO_vwrite+0x9a>
 2b6:	c3 34       	cpi	r28, 0x43	; 67
 2b8:	50 f5       	brcc	.+84     	; 0x30e <DIO_vwrite+0xb2>
 2ba:	c1 34       	cpi	r28, 0x41	; 65
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <DIO_vwrite+0x64>
 2be:	aa c0       	rjmp	.+340    	; 0x414 <DIO_vwrite+0x1b8>
 2c0:	0e c0       	rjmp	.+28     	; 0x2de <DIO_vwrite+0x82>
 2c2:	c2 36       	cpi	r28, 0x62	; 98
 2c4:	c1 f0       	breq	.+48     	; 0x2f6 <DIO_vwrite+0x9a>
 2c6:	c3 36       	cpi	r28, 0x63	; 99
 2c8:	20 f4       	brcc	.+8      	; 0x2d2 <DIO_vwrite+0x76>
 2ca:	c1 36       	cpi	r28, 0x61	; 97
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_vwrite+0x74>
 2ce:	a2 c0       	rjmp	.+324    	; 0x414 <DIO_vwrite+0x1b8>
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <DIO_vwrite+0x82>
 2d2:	c3 36       	cpi	r28, 0x63	; 99
 2d4:	e1 f0       	breq	.+56     	; 0x30e <DIO_vwrite+0xb2>
 2d6:	c4 36       	cpi	r28, 0x64	; 100
 2d8:	09 f0       	breq	.+2      	; 0x2dc <DIO_vwrite+0x80>
 2da:	9c c0       	rjmp	.+312    	; 0x414 <DIO_vwrite+0x1b8>
 2dc:	24 c0       	rjmp	.+72     	; 0x326 <DIO_vwrite+0xca>
		{
			case 'A':
			case 'a':
			SET_BIT(PORTA_, reg_numb);
 2de:	4b b3       	in	r20, 0x1b	; 27
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	c9 01       	movw	r24, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vwrite+0x90>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	da 95       	dec	r29
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vwrite+0x8c>
 2f0:	84 2b       	or	r24, r20
 2f2:	8b bb       	out	0x1b, r24	; 27
			break;
 2f4:	8f c0       	rjmp	.+286    	; 0x414 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			SET_BIT(PORTB_, reg_numb);
 2f6:	48 b3       	in	r20, 0x18	; 24
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	c9 01       	movw	r24, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_vwrite+0xa8>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	da 95       	dec	r29
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_vwrite+0xa4>
 308:	84 2b       	or	r24, r20
 30a:	88 bb       	out	0x18, r24	; 24
			break;
 30c:	83 c0       	rjmp	.+262    	; 0x414 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			SET_BIT(PORTC_, reg_numb);
 30e:	45 b3       	in	r20, 0x15	; 21
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	c9 01       	movw	r24, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_vwrite+0xc0>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	da 95       	dec	r29
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_vwrite+0xbc>
 320:	84 2b       	or	r24, r20
 322:	85 bb       	out	0x15, r24	; 21
			break;
 324:	77 c0       	rjmp	.+238    	; 0x414 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			SET_BIT(PORTD_, reg_numb);
 326:	42 b3       	in	r20, 0x12	; 18
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	c9 01       	movw	r24, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_vwrite+0xd8>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	da 95       	dec	r29
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_vwrite+0xd4>
 338:	84 2b       	or	r24, r20
 33a:	82 bb       	out	0x12, r24	; 18
			break;
 33c:	6b c0       	rjmp	.+214    	; 0x414 <DIO_vwrite+0x1b8>
			default:
			break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(val, "LOW")) == 0) || ((strcmp(val, "low")) == 0) || ((strcmp(val, "0")) == 0))
 33e:	c8 01       	movw	r24, r16
 340:	66 e8       	ldi	r22, 0x86	; 134
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 348:	28 2f       	mov	r18, r24
 34a:	39 2f       	mov	r19, r25
 34c:	21 15       	cp	r18, r1
 34e:	31 05       	cpc	r19, r1
 350:	a9 f0       	breq	.+42     	; 0x37c <DIO_vwrite+0x120>
 352:	c8 01       	movw	r24, r16
 354:	6a e8       	ldi	r22, 0x8A	; 138
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 35c:	28 2f       	mov	r18, r24
 35e:	39 2f       	mov	r19, r25
 360:	21 15       	cp	r18, r1
 362:	31 05       	cpc	r19, r1
 364:	59 f0       	breq	.+22     	; 0x37c <DIO_vwrite+0x120>
 366:	c8 01       	movw	r24, r16
 368:	6e e8       	ldi	r22, 0x8E	; 142
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 370:	28 2f       	mov	r18, r24
 372:	39 2f       	mov	r19, r25
 374:	21 15       	cp	r18, r1
 376:	31 05       	cpc	r19, r1
 378:	09 f0       	breq	.+2      	; 0x37c <DIO_vwrite+0x120>
 37a:	4c c0       	rjmp	.+152    	; 0x414 <DIO_vwrite+0x1b8>
	{
		switch (port)
 37c:	c4 34       	cpi	r28, 0x44	; 68
 37e:	09 f4       	brne	.+2      	; 0x382 <DIO_vwrite+0x126>
 380:	3d c0       	rjmp	.+122    	; 0x3fc <DIO_vwrite+0x1a0>
 382:	c5 34       	cpi	r28, 0x45	; 69
 384:	40 f4       	brcc	.+16     	; 0x396 <DIO_vwrite+0x13a>
 386:	c2 34       	cpi	r28, 0x42	; 66
 388:	f9 f0       	breq	.+62     	; 0x3c8 <DIO_vwrite+0x16c>
 38a:	c3 34       	cpi	r28, 0x43	; 67
 38c:	50 f5       	brcc	.+84     	; 0x3e2 <DIO_vwrite+0x186>
 38e:	c1 34       	cpi	r28, 0x41	; 65
 390:	09 f0       	breq	.+2      	; 0x394 <DIO_vwrite+0x138>
 392:	40 c0       	rjmp	.+128    	; 0x414 <DIO_vwrite+0x1b8>
 394:	0c c0       	rjmp	.+24     	; 0x3ae <DIO_vwrite+0x152>
 396:	c2 36       	cpi	r28, 0x62	; 98
 398:	b9 f0       	breq	.+46     	; 0x3c8 <DIO_vwrite+0x16c>
 39a:	c3 36       	cpi	r28, 0x63	; 99
 39c:	18 f4       	brcc	.+6      	; 0x3a4 <DIO_vwrite+0x148>
 39e:	c1 36       	cpi	r28, 0x61	; 97
 3a0:	c9 f5       	brne	.+114    	; 0x414 <DIO_vwrite+0x1b8>
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <DIO_vwrite+0x152>
 3a4:	c3 36       	cpi	r28, 0x63	; 99
 3a6:	e9 f0       	breq	.+58     	; 0x3e2 <DIO_vwrite+0x186>
 3a8:	c4 36       	cpi	r28, 0x64	; 100
 3aa:	a1 f5       	brne	.+104    	; 0x414 <DIO_vwrite+0x1b8>
 3ac:	27 c0       	rjmp	.+78     	; 0x3fc <DIO_vwrite+0x1a0>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(PORTA_, reg_numb);
 3ae:	4b b3       	in	r20, 0x1b	; 27
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	c9 01       	movw	r24, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_vwrite+0x160>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	da 95       	dec	r29
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_vwrite+0x15c>
 3c0:	80 95       	com	r24
 3c2:	84 23       	and	r24, r20
 3c4:	8b bb       	out	0x1b, r24	; 27
			break;
 3c6:	26 c0       	rjmp	.+76     	; 0x414 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			CLEAR_BIT(PORTB_, reg_numb);
 3c8:	48 b3       	in	r20, 0x18	; 24
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_vwrite+0x17a>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	da 95       	dec	r29
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_vwrite+0x176>
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	88 bb       	out	0x18, r24	; 24
			break;
 3e0:	19 c0       	rjmp	.+50     	; 0x414 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			CLEAR_BIT(PORTC_, reg_numb);
 3e2:	45 b3       	in	r20, 0x15	; 21
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	c9 01       	movw	r24, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vwrite+0x194>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	da 95       	dec	r29
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vwrite+0x190>
 3f4:	80 95       	com	r24
 3f6:	84 23       	and	r24, r20
 3f8:	85 bb       	out	0x15, r24	; 21
			break;
 3fa:	0c c0       	rjmp	.+24     	; 0x414 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(PORTD_, reg_numb);
 3fc:	42 b3       	in	r20, 0x12	; 18
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	c9 01       	movw	r24, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_vwrite+0x1ae>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	da 95       	dec	r29
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_vwrite+0x1aa>
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	82 bb       	out	0x12, r24	; 18
			default:
			break;  // Handle unexpected port values
		}
	}
	
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	08 95       	ret

0000041e <DIO_vToggle>:

void DIO_vToggle(unsigned char port , unsigned char reg_numb)
{
	switch (port)
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	09 f4       	brne	.+2      	; 0x424 <DIO_vToggle+0x6>
 422:	3d c0       	rjmp	.+122    	; 0x49e <DIO_vToggle+0x80>
 424:	85 34       	cpi	r24, 0x45	; 69
 426:	40 f4       	brcc	.+16     	; 0x438 <DIO_vToggle+0x1a>
 428:	82 34       	cpi	r24, 0x42	; 66
 42a:	f9 f0       	breq	.+62     	; 0x46a <DIO_vToggle+0x4c>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	50 f5       	brcc	.+84     	; 0x484 <DIO_vToggle+0x66>
 430:	81 34       	cpi	r24, 0x41	; 65
 432:	09 f0       	breq	.+2      	; 0x436 <DIO_vToggle+0x18>
 434:	40 c0       	rjmp	.+128    	; 0x4b6 <DIO_vToggle+0x98>
 436:	0c c0       	rjmp	.+24     	; 0x450 <DIO_vToggle+0x32>
 438:	82 36       	cpi	r24, 0x62	; 98
 43a:	b9 f0       	breq	.+46     	; 0x46a <DIO_vToggle+0x4c>
 43c:	83 36       	cpi	r24, 0x63	; 99
 43e:	18 f4       	brcc	.+6      	; 0x446 <DIO_vToggle+0x28>
 440:	81 36       	cpi	r24, 0x61	; 97
 442:	c9 f5       	brne	.+114    	; 0x4b6 <DIO_vToggle+0x98>
 444:	05 c0       	rjmp	.+10     	; 0x450 <DIO_vToggle+0x32>
 446:	83 36       	cpi	r24, 0x63	; 99
 448:	e9 f0       	breq	.+58     	; 0x484 <DIO_vToggle+0x66>
 44a:	84 36       	cpi	r24, 0x64	; 100
 44c:	a1 f5       	brne	.+104    	; 0x4b6 <DIO_vToggle+0x98>
 44e:	27 c0       	rjmp	.+78     	; 0x49e <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA_, reg_numb);
 450:	2b b3       	in	r18, 0x1b	; 27
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	ac 01       	movw	r20, r24
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_vToggle+0x40>
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_vToggle+0x3c>
 462:	ba 01       	movw	r22, r20
 464:	62 27       	eor	r22, r18
 466:	6b bb       	out	0x1b, r22	; 27
		break;
 468:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB_, reg_numb);
 46a:	28 b3       	in	r18, 0x18	; 24
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	ac 01       	movw	r20, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_vToggle+0x5a>
 474:	44 0f       	add	r20, r20
 476:	55 1f       	adc	r21, r21
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_vToggle+0x56>
 47c:	ba 01       	movw	r22, r20
 47e:	62 27       	eor	r22, r18
 480:	68 bb       	out	0x18, r22	; 24
		break;
 482:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC_, reg_numb);
 484:	25 b3       	in	r18, 0x15	; 21
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	ac 01       	movw	r20, r24
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_vToggle+0x74>
 48e:	44 0f       	add	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_vToggle+0x70>
 496:	ba 01       	movw	r22, r20
 498:	62 27       	eor	r22, r18
 49a:	65 bb       	out	0x15, r22	; 21
		break;
 49c:	08 95       	ret
		case 'D':   // Fixed inconsistency
		case 'd':
		TOG_BIT(PORTD_, reg_numb);
 49e:	22 b3       	in	r18, 0x12	; 18
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	ac 01       	movw	r20, r24
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_vToggle+0x8e>
 4a8:	44 0f       	add	r20, r20
 4aa:	55 1f       	adc	r21, r21
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_vToggle+0x8a>
 4b0:	ba 01       	movw	r22, r20
 4b2:	62 27       	eor	r22, r18
 4b4:	62 bb       	out	0x12, r22	; 18
 4b6:	08 95       	ret

000004b8 <DIO_u8Read_pin>:
}

unsigned char DIO_u8Read_pin(unsigned char port , unsigned char reg_numb)
{
	
	switch (port)
 4b8:	84 34       	cpi	r24, 0x44	; 68
 4ba:	09 f4       	brne	.+2      	; 0x4be <DIO_u8Read_pin+0x6>
 4bc:	4e c0       	rjmp	.+156    	; 0x55a <DIO_u8Read_pin+0xa2>
 4be:	85 34       	cpi	r24, 0x45	; 69
 4c0:	40 f4       	brcc	.+16     	; 0x4d2 <DIO_u8Read_pin+0x1a>
 4c2:	82 34       	cpi	r24, 0x42	; 66
 4c4:	31 f1       	breq	.+76     	; 0x512 <DIO_u8Read_pin+0x5a>
 4c6:	83 34       	cpi	r24, 0x43	; 67
 4c8:	b0 f5       	brcc	.+108    	; 0x536 <DIO_u8Read_pin+0x7e>
 4ca:	81 34       	cpi	r24, 0x41	; 65
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <DIO_u8Read_pin+0x18>
 4ce:	57 c0       	rjmp	.+174    	; 0x57e <DIO_u8Read_pin+0xc6>
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <DIO_u8Read_pin+0x36>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	f1 f0       	breq	.+60     	; 0x512 <DIO_u8Read_pin+0x5a>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	20 f4       	brcc	.+8      	; 0x4e2 <DIO_u8Read_pin+0x2a>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <DIO_u8Read_pin+0x28>
 4de:	4f c0       	rjmp	.+158    	; 0x57e <DIO_u8Read_pin+0xc6>
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <DIO_u8Read_pin+0x36>
 4e2:	83 36       	cpi	r24, 0x63	; 99
 4e4:	41 f1       	breq	.+80     	; 0x536 <DIO_u8Read_pin+0x7e>
 4e6:	84 36       	cpi	r24, 0x64	; 100
 4e8:	09 f0       	breq	.+2      	; 0x4ec <DIO_u8Read_pin+0x34>
 4ea:	49 c0       	rjmp	.+146    	; 0x57e <DIO_u8Read_pin+0xc6>
 4ec:	36 c0       	rjmp	.+108    	; 0x55a <DIO_u8Read_pin+0xa2>
	{
		case 'A':
		case 'a':
		return READ_BIT(PINA_, reg_numb);
 4ee:	29 b3       	in	r18, 0x19	; 25
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	06 2e       	mov	r0, r22
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_u8Read_pin+0x44>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_u8Read_pin+0x40>
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	82 23       	and	r24, r18
 504:	93 23       	and	r25, r19
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8Read_pin+0x54>
 508:	95 95       	asr	r25
 50a:	87 95       	ror	r24
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8Read_pin+0x50>
 510:	08 95       	ret
		break;
		case 'B':
		case 'b':
		return READ_BIT(PINB_, reg_numb);
 512:	26 b3       	in	r18, 0x16	; 22
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	06 2e       	mov	r0, r22
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8Read_pin+0x68>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8Read_pin+0x64>
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	82 23       	and	r24, r18
 528:	93 23       	and	r25, r19
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_u8Read_pin+0x78>
 52c:	95 95       	asr	r25
 52e:	87 95       	ror	r24
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_u8Read_pin+0x74>
 534:	08 95       	ret
		break;
		case 'C':
		case 'c':
		return READ_BIT(PINC_, reg_numb);
 536:	23 b3       	in	r18, 0x13	; 19
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	06 2e       	mov	r0, r22
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8Read_pin+0x8c>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8Read_pin+0x88>
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	82 23       	and	r24, r18
 54c:	93 23       	and	r25, r19
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_u8Read_pin+0x9c>
 550:	95 95       	asr	r25
 552:	87 95       	ror	r24
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_u8Read_pin+0x98>
 558:	08 95       	ret
		break;
		case 'D':   // Fixed inconsistency
		case 'd':
		return READ_BIT(PIND_, reg_numb);
 55a:	20 b3       	in	r18, 0x10	; 16
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	06 2e       	mov	r0, r22
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_u8Read_pin+0xb0>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	0a 94       	dec	r0
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_u8Read_pin+0xac>
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	82 23       	and	r24, r18
 570:	93 23       	and	r25, r19
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_u8Read_pin+0xc0>
 574:	95 95       	asr	r25
 576:	87 95       	ror	r24
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_u8Read_pin+0xbc>
 57c:	08 95       	ret
		break;
		default:
		break;  // Handle unexpected port values
	}
}
 57e:	08 95       	ret

00000580 <DIO_VSet_port_Direction>:


void DIO_VSet_port_Direction(unsigned char port , unsigned char *dir)
{
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	c8 2f       	mov	r28, r24
 588:	8b 01       	movw	r16, r22
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
 58a:	cb 01       	movw	r24, r22
 58c:	60 e6       	ldi	r22, 0x60	; 96
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 594:	28 2f       	mov	r18, r24
 596:	39 2f       	mov	r19, r25
 598:	21 15       	cp	r18, r1
 59a:	31 05       	cpc	r19, r1
 59c:	51 f0       	breq	.+20     	; 0x5b2 <DIO_VSet_port_Direction+0x32>
 59e:	c8 01       	movw	r24, r16
 5a0:	67 e6       	ldi	r22, 0x67	; 103
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 5a8:	28 2f       	mov	r18, r24
 5aa:	39 2f       	mov	r19, r25
 5ac:	21 15       	cp	r18, r1
 5ae:	31 05       	cpc	r19, r1
 5b0:	31 f5       	brne	.+76     	; 0x5fe <DIO_VSet_port_Direction+0x7e>
		{
			switch(port)
 5b2:	c4 34       	cpi	r28, 0x44	; 68
 5b4:	09 f1       	breq	.+66     	; 0x5f8 <DIO_VSet_port_Direction+0x78>
 5b6:	c5 34       	cpi	r28, 0x45	; 69
 5b8:	40 f4       	brcc	.+16     	; 0x5ca <DIO_VSet_port_Direction+0x4a>
 5ba:	c2 34       	cpi	r28, 0x42	; 66
 5bc:	b9 f0       	breq	.+46     	; 0x5ec <DIO_VSet_port_Direction+0x6c>
 5be:	c3 34       	cpi	r28, 0x43	; 67
 5c0:	c0 f4       	brcc	.+48     	; 0x5f2 <DIO_VSet_port_Direction+0x72>
 5c2:	c1 34       	cpi	r28, 0x41	; 65
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <DIO_VSet_port_Direction+0x48>
 5c6:	4d c0       	rjmp	.+154    	; 0x662 <DIO_VSet_port_Direction+0xe2>
 5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <DIO_VSet_port_Direction+0x66>
 5ca:	c2 36       	cpi	r28, 0x62	; 98
 5cc:	79 f0       	breq	.+30     	; 0x5ec <DIO_VSet_port_Direction+0x6c>
 5ce:	c3 36       	cpi	r28, 0x63	; 99
 5d0:	20 f4       	brcc	.+8      	; 0x5da <DIO_VSet_port_Direction+0x5a>
 5d2:	c1 36       	cpi	r28, 0x61	; 97
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <DIO_VSet_port_Direction+0x58>
 5d6:	45 c0       	rjmp	.+138    	; 0x662 <DIO_VSet_port_Direction+0xe2>
 5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <DIO_VSet_port_Direction+0x66>
 5da:	c3 36       	cpi	r28, 0x63	; 99
 5dc:	51 f0       	breq	.+20     	; 0x5f2 <DIO_VSet_port_Direction+0x72>
 5de:	c4 36       	cpi	r28, 0x64	; 100
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <DIO_VSet_port_Direction+0x64>
 5e2:	3f c0       	rjmp	.+126    	; 0x662 <DIO_VSet_port_Direction+0xe2>
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <DIO_VSet_port_Direction+0x78>
			{
				case'a':
				case'A':
				DDRA_ = 0xff;
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	8a bb       	out	0x1a, r24	; 26
				break;
 5ea:	3b c0       	rjmp	.+118    	; 0x662 <DIO_VSet_port_Direction+0xe2>
				case 'b':
				case 'B':
				DDRB_ = 0xff;
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	87 bb       	out	0x17, r24	; 23
				break;
 5f0:	38 c0       	rjmp	.+112    	; 0x662 <DIO_VSet_port_Direction+0xe2>
				case 'C':
				case 'c':
				DDRC_ = 0xff;
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	84 bb       	out	0x14, r24	; 20
				break;
 5f6:	35 c0       	rjmp	.+106    	; 0x662 <DIO_VSet_port_Direction+0xe2>
				case 'd':
				case 'D':
				DDRD_ = 0xff;
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	81 bb       	out	0x11, r24	; 17
				break;
 5fc:	32 c0       	rjmp	.+100    	; 0x662 <DIO_VSet_port_Direction+0xe2>
			}
		}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
 5fe:	c8 01       	movw	r24, r16
 600:	6e e6       	ldi	r22, 0x6E	; 110
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 608:	28 2f       	mov	r18, r24
 60a:	39 2f       	mov	r19, r25
 60c:	21 15       	cp	r18, r1
 60e:	31 05       	cpc	r19, r1
 610:	51 f0       	breq	.+20     	; 0x626 <DIO_VSet_port_Direction+0xa6>
 612:	c8 01       	movw	r24, r16
 614:	64 e7       	ldi	r22, 0x74	; 116
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 61c:	28 2f       	mov	r18, r24
 61e:	39 2f       	mov	r19, r25
 620:	21 15       	cp	r18, r1
 622:	31 05       	cpc	r19, r1
 624:	f1 f4       	brne	.+60     	; 0x662 <DIO_VSet_port_Direction+0xe2>
	{
		switch(port)
 626:	c4 34       	cpi	r28, 0x44	; 68
 628:	d9 f0       	breq	.+54     	; 0x660 <DIO_VSet_port_Direction+0xe0>
 62a:	c5 34       	cpi	r28, 0x45	; 69
 62c:	38 f4       	brcc	.+14     	; 0x63c <DIO_VSet_port_Direction+0xbc>
 62e:	c2 34       	cpi	r28, 0x42	; 66
 630:	99 f0       	breq	.+38     	; 0x658 <DIO_VSet_port_Direction+0xd8>
 632:	c3 34       	cpi	r28, 0x43	; 67
 634:	98 f4       	brcc	.+38     	; 0x65c <DIO_VSet_port_Direction+0xdc>
 636:	c1 34       	cpi	r28, 0x41	; 65
 638:	a1 f4       	brne	.+40     	; 0x662 <DIO_VSet_port_Direction+0xe2>
 63a:	0c c0       	rjmp	.+24     	; 0x654 <DIO_VSet_port_Direction+0xd4>
 63c:	c2 36       	cpi	r28, 0x62	; 98
 63e:	61 f0       	breq	.+24     	; 0x658 <DIO_VSet_port_Direction+0xd8>
 640:	c3 36       	cpi	r28, 0x63	; 99
 642:	18 f4       	brcc	.+6      	; 0x64a <DIO_VSet_port_Direction+0xca>
 644:	c1 36       	cpi	r28, 0x61	; 97
 646:	69 f4       	brne	.+26     	; 0x662 <DIO_VSet_port_Direction+0xe2>
 648:	05 c0       	rjmp	.+10     	; 0x654 <DIO_VSet_port_Direction+0xd4>
 64a:	c3 36       	cpi	r28, 0x63	; 99
 64c:	39 f0       	breq	.+14     	; 0x65c <DIO_VSet_port_Direction+0xdc>
 64e:	c4 36       	cpi	r28, 0x64	; 100
 650:	41 f4       	brne	.+16     	; 0x662 <DIO_VSet_port_Direction+0xe2>
 652:	06 c0       	rjmp	.+12     	; 0x660 <DIO_VSet_port_Direction+0xe0>
		{
			case'a':
			case'A':
			DDRA_ = 0;
 654:	1a ba       	out	0x1a, r1	; 26
			break;
 656:	05 c0       	rjmp	.+10     	; 0x662 <DIO_VSet_port_Direction+0xe2>
			case 'b':
			case 'B':
			DDRB_ = 0;
 658:	17 ba       	out	0x17, r1	; 23
			break;
 65a:	03 c0       	rjmp	.+6      	; 0x662 <DIO_VSet_port_Direction+0xe2>
			case 'C':
			case 'c':
			DDRC_ = 0;
 65c:	14 ba       	out	0x14, r1	; 20
			break;
 65e:	01 c0       	rjmp	.+2      	; 0x662 <DIO_VSet_port_Direction+0xe2>
			case 'd':
			case 'D':
			DDRD_ = 0;
 660:	11 ba       	out	0x11, r1	; 17
			break;
		}
	}
}
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <DIO_VWrite_port>:

void DIO_VWrite_port(unsigned char port , unsigned char val)
{
		switch(port)
 66a:	84 34       	cpi	r24, 0x44	; 68
 66c:	d9 f0       	breq	.+54     	; 0x6a4 <DIO_VWrite_port+0x3a>
 66e:	85 34       	cpi	r24, 0x45	; 69
 670:	38 f4       	brcc	.+14     	; 0x680 <DIO_VWrite_port+0x16>
 672:	82 34       	cpi	r24, 0x42	; 66
 674:	99 f0       	breq	.+38     	; 0x69c <DIO_VWrite_port+0x32>
 676:	83 34       	cpi	r24, 0x43	; 67
 678:	98 f4       	brcc	.+38     	; 0x6a0 <DIO_VWrite_port+0x36>
 67a:	81 34       	cpi	r24, 0x41	; 65
 67c:	a1 f4       	brne	.+40     	; 0x6a6 <DIO_VWrite_port+0x3c>
 67e:	0c c0       	rjmp	.+24     	; 0x698 <DIO_VWrite_port+0x2e>
 680:	82 36       	cpi	r24, 0x62	; 98
 682:	61 f0       	breq	.+24     	; 0x69c <DIO_VWrite_port+0x32>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	18 f4       	brcc	.+6      	; 0x68e <DIO_VWrite_port+0x24>
 688:	81 36       	cpi	r24, 0x61	; 97
 68a:	69 f4       	brne	.+26     	; 0x6a6 <DIO_VWrite_port+0x3c>
 68c:	05 c0       	rjmp	.+10     	; 0x698 <DIO_VWrite_port+0x2e>
 68e:	83 36       	cpi	r24, 0x63	; 99
 690:	39 f0       	breq	.+14     	; 0x6a0 <DIO_VWrite_port+0x36>
 692:	84 36       	cpi	r24, 0x64	; 100
 694:	41 f4       	brne	.+16     	; 0x6a6 <DIO_VWrite_port+0x3c>
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <DIO_VWrite_port+0x3a>
		{
			case'a':
			case'A':
			PORTA_ = val;
 698:	6b bb       	out	0x1b, r22	; 27
			break;
 69a:	08 95       	ret
			case 'b':
			case 'B':
			PORTB_ = val;
 69c:	68 bb       	out	0x18, r22	; 24
			break;
 69e:	08 95       	ret
			case 'C':
			case 'c':
			PORTC_ = val;
 6a0:	65 bb       	out	0x15, r22	; 21
			break;
 6a2:	08 95       	ret
			case 'd':
			case 'D':
			PORTD_ = val;
 6a4:	62 bb       	out	0x12, r22	; 18
 6a6:	08 95       	ret

000006a8 <DIO_U8Read_port>:
}


unsigned char DIO_U8Read_port(unsigned char port)
{
	switch(port)
 6a8:	84 34       	cpi	r24, 0x44	; 68
 6aa:	d9 f0       	breq	.+54     	; 0x6e2 <DIO_U8Read_port+0x3a>
 6ac:	85 34       	cpi	r24, 0x45	; 69
 6ae:	38 f4       	brcc	.+14     	; 0x6be <DIO_U8Read_port+0x16>
 6b0:	82 34       	cpi	r24, 0x42	; 66
 6b2:	99 f0       	breq	.+38     	; 0x6da <DIO_U8Read_port+0x32>
 6b4:	83 34       	cpi	r24, 0x43	; 67
 6b6:	98 f4       	brcc	.+38     	; 0x6de <DIO_U8Read_port+0x36>
 6b8:	81 34       	cpi	r24, 0x41	; 65
 6ba:	a9 f4       	brne	.+42     	; 0x6e6 <DIO_U8Read_port+0x3e>
 6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <DIO_U8Read_port+0x2e>
 6be:	82 36       	cpi	r24, 0x62	; 98
 6c0:	61 f0       	breq	.+24     	; 0x6da <DIO_U8Read_port+0x32>
 6c2:	83 36       	cpi	r24, 0x63	; 99
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <DIO_U8Read_port+0x24>
 6c6:	81 36       	cpi	r24, 0x61	; 97
 6c8:	71 f4       	brne	.+28     	; 0x6e6 <DIO_U8Read_port+0x3e>
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <DIO_U8Read_port+0x2e>
 6cc:	83 36       	cpi	r24, 0x63	; 99
 6ce:	39 f0       	breq	.+14     	; 0x6de <DIO_U8Read_port+0x36>
 6d0:	84 36       	cpi	r24, 0x64	; 100
 6d2:	49 f4       	brne	.+18     	; 0x6e6 <DIO_U8Read_port+0x3e>
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <DIO_U8Read_port+0x3a>
	{
		case'a':
		case'A':
			return PINA_ ;
 6d6:	89 b3       	in	r24, 0x19	; 25
 6d8:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PINB_;
 6da:	86 b3       	in	r24, 0x16	; 22
 6dc:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PINC_;
 6de:	83 b3       	in	r24, 0x13	; 19
 6e0:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PIND_;
 6e2:	80 b3       	in	r24, 0x10	; 16
 6e4:	08 95       	ret
			break;
	}
}
 6e6:	08 95       	ret

000006e8 <DIO_VToggle_port>:


void DIO_VToggle_port(unsigned char port)

{
	switch(port)
 6e8:	84 34       	cpi	r24, 0x44	; 68
 6ea:	09 f1       	breq	.+66     	; 0x72e <DIO_VToggle_port+0x46>
 6ec:	85 34       	cpi	r24, 0x45	; 69
 6ee:	38 f4       	brcc	.+14     	; 0x6fe <DIO_VToggle_port+0x16>
 6f0:	82 34       	cpi	r24, 0x42	; 66
 6f2:	a9 f0       	breq	.+42     	; 0x71e <DIO_VToggle_port+0x36>
 6f4:	83 34       	cpi	r24, 0x43	; 67
 6f6:	b8 f4       	brcc	.+46     	; 0x726 <DIO_VToggle_port+0x3e>
 6f8:	81 34       	cpi	r24, 0x41	; 65
 6fa:	e1 f4       	brne	.+56     	; 0x734 <DIO_VToggle_port+0x4c>
 6fc:	0c c0       	rjmp	.+24     	; 0x716 <DIO_VToggle_port+0x2e>
 6fe:	82 36       	cpi	r24, 0x62	; 98
 700:	71 f0       	breq	.+28     	; 0x71e <DIO_VToggle_port+0x36>
 702:	83 36       	cpi	r24, 0x63	; 99
 704:	18 f4       	brcc	.+6      	; 0x70c <DIO_VToggle_port+0x24>
 706:	81 36       	cpi	r24, 0x61	; 97
 708:	a9 f4       	brne	.+42     	; 0x734 <DIO_VToggle_port+0x4c>
 70a:	05 c0       	rjmp	.+10     	; 0x716 <DIO_VToggle_port+0x2e>
 70c:	83 36       	cpi	r24, 0x63	; 99
 70e:	59 f0       	breq	.+22     	; 0x726 <DIO_VToggle_port+0x3e>
 710:	84 36       	cpi	r24, 0x64	; 100
 712:	81 f4       	brne	.+32     	; 0x734 <DIO_VToggle_port+0x4c>
 714:	0c c0       	rjmp	.+24     	; 0x72e <DIO_VToggle_port+0x46>
	{
		case'a':
		case'A':
			return PORTA_ ^= (0xff);
 716:	8b b3       	in	r24, 0x1b	; 27
 718:	80 95       	com	r24
 71a:	8b bb       	out	0x1b, r24	; 27
 71c:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PORTB_ ^= (0xff);
 71e:	88 b3       	in	r24, 0x18	; 24
 720:	80 95       	com	r24
 722:	88 bb       	out	0x18, r24	; 24
 724:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PORTC_ ^= (0xff);
 726:	85 b3       	in	r24, 0x15	; 21
 728:	80 95       	com	r24
 72a:	85 bb       	out	0x15, r24	; 21
 72c:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PORTD_ ^= (0xff);
 72e:	82 b3       	in	r24, 0x12	; 18
 730:	80 95       	com	r24
 732:	82 bb       	out	0x12, r24	; 18
 734:	08 95       	ret

00000736 <Dio_connect_pullup>:


void Dio_connect_pullup(unsigned char port , unsigned char pin_numb , unsigned char state)
{
// by default the PUD of SFIOR is set to low which means the pull-up is enabled
	switch(port)
 736:	84 34       	cpi	r24, 0x44	; 68
 738:	09 f4       	brne	.+2      	; 0x73c <Dio_connect_pullup+0x6>
 73a:	71 c0       	rjmp	.+226    	; 0x81e <Dio_connect_pullup+0xe8>
 73c:	85 34       	cpi	r24, 0x45	; 69
 73e:	48 f4       	brcc	.+18     	; 0x752 <Dio_connect_pullup+0x1c>
 740:	82 34       	cpi	r24, 0x42	; 66
 742:	99 f1       	breq	.+102    	; 0x7aa <Dio_connect_pullup+0x74>
 744:	83 34       	cpi	r24, 0x43	; 67
 746:	08 f0       	brcs	.+2      	; 0x74a <Dio_connect_pullup+0x14>
 748:	4d c0       	rjmp	.+154    	; 0x7e4 <Dio_connect_pullup+0xae>
 74a:	81 34       	cpi	r24, 0x41	; 65
 74c:	09 f0       	breq	.+2      	; 0x750 <Dio_connect_pullup+0x1a>
 74e:	83 c0       	rjmp	.+262    	; 0x856 <Dio_connect_pullup+0x120>
 750:	0f c0       	rjmp	.+30     	; 0x770 <Dio_connect_pullup+0x3a>
 752:	82 36       	cpi	r24, 0x62	; 98
 754:	51 f1       	breq	.+84     	; 0x7aa <Dio_connect_pullup+0x74>
 756:	83 36       	cpi	r24, 0x63	; 99
 758:	20 f4       	brcc	.+8      	; 0x762 <Dio_connect_pullup+0x2c>
 75a:	81 36       	cpi	r24, 0x61	; 97
 75c:	09 f0       	breq	.+2      	; 0x760 <Dio_connect_pullup+0x2a>
 75e:	7b c0       	rjmp	.+246    	; 0x856 <Dio_connect_pullup+0x120>
 760:	07 c0       	rjmp	.+14     	; 0x770 <Dio_connect_pullup+0x3a>
 762:	83 36       	cpi	r24, 0x63	; 99
 764:	09 f4       	brne	.+2      	; 0x768 <Dio_connect_pullup+0x32>
 766:	3e c0       	rjmp	.+124    	; 0x7e4 <Dio_connect_pullup+0xae>
 768:	84 36       	cpi	r24, 0x64	; 100
 76a:	09 f0       	breq	.+2      	; 0x76e <Dio_connect_pullup+0x38>
 76c:	74 c0       	rjmp	.+232    	; 0x856 <Dio_connect_pullup+0x120>
 76e:	57 c0       	rjmp	.+174    	; 0x81e <Dio_connect_pullup+0xe8>
	{
		case 'A':
		case 'a':			
			(state == 1) ?  (SET_BIT(PORTA_ , pin_numb),0) : (CLEAR_BIT(PORTA_,pin_numb),0);
 770:	41 30       	cpi	r20, 0x01	; 1
 772:	69 f4       	brne	.+26     	; 0x78e <Dio_connect_pullup+0x58>
 774:	2b b3       	in	r18, 0x1b	; 27
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	ac 01       	movw	r20, r24
 77c:	02 c0       	rjmp	.+4      	; 0x782 <Dio_connect_pullup+0x4c>
 77e:	44 0f       	add	r20, r20
 780:	55 1f       	adc	r21, r21
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <Dio_connect_pullup+0x48>
 786:	ba 01       	movw	r22, r20
 788:	62 2b       	or	r22, r18
 78a:	6b bb       	out	0x1b, r22	; 27
 78c:	08 95       	ret
 78e:	2b b3       	in	r18, 0x1b	; 27
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	ac 01       	movw	r20, r24
 796:	02 c0       	rjmp	.+4      	; 0x79c <Dio_connect_pullup+0x66>
 798:	44 0f       	add	r20, r20
 79a:	55 1f       	adc	r21, r21
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <Dio_connect_pullup+0x62>
 7a0:	ba 01       	movw	r22, r20
 7a2:	60 95       	com	r22
 7a4:	62 23       	and	r22, r18
 7a6:	6b bb       	out	0x1b, r22	; 27
 7a8:	08 95       	ret
			break;
		case 'B':
		case 'b':
			(state == 1) ?  (SET_BIT(PORTB_ , pin_numb),0) : (CLEAR_BIT(PORTB_,pin_numb),0);
 7aa:	41 30       	cpi	r20, 0x01	; 1
 7ac:	69 f4       	brne	.+26     	; 0x7c8 <Dio_connect_pullup+0x92>
 7ae:	28 b3       	in	r18, 0x18	; 24
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	ac 01       	movw	r20, r24
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <Dio_connect_pullup+0x86>
 7b8:	44 0f       	add	r20, r20
 7ba:	55 1f       	adc	r21, r21
 7bc:	6a 95       	dec	r22
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <Dio_connect_pullup+0x82>
 7c0:	ba 01       	movw	r22, r20
 7c2:	62 2b       	or	r22, r18
 7c4:	68 bb       	out	0x18, r22	; 24
 7c6:	08 95       	ret
 7c8:	28 b3       	in	r18, 0x18	; 24
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	ac 01       	movw	r20, r24
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <Dio_connect_pullup+0xa0>
 7d2:	44 0f       	add	r20, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <Dio_connect_pullup+0x9c>
 7da:	ba 01       	movw	r22, r20
 7dc:	60 95       	com	r22
 7de:	62 23       	and	r22, r18
 7e0:	68 bb       	out	0x18, r22	; 24
 7e2:	08 95       	ret
			break;
		case 'C':
		case 'c':
			(state == 1) ?  (SET_BIT(PORTC_ , pin_numb),0) : (CLEAR_BIT(PORTC_,pin_numb),0);
 7e4:	41 30       	cpi	r20, 0x01	; 1
 7e6:	69 f4       	brne	.+26     	; 0x802 <Dio_connect_pullup+0xcc>
 7e8:	25 b3       	in	r18, 0x15	; 21
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	ac 01       	movw	r20, r24
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <Dio_connect_pullup+0xc0>
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <Dio_connect_pullup+0xbc>
 7fa:	ba 01       	movw	r22, r20
 7fc:	62 2b       	or	r22, r18
 7fe:	65 bb       	out	0x15, r22	; 21
 800:	08 95       	ret
 802:	25 b3       	in	r18, 0x15	; 21
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	ac 01       	movw	r20, r24
 80a:	02 c0       	rjmp	.+4      	; 0x810 <Dio_connect_pullup+0xda>
 80c:	44 0f       	add	r20, r20
 80e:	55 1f       	adc	r21, r21
 810:	6a 95       	dec	r22
 812:	e2 f7       	brpl	.-8      	; 0x80c <Dio_connect_pullup+0xd6>
 814:	ba 01       	movw	r22, r20
 816:	60 95       	com	r22
 818:	62 23       	and	r22, r18
 81a:	65 bb       	out	0x15, r22	; 21
 81c:	08 95       	ret
			break;
		case 'D':
		case 'd':
			(state == 1) ?  (SET_BIT(PORTD_ , pin_numb),0) : (CLEAR_BIT(PORTD_,pin_numb),0);
 81e:	41 30       	cpi	r20, 0x01	; 1
 820:	69 f4       	brne	.+26     	; 0x83c <Dio_connect_pullup+0x106>
 822:	22 b3       	in	r18, 0x12	; 18
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	ac 01       	movw	r20, r24
 82a:	02 c0       	rjmp	.+4      	; 0x830 <Dio_connect_pullup+0xfa>
 82c:	44 0f       	add	r20, r20
 82e:	55 1f       	adc	r21, r21
 830:	6a 95       	dec	r22
 832:	e2 f7       	brpl	.-8      	; 0x82c <Dio_connect_pullup+0xf6>
 834:	ba 01       	movw	r22, r20
 836:	62 2b       	or	r22, r18
 838:	62 bb       	out	0x12, r22	; 18
 83a:	08 95       	ret
 83c:	22 b3       	in	r18, 0x12	; 18
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	ac 01       	movw	r20, r24
 844:	02 c0       	rjmp	.+4      	; 0x84a <Dio_connect_pullup+0x114>
 846:	44 0f       	add	r20, r20
 848:	55 1f       	adc	r21, r21
 84a:	6a 95       	dec	r22
 84c:	e2 f7       	brpl	.-8      	; 0x846 <Dio_connect_pullup+0x110>
 84e:	ba 01       	movw	r22, r20
 850:	60 95       	com	r22
 852:	62 23       	and	r22, r18
 854:	62 bb       	out	0x12, r22	; 18
 856:	08 95       	ret

00000858 <Dio_Write_lowNibble2>:
}
}


void Dio_Write_lowNibble2(unsigned char port , unsigned char val )
{
 858:	ef 92       	push	r14
 85a:	ff 92       	push	r15
 85c:	1f 93       	push	r17
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
 864:	00 d0       	rcall	.+0      	; 0x866 <__stack+0x7>
 866:	cd b7       	in	r28, 0x3d	; 61
 868:	de b7       	in	r29, 0x3e	; 62
 86a:	18 2f       	mov	r17, r24
	const char *bit_as_string[] = {"0", "1"};
 86c:	8e e8       	ldi	r24, 0x8E	; 142
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	9a 83       	std	Y+2, r25	; 0x02
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	84 e8       	ldi	r24, 0x84	; 132
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	9c 83       	std	Y+4, r25	; 0x04
 87a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vwrite(port , 0 , bit_as_string[READ_BIT(val,0)]);
 87c:	e6 2e       	mov	r14, r22
 87e:	ff 24       	eor	r15, r15
 880:	f7 01       	movw	r30, r14
 882:	e1 70       	andi	r30, 0x01	; 1
 884:	f0 70       	andi	r31, 0x00	; 0
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	8c 0f       	add	r24, r28
 890:	9d 1f       	adc	r25, r29
 892:	e8 0f       	add	r30, r24
 894:	f9 1f       	adc	r31, r25
 896:	40 81       	ld	r20, Z
 898:	51 81       	ldd	r21, Z+1	; 0x01
 89a:	81 2f       	mov	r24, r17
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	DIO_vwrite(port , 1 , bit_as_string[READ_BIT(val,1)]);
 8a2:	f7 01       	movw	r30, r14
 8a4:	e2 70       	andi	r30, 0x02	; 2
 8a6:	f0 70       	andi	r31, 0x00	; 0
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	8c 0f       	add	r24, r28
 8ae:	9d 1f       	adc	r25, r29
 8b0:	e8 0f       	add	r30, r24
 8b2:	f9 1f       	adc	r31, r25
 8b4:	40 81       	ld	r20, Z
 8b6:	51 81       	ldd	r21, Z+1	; 0x01
 8b8:	81 2f       	mov	r24, r17
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	DIO_vwrite(port , 2 , bit_as_string[READ_BIT(val,2)]);
 8c0:	f7 01       	movw	r30, r14
 8c2:	e4 70       	andi	r30, 0x04	; 4
 8c4:	f0 70       	andi	r31, 0x00	; 0
 8c6:	f5 95       	asr	r31
 8c8:	e7 95       	ror	r30
 8ca:	f5 95       	asr	r31
 8cc:	e7 95       	ror	r30
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	8c 0f       	add	r24, r28
 8d8:	9d 1f       	adc	r25, r29
 8da:	e8 0f       	add	r30, r24
 8dc:	f9 1f       	adc	r31, r25
 8de:	40 81       	ld	r20, Z
 8e0:	51 81       	ldd	r21, Z+1	; 0x01
 8e2:	81 2f       	mov	r24, r17
 8e4:	62 e0       	ldi	r22, 0x02	; 2
 8e6:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	DIO_vwrite(port , 3 , bit_as_string[READ_BIT(val,3)]);
 8ea:	98 e0       	ldi	r25, 0x08	; 8
 8ec:	e9 22       	and	r14, r25
 8ee:	ff 24       	eor	r15, r15
 8f0:	f7 01       	movw	r30, r14
 8f2:	f5 95       	asr	r31
 8f4:	e7 95       	ror	r30
 8f6:	f5 95       	asr	r31
 8f8:	e7 95       	ror	r30
 8fa:	f5 95       	asr	r31
 8fc:	e7 95       	ror	r30
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	8c 0f       	add	r24, r28
 908:	9d 1f       	adc	r25, r29
 90a:	e8 0f       	add	r30, r24
 90c:	f9 1f       	adc	r31, r25
 90e:	40 81       	ld	r20, Z
 910:	51 81       	ldd	r21, Z+1	; 0x01
 912:	81 2f       	mov	r24, r17
 914:	63 e0       	ldi	r22, 0x03	; 3
 916:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
}
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	0f 90       	pop	r0
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	1f 91       	pop	r17
 928:	ff 90       	pop	r15
 92a:	ef 90       	pop	r14
 92c:	08 95       	ret

0000092e <Dio_Write_highNibble2>:

void Dio_Write_highNibble2(unsigned char port , unsigned char val )
{
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	00 d0       	rcall	.+0      	; 0x93a <Dio_Write_highNibble2+0xc>
 93a:	00 d0       	rcall	.+0      	; 0x93c <Dio_Write_highNibble2+0xe>
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
 940:	18 2f       	mov	r17, r24
	const char *bit_as_string[] = {"0", "1"};
 942:	8e e8       	ldi	r24, 0x8E	; 142
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	9a 83       	std	Y+2, r25	; 0x02
 948:	89 83       	std	Y+1, r24	; 0x01
 94a:	84 e8       	ldi	r24, 0x84	; 132
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	9c 83       	std	Y+4, r25	; 0x04
 950:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vwrite(port , 4 , bit_as_string[READ_BIT(val,0)]);
 952:	e6 2e       	mov	r14, r22
 954:	ff 24       	eor	r15, r15
 956:	f7 01       	movw	r30, r14
 958:	e1 70       	andi	r30, 0x01	; 1
 95a:	f0 70       	andi	r31, 0x00	; 0
 95c:	ee 0f       	add	r30, r30
 95e:	ff 1f       	adc	r31, r31
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	8c 0f       	add	r24, r28
 966:	9d 1f       	adc	r25, r29
 968:	e8 0f       	add	r30, r24
 96a:	f9 1f       	adc	r31, r25
 96c:	40 81       	ld	r20, Z
 96e:	51 81       	ldd	r21, Z+1	; 0x01
 970:	81 2f       	mov	r24, r17
 972:	64 e0       	ldi	r22, 0x04	; 4
 974:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	DIO_vwrite(port , 5 , bit_as_string[READ_BIT(val,1)]);
 978:	f7 01       	movw	r30, r14
 97a:	e2 70       	andi	r30, 0x02	; 2
 97c:	f0 70       	andi	r31, 0x00	; 0
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	8c 0f       	add	r24, r28
 984:	9d 1f       	adc	r25, r29
 986:	e8 0f       	add	r30, r24
 988:	f9 1f       	adc	r31, r25
 98a:	40 81       	ld	r20, Z
 98c:	51 81       	ldd	r21, Z+1	; 0x01
 98e:	81 2f       	mov	r24, r17
 990:	65 e0       	ldi	r22, 0x05	; 5
 992:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	DIO_vwrite(port , 6 , bit_as_string[READ_BIT(val,2)]);
 996:	f7 01       	movw	r30, r14
 998:	e4 70       	andi	r30, 0x04	; 4
 99a:	f0 70       	andi	r31, 0x00	; 0
 99c:	f5 95       	asr	r31
 99e:	e7 95       	ror	r30
 9a0:	f5 95       	asr	r31
 9a2:	e7 95       	ror	r30
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	8c 0f       	add	r24, r28
 9ae:	9d 1f       	adc	r25, r29
 9b0:	e8 0f       	add	r30, r24
 9b2:	f9 1f       	adc	r31, r25
 9b4:	40 81       	ld	r20, Z
 9b6:	51 81       	ldd	r21, Z+1	; 0x01
 9b8:	81 2f       	mov	r24, r17
 9ba:	66 e0       	ldi	r22, 0x06	; 6
 9bc:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	DIO_vwrite(port , 7 , bit_as_string[READ_BIT(val,3)]);
 9c0:	98 e0       	ldi	r25, 0x08	; 8
 9c2:	e9 22       	and	r14, r25
 9c4:	ff 24       	eor	r15, r15
 9c6:	f7 01       	movw	r30, r14
 9c8:	f5 95       	asr	r31
 9ca:	e7 95       	ror	r30
 9cc:	f5 95       	asr	r31
 9ce:	e7 95       	ror	r30
 9d0:	f5 95       	asr	r31
 9d2:	e7 95       	ror	r30
 9d4:	ee 0f       	add	r30, r30
 9d6:	ff 1f       	adc	r31, r31
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	8c 0f       	add	r24, r28
 9de:	9d 1f       	adc	r25, r29
 9e0:	e8 0f       	add	r30, r24
 9e2:	f9 1f       	adc	r31, r25
 9e4:	40 81       	ld	r20, Z
 9e6:	51 81       	ldd	r21, Z+1	; 0x01
 9e8:	81 2f       	mov	r24, r17
 9ea:	67 e0       	ldi	r22, 0x07	; 7
 9ec:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
}
 9f0:	0f 90       	pop	r0
 9f2:	0f 90       	pop	r0
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	ff 90       	pop	r15
 a00:	ef 90       	pop	r14
 a02:	08 95       	ret

00000a04 <Dio_Write_lowNibble>:

void Dio_Write_lowNibble(unsigned char port , unsigned char val )
{
	val &=0x0f;
 a04:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
 a06:	84 34       	cpi	r24, 0x44	; 68
 a08:	51 f1       	breq	.+84     	; 0xa5e <Dio_Write_lowNibble+0x5a>
 a0a:	85 34       	cpi	r24, 0x45	; 69
 a0c:	38 f4       	brcc	.+14     	; 0xa1c <Dio_Write_lowNibble+0x18>
 a0e:	82 34       	cpi	r24, 0x42	; 66
 a10:	c1 f0       	breq	.+48     	; 0xa42 <Dio_Write_lowNibble+0x3e>
 a12:	83 34       	cpi	r24, 0x43	; 67
 a14:	e8 f4       	brcc	.+58     	; 0xa50 <Dio_Write_lowNibble+0x4c>
 a16:	81 34       	cpi	r24, 0x41	; 65
 a18:	41 f5       	brne	.+80     	; 0xa6a <Dio_Write_lowNibble+0x66>
 a1a:	0c c0       	rjmp	.+24     	; 0xa34 <Dio_Write_lowNibble+0x30>
 a1c:	82 36       	cpi	r24, 0x62	; 98
 a1e:	89 f0       	breq	.+34     	; 0xa42 <Dio_Write_lowNibble+0x3e>
 a20:	83 36       	cpi	r24, 0x63	; 99
 a22:	18 f4       	brcc	.+6      	; 0xa2a <Dio_Write_lowNibble+0x26>
 a24:	81 36       	cpi	r24, 0x61	; 97
 a26:	09 f5       	brne	.+66     	; 0xa6a <Dio_Write_lowNibble+0x66>
 a28:	05 c0       	rjmp	.+10     	; 0xa34 <Dio_Write_lowNibble+0x30>
 a2a:	83 36       	cpi	r24, 0x63	; 99
 a2c:	89 f0       	breq	.+34     	; 0xa50 <Dio_Write_lowNibble+0x4c>
 a2e:	84 36       	cpi	r24, 0x64	; 100
 a30:	e1 f4       	brne	.+56     	; 0xa6a <Dio_Write_lowNibble+0x66>
 a32:	15 c0       	rjmp	.+42     	; 0xa5e <Dio_Write_lowNibble+0x5a>
	{
		case'A':
		case'a':
			PORTA_&=0xf0;
 a34:	8b b3       	in	r24, 0x1b	; 27
 a36:	80 7f       	andi	r24, 0xF0	; 240
 a38:	8b bb       	out	0x1b, r24	; 27
			PORTA_|=val;
 a3a:	8b b3       	in	r24, 0x1b	; 27
 a3c:	68 2b       	or	r22, r24
 a3e:	6b bb       	out	0x1b, r22	; 27
			break;
 a40:	08 95       	ret
		case'b':
		case'B':
			PORTB_&=0xf0;
 a42:	88 b3       	in	r24, 0x18	; 24
 a44:	80 7f       	andi	r24, 0xF0	; 240
 a46:	88 bb       	out	0x18, r24	; 24
			PORTB_|=val;
 a48:	88 b3       	in	r24, 0x18	; 24
 a4a:	68 2b       	or	r22, r24
 a4c:	68 bb       	out	0x18, r22	; 24
			break;
 a4e:	08 95       	ret
		case'C':
		case'c':
			PORTC_&=0xf0;
 a50:	85 b3       	in	r24, 0x15	; 21
 a52:	80 7f       	andi	r24, 0xF0	; 240
 a54:	85 bb       	out	0x15, r24	; 21
			PORTC_|=val;
 a56:	85 b3       	in	r24, 0x15	; 21
 a58:	68 2b       	or	r22, r24
 a5a:	65 bb       	out	0x15, r22	; 21
			break;
 a5c:	08 95       	ret
		case'D':
		case'd':
			PORTD_&=0xf0;
 a5e:	82 b3       	in	r24, 0x12	; 18
 a60:	80 7f       	andi	r24, 0xF0	; 240
 a62:	82 bb       	out	0x12, r24	; 18
			PORTD_|=val;
 a64:	82 b3       	in	r24, 0x12	; 18
 a66:	68 2b       	or	r22, r24
 a68:	62 bb       	out	0x12, r22	; 18
 a6a:	08 95       	ret

00000a6c <Dio_Write_highNibble>:



void Dio_Write_highNibble(unsigned char port , unsigned char val )
{
	val<<=4;
 a6c:	62 95       	swap	r22
 a6e:	60 7f       	andi	r22, 0xF0	; 240
	switch(port) 
 a70:	84 34       	cpi	r24, 0x44	; 68
 a72:	51 f1       	breq	.+84     	; 0xac8 <Dio_Write_highNibble+0x5c>
 a74:	85 34       	cpi	r24, 0x45	; 69
 a76:	38 f4       	brcc	.+14     	; 0xa86 <Dio_Write_highNibble+0x1a>
 a78:	82 34       	cpi	r24, 0x42	; 66
 a7a:	c1 f0       	breq	.+48     	; 0xaac <Dio_Write_highNibble+0x40>
 a7c:	83 34       	cpi	r24, 0x43	; 67
 a7e:	e8 f4       	brcc	.+58     	; 0xaba <Dio_Write_highNibble+0x4e>
 a80:	81 34       	cpi	r24, 0x41	; 65
 a82:	41 f5       	brne	.+80     	; 0xad4 <Dio_Write_highNibble+0x68>
 a84:	0c c0       	rjmp	.+24     	; 0xa9e <Dio_Write_highNibble+0x32>
 a86:	82 36       	cpi	r24, 0x62	; 98
 a88:	89 f0       	breq	.+34     	; 0xaac <Dio_Write_highNibble+0x40>
 a8a:	83 36       	cpi	r24, 0x63	; 99
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <Dio_Write_highNibble+0x28>
 a8e:	81 36       	cpi	r24, 0x61	; 97
 a90:	09 f5       	brne	.+66     	; 0xad4 <Dio_Write_highNibble+0x68>
 a92:	05 c0       	rjmp	.+10     	; 0xa9e <Dio_Write_highNibble+0x32>
 a94:	83 36       	cpi	r24, 0x63	; 99
 a96:	89 f0       	breq	.+34     	; 0xaba <Dio_Write_highNibble+0x4e>
 a98:	84 36       	cpi	r24, 0x64	; 100
 a9a:	e1 f4       	brne	.+56     	; 0xad4 <Dio_Write_highNibble+0x68>
 a9c:	15 c0       	rjmp	.+42     	; 0xac8 <Dio_Write_highNibble+0x5c>
	{
		case'A':
		case'a':
			PORTA_&=0xf0;
 a9e:	8b b3       	in	r24, 0x1b	; 27
 aa0:	80 7f       	andi	r24, 0xF0	; 240
 aa2:	8b bb       	out	0x1b, r24	; 27
			PORTA_|=val;
 aa4:	8b b3       	in	r24, 0x1b	; 27
 aa6:	68 2b       	or	r22, r24
 aa8:	6b bb       	out	0x1b, r22	; 27
			break;
 aaa:	08 95       	ret
		case'b':
		case'B':
			PORTB_&=0xf0;
 aac:	88 b3       	in	r24, 0x18	; 24
 aae:	80 7f       	andi	r24, 0xF0	; 240
 ab0:	88 bb       	out	0x18, r24	; 24
			PORTB_|=val;
 ab2:	88 b3       	in	r24, 0x18	; 24
 ab4:	68 2b       	or	r22, r24
 ab6:	68 bb       	out	0x18, r22	; 24
			break;
 ab8:	08 95       	ret
		case'C':
		case'c':
			PORTC_&=0xf0;
 aba:	85 b3       	in	r24, 0x15	; 21
 abc:	80 7f       	andi	r24, 0xF0	; 240
 abe:	85 bb       	out	0x15, r24	; 21
			PORTC_|=val;
 ac0:	85 b3       	in	r24, 0x15	; 21
 ac2:	68 2b       	or	r22, r24
 ac4:	65 bb       	out	0x15, r22	; 21
			break;
 ac6:	08 95       	ret
		case'D':
		case'd':
			PORTD_&=0xf0;
 ac8:	82 b3       	in	r24, 0x12	; 18
 aca:	80 7f       	andi	r24, 0xF0	; 240
 acc:	82 bb       	out	0x12, r24	; 18
			PORTD_|=val;
 ace:	82 b3       	in	r24, 0x12	; 18
 ad0:	68 2b       	or	r22, r24
 ad2:	62 bb       	out	0x12, r22	; 18
 ad4:	08 95       	ret

00000ad6 <Dio_Set_lowNibble>:
		
	}
}

Dio_Set_lowNibble(unsigned char port)
{
 ad6:	1f 93       	push	r17
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
 adc:	18 2f       	mov	r17, r24
	Dio_VSet_pin_Dir(port , 0,"OUTPUT");
 ade:	c0 e6       	ldi	r28, 0x60	; 96
 ae0:	d0 e0       	ldi	r29, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	ae 01       	movw	r20, r28
 ae6:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 1,"OUTPUT");
 aea:	81 2f       	mov	r24, r17
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	ae 01       	movw	r20, r28
 af0:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 2,"OUTPUT");
 af4:	81 2f       	mov	r24, r17
 af6:	62 e0       	ldi	r22, 0x02	; 2
 af8:	ae 01       	movw	r20, r28
 afa:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 3,"OUTPUT");
 afe:	81 2f       	mov	r24, r17
 b00:	63 e0       	ldi	r22, 0x03	; 3
 b02:	ae 01       	movw	r20, r28
 b04:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
}
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	1f 91       	pop	r17
 b0e:	08 95       	ret

00000b10 <Dio_Set_highNibble>:

Dio_Set_highNibble(unsigned char port)
{
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	18 2f       	mov	r17, r24
	Dio_VSet_pin_Dir(port , 4,"OUTPUT");
 b18:	c0 e6       	ldi	r28, 0x60	; 96
 b1a:	d0 e0       	ldi	r29, 0x00	; 0
 b1c:	64 e0       	ldi	r22, 0x04	; 4
 b1e:	ae 01       	movw	r20, r28
 b20:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 5,"OUTPUT");
 b24:	81 2f       	mov	r24, r17
 b26:	65 e0       	ldi	r22, 0x05	; 5
 b28:	ae 01       	movw	r20, r28
 b2a:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 6,"OUTPUT");
 b2e:	81 2f       	mov	r24, r17
 b30:	66 e0       	ldi	r22, 0x06	; 6
 b32:	ae 01       	movw	r20, r28
 b34:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 7,"OUTPUT");
 b38:	81 2f       	mov	r24, r17
 b3a:	67 e0       	ldi	r22, 0x07	; 7
 b3c:	ae 01       	movw	r20, r28
 b3e:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	08 95       	ret

00000b4a <enable>:
// Private function prototype
static void enable(void);

void enable(void)
{
    DIO_vwrite(LCD_control_port, En, "HIGH");
 b4a:	82 e4       	ldi	r24, 0x42	; 66
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	40 e9       	ldi	r20, 0x90	; 144
 b50:	50 e0       	ldi	r21, 0x00	; 0
 b52:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b56:	89 ef       	ldi	r24, 0xF9	; 249
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	01 97       	sbiw	r24, 0x01	; 1
 b5c:	f1 f7       	brne	.-4      	; 0xb5a <enable+0x10>
 b5e:	00 c0       	rjmp	.+0      	; 0xb60 <enable+0x16>
 b60:	00 00       	nop
    _delay_ms(1);       // Enable pulse width (typically >450ns)
    DIO_vwrite(LCD_control_port, En, "LOW");
 b62:	82 e4       	ldi	r24, 0x42	; 66
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	45 e9       	ldi	r20, 0x95	; 149
 b68:	50 e0       	ldi	r21, 0x00	; 0
 b6a:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
 b6e:	89 ef       	ldi	r24, 0xF9	; 249
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	01 97       	sbiw	r24, 0x01	; 1
 b74:	f1 f7       	brne	.-4      	; 0xb72 <enable+0x28>
 b76:	00 c0       	rjmp	.+0      	; 0xb78 <enable+0x2e>
 b78:	00 00       	nop
    _delay_ms(1);     // Command/data execution time
}
 b7a:	08 95       	ret

00000b7c <Lcd_Send_cmd>:

void Lcd_Send_cmd(uint8_t cmd)
{
 b7c:	1f 93       	push	r17
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
 b82:	18 2f       	mov	r17, r24
	#if defined Eight_bit_mode
    DIO_VWrite_port(LCD_Data_port, cmd);
    DIO_vwrite(LCD_control_port, RS, "LOW");
    enable();
	#else
	DIO_vwrite(LCD_control_port, RS, "LOW");
 b84:	c5 e9       	ldi	r28, 0x95	; 149
 b86:	d0 e0       	ldi	r29, 0x00	; 0
 b88:	82 e4       	ldi	r24, 0x42	; 66
 b8a:	61 e0       	ldi	r22, 0x01	; 1
 b8c:	ae 01       	movw	r20, r28
 b8e:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,(cmd >> 4)); // Send the most 4 bits
 b92:	61 2f       	mov	r22, r17
 b94:	62 95       	swap	r22
 b96:	6f 70       	andi	r22, 0x0F	; 15
 b98:	83 e6       	ldi	r24, 0x63	; 99
 b9a:	0e 94 02 05 	call	0xa04	; 0xa04 <Dio_Write_lowNibble>
	enable();
 b9e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <enable>
	DIO_vwrite(LCD_control_port, RS, "LOW");
 ba2:	82 e4       	ldi	r24, 0x42	; 66
 ba4:	61 e0       	ldi	r22, 0x01	; 1
 ba6:	ae 01       	movw	r20, r28
 ba8:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,cmd); // send the least 4 bits
 bac:	83 e6       	ldi	r24, 0x63	; 99
 bae:	61 2f       	mov	r22, r17
 bb0:	0e 94 02 05 	call	0xa04	; 0xa04 <Dio_Write_lowNibble>
	enable();
 bb4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <enable>
	#endif
	
    // Most commands need 1-2ms except clear and home
    if(cmd == LCD_CLEAR_DISPLAY || cmd == LCD_RETURN_HOME) {
 bb8:	11 50       	subi	r17, 0x01	; 1
 bba:	12 30       	cpi	r17, 0x02	; 2
 bbc:	38 f4       	brcc	.+14     	; 0xbcc <Lcd_Send_cmd+0x50>
 bbe:	83 ef       	ldi	r24, 0xF3	; 243
 bc0:	91 e0       	ldi	r25, 0x01	; 1
 bc2:	01 97       	sbiw	r24, 0x01	; 1
 bc4:	f1 f7       	brne	.-4      	; 0xbc2 <Lcd_Send_cmd+0x46>
 bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <Lcd_Send_cmd+0x4c>
 bc8:	00 00       	nop
 bca:	04 c0       	rjmp	.+8      	; 0xbd4 <Lcd_Send_cmd+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bcc:	91 e2       	ldi	r25, 0x21	; 33
 bce:	9a 95       	dec	r25
 bd0:	f1 f7       	brne	.-4      	; 0xbce <Lcd_Send_cmd+0x52>
 bd2:	00 00       	nop
        _delay_ms(2);
    } else {
        _delay_us(100);
    }
}
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
 bd8:	1f 91       	pop	r17
 bda:	08 95       	ret

00000bdc <Lcd_Send_char>:

void Lcd_Send_char(uint8_t data)
{	
 bdc:	1f 93       	push	r17
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	18 2f       	mov	r17, r24
    DIO_VWrite_port(LCD_Data_port, data);
    DIO_vwrite(LCD_control_port, RS, "HIGH");
    enable();
    _delay_us(100);     // Character write time
	#else
	DIO_vwrite(LCD_control_port, RS, "HIGH");
 be4:	c0 e9       	ldi	r28, 0x90	; 144
 be6:	d0 e0       	ldi	r29, 0x00	; 0
 be8:	82 e4       	ldi	r24, 0x42	; 66
 bea:	61 e0       	ldi	r22, 0x01	; 1
 bec:	ae 01       	movw	r20, r28
 bee:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,(data >> 4)); // Send the most 4 bits
 bf2:	61 2f       	mov	r22, r17
 bf4:	62 95       	swap	r22
 bf6:	6f 70       	andi	r22, 0x0F	; 15
 bf8:	83 e6       	ldi	r24, 0x63	; 99
 bfa:	0e 94 02 05 	call	0xa04	; 0xa04 <Dio_Write_lowNibble>
	enable();
 bfe:	0e 94 a5 05 	call	0xb4a	; 0xb4a <enable>
	DIO_vwrite(LCD_control_port, RS, "HIGH");
 c02:	82 e4       	ldi	r24, 0x42	; 66
 c04:	61 e0       	ldi	r22, 0x01	; 1
 c06:	ae 01       	movw	r20, r28
 c08:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,data); // send the least 4 bits
 c0c:	83 e6       	ldi	r24, 0x63	; 99
 c0e:	61 2f       	mov	r22, r17
 c10:	0e 94 02 05 	call	0xa04	; 0xa04 <Dio_Write_lowNibble>
	enable();
 c14:	0e 94 a5 05 	call	0xb4a	; 0xb4a <enable>
	#endif
	
}
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	1f 91       	pop	r17
 c1e:	08 95       	ret

00000c20 <Lcd_Initialize>:

void Lcd_Initialize(void)
{
 c20:	cf 93       	push	r28
 c22:	df 93       	push	r29
    DIO_VSet_port_Direction(LCD_Data_port, "OUTPUT");
    Dio_VSet_pin_Dir(LCD_control_port, RS, "OUTPUT");
    Dio_VSet_pin_Dir(LCD_control_port, En, "OUTPUT");
	
	#else
	Dio_Set_lowNibble(LCD_Data_port);
 c24:	83 e6       	ldi	r24, 0x63	; 99
 c26:	0e 94 6b 05 	call	0xad6	; 0xad6 <Dio_Set_lowNibble>
	Dio_VSet_pin_Dir(LCD_control_port, RS, "OUTPUT");
 c2a:	c9 e9       	ldi	r28, 0x99	; 153
 c2c:	d0 e0       	ldi	r29, 0x00	; 0
 c2e:	82 e4       	ldi	r24, 0x42	; 66
 c30:	61 e0       	ldi	r22, 0x01	; 1
 c32:	ae 01       	movw	r20, r28
 c34:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(LCD_control_port, En, "OUTPUT");
 c38:	82 e4       	ldi	r24, 0x42	; 66
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	ae 01       	movw	r20, r28
 c3e:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_VSet_pin_Dir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c42:	8b e4       	ldi	r24, 0x4B	; 75
 c44:	9d e1       	ldi	r25, 0x1D	; 29
 c46:	01 97       	sbiw	r24, 0x01	; 1
 c48:	f1 f7       	brne	.-4      	; 0xc46 <Lcd_Initialize+0x26>
 c4a:	00 c0       	rjmp	.+0      	; 0xc4c <Lcd_Initialize+0x2c>
 c4c:	00 00       	nop
	#endif
    _delay_ms(30);
    
    // Initialization sequence
	Lcd_Send_cmd(LCD_RETURN_HOME); //return home
 c4e:	82 e0       	ldi	r24, 0x02	; 2
 c50:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 c54:	83 ec       	ldi	r24, 0xC3	; 195
 c56:	99 e0       	ldi	r25, 0x09	; 9
 c58:	01 97       	sbiw	r24, 0x01	; 1
 c5a:	f1 f7       	brne	.-4      	; 0xc58 <Lcd_Initialize+0x38>
 c5c:	00 c0       	rjmp	.+0      	; 0xc5e <Lcd_Initialize+0x3e>
 c5e:	00 00       	nop
	_delay_ms(10);
	Lcd_Send_cmd(LCD_FUNCTION_SET); //4bit mode
 c60:	88 e2       	ldi	r24, 0x28	; 40
 c62:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 c66:	89 ef       	ldi	r24, 0xF9	; 249
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	01 97       	sbiw	r24, 0x01	; 1
 c6c:	f1 f7       	brne	.-4      	; 0xc6a <Lcd_Initialize+0x4a>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <Lcd_Initialize+0x50>
 c70:	00 00       	nop
	_delay_ms(1);
	Lcd_Send_cmd(LCD_CURSOR_ON);//display on cursor on
 c72:	8e e0       	ldi	r24, 0x0E	; 14
 c74:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 c78:	89 ef       	ldi	r24, 0xF9	; 249
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	01 97       	sbiw	r24, 0x01	; 1
 c7e:	f1 f7       	brne	.-4      	; 0xc7c <Lcd_Initialize+0x5c>
 c80:	00 c0       	rjmp	.+0      	; 0xc82 <Lcd_Initialize+0x62>
 c82:	00 00       	nop
	_delay_ms(1);
	Lcd_Send_cmd(LCD_CLEAR_DISPLAY);//clear the screen
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 c8a:	83 ec       	ldi	r24, 0xC3	; 195
 c8c:	99 e0       	ldi	r25, 0x09	; 9
 c8e:	01 97       	sbiw	r24, 0x01	; 1
 c90:	f1 f7       	brne	.-4      	; 0xc8e <Lcd_Initialize+0x6e>
 c92:	00 c0       	rjmp	.+0      	; 0xc94 <Lcd_Initialize+0x74>
 c94:	00 00       	nop
	_delay_ms(10);
	Lcd_Send_cmd(LCD_ENTRY_MODE_SET); //entry mode
 c96:	86 e0       	ldi	r24, 0x06	; 6
 c98:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 c9c:	89 ef       	ldi	r24, 0xF9	; 249
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	01 97       	sbiw	r24, 0x01	; 1
 ca2:	f1 f7       	brne	.-4      	; 0xca0 <Lcd_Initialize+0x80>
 ca4:	00 c0       	rjmp	.+0      	; 0xca6 <Lcd_Initialize+0x86>
 ca6:	00 00       	nop
	_delay_ms(1);


}
 ca8:	df 91       	pop	r29
 caa:	cf 91       	pop	r28
 cac:	08 95       	ret

00000cae <Lcd_Clear_Screen>:

void Lcd_Clear_Screen(void)
{
    Lcd_Send_cmd(LCD_CLEAR_DISPLAY);
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 cb4:	83 ef       	ldi	r24, 0xF3	; 243
 cb6:	91 e0       	ldi	r25, 0x01	; 1
 cb8:	01 97       	sbiw	r24, 0x01	; 1
 cba:	f1 f7       	brne	.-4      	; 0xcb8 <Lcd_Clear_Screen+0xa>
 cbc:	00 c0       	rjmp	.+0      	; 0xcbe <Lcd_Clear_Screen+0x10>
 cbe:	00 00       	nop
    _delay_ms(2);       // Clear display needs extra time
}
 cc0:	08 95       	ret

00000cc2 <Lcd_send_string>:

void Lcd_send_string(const uint8_t *data)
{
 cc2:	cf 93       	push	r28
 cc4:	df 93       	push	r29
 cc6:	ec 01       	movw	r28, r24
    while (*data != '\0') {
 cc8:	88 81       	ld	r24, Y
 cca:	88 23       	and	r24, r24
 ccc:	31 f0       	breq	.+12     	; 0xcda <Lcd_send_string+0x18>
{
    Lcd_Send_cmd(LCD_CLEAR_DISPLAY);
    _delay_ms(2);       // Clear display needs extra time
}

void Lcd_send_string(const uint8_t *data)
 cce:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\0') {
        Lcd_Send_char(*data++);
 cd0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Lcd_Send_char>
    _delay_ms(2);       // Clear display needs extra time
}

void Lcd_send_string(const uint8_t *data)
{
    while (*data != '\0') {
 cd4:	89 91       	ld	r24, Y+
 cd6:	88 23       	and	r24, r24
 cd8:	d9 f7       	brne	.-10     	; 0xcd0 <Lcd_send_string+0xe>
        Lcd_Send_char(*data++);
    }
}	
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	08 95       	ret

00000ce0 <Lcd_Set_cursor>:

void Lcd_Set_cursor(unsigned char row , unsigned char column)
{	unsigned char address_line = 0;
	if (row == 1 && column >= 0 && column <= 16)
 ce0:	81 30       	cpi	r24, 0x01	; 1
 ce2:	29 f4       	brne	.+10     	; 0xcee <Lcd_Set_cursor+0xe>
 ce4:	61 31       	cpi	r22, 0x11	; 17
 ce6:	50 f4       	brcc	.+20     	; 0xcfc <Lcd_Set_cursor+0x1c>
	{
		address_line = 0x80 + column -1;
 ce8:	86 2f       	mov	r24, r22
 cea:	81 58       	subi	r24, 0x81	; 129
 cec:	0c c0       	rjmp	.+24     	; 0xd06 <Lcd_Set_cursor+0x26>
	}
	else if(row == 2 && column >= 0 && column <= 16)
 cee:	82 30       	cpi	r24, 0x02	; 2
 cf0:	39 f4       	brne	.+14     	; 0xd00 <Lcd_Set_cursor+0x20>
 cf2:	61 31       	cpi	r22, 0x11	; 17
 cf4:	38 f4       	brcc	.+14     	; 0xd04 <Lcd_Set_cursor+0x24>
	{
		address_line = 0xC0 + column -1 ;
 cf6:	86 2f       	mov	r24, r22
 cf8:	81 54       	subi	r24, 0x41	; 65
 cfa:	05 c0       	rjmp	.+10     	; 0xd06 <Lcd_Set_cursor+0x26>
	}
	else 
	{
		address_line = 0x80;
 cfc:	80 e8       	ldi	r24, 0x80	; 128
 cfe:	03 c0       	rjmp	.+6      	; 0xd06 <Lcd_Set_cursor+0x26>
 d00:	80 e8       	ldi	r24, 0x80	; 128
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <Lcd_Set_cursor+0x26>
 d04:	80 e8       	ldi	r24, 0x80	; 128
	}
	Lcd_Send_cmd(address_line);
 d06:	0e 94 be 05 	call	0xb7c	; 0xb7c <Lcd_Send_cmd>
 d0a:	08 95       	ret

00000d0c <timer_CTC_init_interrupt>:
#include "avr/io.h"
#include "avr/interrupt.h"
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 d0c:	83 b7       	in	r24, 0x33	; 51
 d0e:	88 60       	ori	r24, 0x08	; 8
 d10:	83 bf       	out	0x33, r24	; 51
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 d12:	83 b7       	in	r24, 0x33	; 51
 d14:	81 60       	ori	r24, 0x01	; 1
 d16:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 d18:	83 b7       	in	r24, 0x33	; 51
 d1a:	84 60       	ori	r24, 0x04	; 4
 d1c:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 d1e:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 d20:	89 b7       	in	r24, 0x39	; 57
 d22:	82 60       	ori	r24, 0x02	; 2
 d24:	89 bf       	out	0x39, r24	; 57
}
 d26:	08 95       	ret

00000d28 <timer0_CTC_Wave_NonPWM_init>:


void timer0_CTC_Wave_NonPWM_init(unsigned char compare_value )
{
	/* select CTC mode*/
	SET_BIT(TCCR0_,WGM01);
 d28:	83 b7       	in	r24, 0x33	; 51
 d2a:	88 60       	ori	r24, 0x08	; 8
 d2c:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,WGM00);
 d2e:	83 b7       	in	r24, 0x33	; 51
 d30:	8f 7b       	andi	r24, 0xBF	; 191
 d32:	83 bf       	out	0x33, r24	; 51
	/* select 1024 prescaler */
	SET_BIT(TCCR0_,CS00);
 d34:	83 b7       	in	r24, 0x33	; 51
 d36:	81 60       	ori	r24, 0x01	; 1
 d38:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_,CS02);
 d3a:	83 b7       	in	r24, 0x33	; 51
 d3c:	84 60       	ori	r24, 0x04	; 4
 d3e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS01);
 d40:	83 b7       	in	r24, 0x33	; 51
 d42:	8d 7f       	andi	r24, 0xFD	; 253
 d44:	83 bf       	out	0x33, r24	; 51
	/* Toggle mode*/
	SET_BIT(TCCR0 , COM00);
 d46:	83 b7       	in	r24, 0x33	; 51
 d48:	80 61       	ori	r24, 0x10	; 16
 d4a:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0 , COM01);
 d4c:	83 b7       	in	r24, 0x33	; 51
 d4e:	8f 7d       	andi	r24, 0xDF	; 223
 d50:	83 bf       	out	0x33, r24	; 51
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 d52:	bb 9a       	sbi	0x17, 3	; 23
}
 d54:	08 95       	ret

00000d56 <Timer0_fastPwm_init>:


void Timer0_fastPwm_init(void)
{
	/* select fast pwm mode */
	SET_BIT(TCCR0_,WGM01);
 d56:	83 b7       	in	r24, 0x33	; 51
 d58:	88 60       	ori	r24, 0x08	; 8
 d5a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_,WGM00);
 d5c:	83 b7       	in	r24, 0x33	; 51
 d5e:	80 64       	ori	r24, 0x40	; 64
 d60:	83 bf       	out	0x33, r24	; 51
	
	/* select 1 prescaler */
	SET_BIT(TCCR0_,CS00);
 d62:	83 b7       	in	r24, 0x33	; 51
 d64:	81 60       	ori	r24, 0x01	; 1
 d66:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS02);
 d68:	83 b7       	in	r24, 0x33	; 51
 d6a:	8b 7f       	andi	r24, 0xFB	; 251
 d6c:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS01);
 d6e:	83 b7       	in	r24, 0x33	; 51
 d70:	8d 7f       	andi	r24, 0xFD	; 253
 d72:	83 bf       	out	0x33, r24	; 51
	
	/* select non_inverting mode */
	SET_BIT(TCCR0,COM01);
 d74:	83 b7       	in	r24, 0x33	; 51
 d76:	80 62       	ori	r24, 0x20	; 32
 d78:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
 d7a:	83 b7       	in	r24, 0x33	; 51
 d7c:	8f 7e       	andi	r24, 0xEF	; 239
 d7e:	83 bf       	out	0x33, r24	; 51
	
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 d80:	bb 9a       	sbi	0x17, 3	; 23
}
 d82:	08 95       	ret

00000d84 <Timer0_wave_generate>:

void Timer0_wave_generate(unsigned char compare_value)
{
	/* load value in ocr0*/
	OCR0_ = compare_value;
 d84:	8c bf       	out	0x3c, r24	; 60
	
}
 d86:	08 95       	ret

00000d88 <Timer0_PhaseCorrect_init>:

void Timer0_PhaseCorrect_init(void)
{
	/* select phase correct pwm mode */
	CLEAR_BIT(TCCR0_,WGM01);
 d88:	83 b7       	in	r24, 0x33	; 51
 d8a:	87 7f       	andi	r24, 0xF7	; 247
 d8c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_,WGM00);
 d8e:	83 b7       	in	r24, 0x33	; 51
 d90:	80 64       	ori	r24, 0x40	; 64
 d92:	83 bf       	out	0x33, r24	; 51
	
	/* select 1 prescaler */
	SET_BIT(TCCR0_,CS00);
 d94:	83 b7       	in	r24, 0x33	; 51
 d96:	81 60       	ori	r24, 0x01	; 1
 d98:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS02);
 d9a:	83 b7       	in	r24, 0x33	; 51
 d9c:	8b 7f       	andi	r24, 0xFB	; 251
 d9e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS01);
 da0:	83 b7       	in	r24, 0x33	; 51
 da2:	8d 7f       	andi	r24, 0xFD	; 253
 da4:	83 bf       	out	0x33, r24	; 51
	
	/* select functionality mode */
	SET_BIT(TCCR0,COM01);
 da6:	83 b7       	in	r24, 0x33	; 51
 da8:	80 62       	ori	r24, 0x20	; 32
 daa:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
 dac:	83 b7       	in	r24, 0x33	; 51
 dae:	8f 7e       	andi	r24, 0xEF	; 239
 db0:	83 bf       	out	0x33, r24	; 51
	
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 db2:	bb 9a       	sbi	0x17, 3	; 23
 db4:	08 95       	ret

00000db6 <main>:
#include "DIO.h"
#include "TIMER.h"
#include "util/delay.h"
int main(void)
{	
			Timer0_fastPwm_init();
 db6:	0e 94 ab 06 	call	0xd56	; 0xd56 <Timer0_fastPwm_init>
			Timer0_wave_generate(255);
 dba:	8f ef       	ldi	r24, 0xFF	; 255
 dbc:	0e 94 c2 06 	call	0xd84	; 0xd84 <Timer0_wave_generate>
 dc0:	ff cf       	rjmp	.-2      	; 0xdc0 <main+0xa>

00000dc2 <strcmp>:
 dc2:	fb 01       	movw	r30, r22
 dc4:	dc 01       	movw	r26, r24
 dc6:	8d 91       	ld	r24, X+
 dc8:	01 90       	ld	r0, Z+
 dca:	80 19       	sub	r24, r0
 dcc:	01 10       	cpse	r0, r1
 dce:	d9 f3       	breq	.-10     	; 0xdc6 <strcmp+0x4>
 dd0:	99 0b       	sbc	r25, r25
 dd2:	08 95       	ret

00000dd4 <_exit>:
 dd4:	f8 94       	cli

00000dd6 <__stop_program>:
 dd6:	ff cf       	rjmp	.-2      	; 0xdd6 <__stop_program>
