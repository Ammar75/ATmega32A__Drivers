
Real time clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000169e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  0000169e  00001732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800146  00800146  00001818  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00002050  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000164b  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078d  00000000  00000000  000037db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf3  00000000  00000000  00003f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  00004b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e4  00000000  00000000  00005522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00006606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 09 	call	0x1276	; 0x1276 <main>
      8a:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_VSet_pin_Dir>:
 */ 
#include "std_macros.h"
#include <string.h>

void Dio_VSet_pin_Dir(unsigned char port, unsigned char reg_numb, const char *dir)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	c8 2f       	mov	r28, r24
      9c:	d6 2f       	mov	r29, r22
      9e:	8a 01       	movw	r16, r20
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
      a0:	ca 01       	movw	r24, r20
      a2:	60 e6       	ldi	r22, 0x60	; 96
      a4:	70 e0       	ldi	r23, 0x00	; 0
      a6:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
      aa:	28 2f       	mov	r18, r24
      ac:	39 2f       	mov	r19, r25
      ae:	21 15       	cp	r18, r1
      b0:	31 05       	cpc	r19, r1
      b2:	59 f0       	breq	.+22     	; 0xca <Dio_VSet_pin_Dir+0x38>
      b4:	c8 01       	movw	r24, r16
      b6:	67 e6       	ldi	r22, 0x67	; 103
      b8:	70 e0       	ldi	r23, 0x00	; 0
      ba:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
      be:	28 2f       	mov	r18, r24
      c0:	39 2f       	mov	r19, r25
      c2:	21 15       	cp	r18, r1
      c4:	31 05       	cpc	r19, r1
      c6:	09 f0       	breq	.+2      	; 0xca <Dio_VSet_pin_Dir+0x38>
      c8:	4b c0       	rjmp	.+150    	; 0x160 <Dio_VSet_pin_Dir+0xce>
	{
		switch (port)
      ca:	c4 34       	cpi	r28, 0x44	; 68
      cc:	09 f4       	brne	.+2      	; 0xd0 <Dio_VSet_pin_Dir+0x3e>
      ce:	3c c0       	rjmp	.+120    	; 0x148 <Dio_VSet_pin_Dir+0xb6>
      d0:	c5 34       	cpi	r28, 0x45	; 69
      d2:	40 f4       	brcc	.+16     	; 0xe4 <Dio_VSet_pin_Dir+0x52>
      d4:	c2 34       	cpi	r28, 0x42	; 66
      d6:	01 f1       	breq	.+64     	; 0x118 <Dio_VSet_pin_Dir+0x86>
      d8:	c3 34       	cpi	r28, 0x43	; 67
      da:	50 f5       	brcc	.+84     	; 0x130 <Dio_VSet_pin_Dir+0x9e>
      dc:	c1 34       	cpi	r28, 0x41	; 65
      de:	09 f0       	breq	.+2      	; 0xe2 <Dio_VSet_pin_Dir+0x50>
      e0:	a0 c0       	rjmp	.+320    	; 0x222 <Dio_VSet_pin_Dir+0x190>
      e2:	0e c0       	rjmp	.+28     	; 0x100 <Dio_VSet_pin_Dir+0x6e>
      e4:	c2 36       	cpi	r28, 0x62	; 98
      e6:	c1 f0       	breq	.+48     	; 0x118 <Dio_VSet_pin_Dir+0x86>
      e8:	c3 36       	cpi	r28, 0x63	; 99
      ea:	20 f4       	brcc	.+8      	; 0xf4 <Dio_VSet_pin_Dir+0x62>
      ec:	c1 36       	cpi	r28, 0x61	; 97
      ee:	09 f0       	breq	.+2      	; 0xf2 <Dio_VSet_pin_Dir+0x60>
      f0:	98 c0       	rjmp	.+304    	; 0x222 <Dio_VSet_pin_Dir+0x190>
      f2:	06 c0       	rjmp	.+12     	; 0x100 <Dio_VSet_pin_Dir+0x6e>
      f4:	c3 36       	cpi	r28, 0x63	; 99
      f6:	e1 f0       	breq	.+56     	; 0x130 <Dio_VSet_pin_Dir+0x9e>
      f8:	c4 36       	cpi	r28, 0x64	; 100
      fa:	09 f0       	breq	.+2      	; 0xfe <Dio_VSet_pin_Dir+0x6c>
      fc:	92 c0       	rjmp	.+292    	; 0x222 <Dio_VSet_pin_Dir+0x190>
      fe:	24 c0       	rjmp	.+72     	; 0x148 <Dio_VSet_pin_Dir+0xb6>
		{
			case 'A':
			case 'a':
				SET_BIT(DDRA_, reg_numb);
     100:	4a b3       	in	r20, 0x1a	; 26
     102:	21 e0       	ldi	r18, 0x01	; 1
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	c9 01       	movw	r24, r18
     108:	02 c0       	rjmp	.+4      	; 0x10e <Dio_VSet_pin_Dir+0x7c>
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	da 95       	dec	r29
     110:	e2 f7       	brpl	.-8      	; 0x10a <Dio_VSet_pin_Dir+0x78>
     112:	84 2b       	or	r24, r20
     114:	8a bb       	out	0x1a, r24	; 26
				break;
     116:	85 c0       	rjmp	.+266    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
				SET_BIT(DDRB_, reg_numb);
     118:	47 b3       	in	r20, 0x17	; 23
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	c9 01       	movw	r24, r18
     120:	02 c0       	rjmp	.+4      	; 0x126 <Dio_VSet_pin_Dir+0x94>
     122:	88 0f       	add	r24, r24
     124:	99 1f       	adc	r25, r25
     126:	da 95       	dec	r29
     128:	e2 f7       	brpl	.-8      	; 0x122 <Dio_VSet_pin_Dir+0x90>
     12a:	84 2b       	or	r24, r20
     12c:	87 bb       	out	0x17, r24	; 23
				break;
     12e:	79 c0       	rjmp	.+242    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
				SET_BIT(DDRC_, reg_numb);
     130:	44 b3       	in	r20, 0x14	; 20
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	c9 01       	movw	r24, r18
     138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_VSet_pin_Dir+0xac>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	da 95       	dec	r29
     140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_VSet_pin_Dir+0xa8>
     142:	84 2b       	or	r24, r20
     144:	84 bb       	out	0x14, r24	; 20
				break;
     146:	6d c0       	rjmp	.+218    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
				SET_BIT(DDRD_, reg_numb);
     148:	41 b3       	in	r20, 0x11	; 17
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	c9 01       	movw	r24, r18
     150:	02 c0       	rjmp	.+4      	; 0x156 <Dio_VSet_pin_Dir+0xc4>
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	da 95       	dec	r29
     158:	e2 f7       	brpl	.-8      	; 0x152 <Dio_VSet_pin_Dir+0xc0>
     15a:	84 2b       	or	r24, r20
     15c:	81 bb       	out	0x11, r24	; 17
				break;
     15e:	61 c0       	rjmp	.+194    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			default:
				break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
     160:	c8 01       	movw	r24, r16
     162:	6e e6       	ldi	r22, 0x6E	; 110
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     16a:	28 2f       	mov	r18, r24
     16c:	39 2f       	mov	r19, r25
     16e:	21 15       	cp	r18, r1
     170:	31 05       	cpc	r19, r1
     172:	59 f0       	breq	.+22     	; 0x18a <Dio_VSet_pin_Dir+0xf8>
     174:	c8 01       	movw	r24, r16
     176:	64 e7       	ldi	r22, 0x74	; 116
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     17e:	28 2f       	mov	r18, r24
     180:	39 2f       	mov	r19, r25
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	09 f0       	breq	.+2      	; 0x18a <Dio_VSet_pin_Dir+0xf8>
     188:	4c c0       	rjmp	.+152    	; 0x222 <Dio_VSet_pin_Dir+0x190>
	{
		switch (port)
     18a:	c4 34       	cpi	r28, 0x44	; 68
     18c:	09 f4       	brne	.+2      	; 0x190 <Dio_VSet_pin_Dir+0xfe>
     18e:	3d c0       	rjmp	.+122    	; 0x20a <Dio_VSet_pin_Dir+0x178>
     190:	c5 34       	cpi	r28, 0x45	; 69
     192:	40 f4       	brcc	.+16     	; 0x1a4 <Dio_VSet_pin_Dir+0x112>
     194:	c2 34       	cpi	r28, 0x42	; 66
     196:	f9 f0       	breq	.+62     	; 0x1d6 <Dio_VSet_pin_Dir+0x144>
     198:	c3 34       	cpi	r28, 0x43	; 67
     19a:	50 f5       	brcc	.+84     	; 0x1f0 <Dio_VSet_pin_Dir+0x15e>
     19c:	c1 34       	cpi	r28, 0x41	; 65
     19e:	09 f0       	breq	.+2      	; 0x1a2 <Dio_VSet_pin_Dir+0x110>
     1a0:	40 c0       	rjmp	.+128    	; 0x222 <Dio_VSet_pin_Dir+0x190>
     1a2:	0c c0       	rjmp	.+24     	; 0x1bc <Dio_VSet_pin_Dir+0x12a>
     1a4:	c2 36       	cpi	r28, 0x62	; 98
     1a6:	b9 f0       	breq	.+46     	; 0x1d6 <Dio_VSet_pin_Dir+0x144>
     1a8:	c3 36       	cpi	r28, 0x63	; 99
     1aa:	18 f4       	brcc	.+6      	; 0x1b2 <Dio_VSet_pin_Dir+0x120>
     1ac:	c1 36       	cpi	r28, 0x61	; 97
     1ae:	c9 f5       	brne	.+114    	; 0x222 <Dio_VSet_pin_Dir+0x190>
     1b0:	05 c0       	rjmp	.+10     	; 0x1bc <Dio_VSet_pin_Dir+0x12a>
     1b2:	c3 36       	cpi	r28, 0x63	; 99
     1b4:	e9 f0       	breq	.+58     	; 0x1f0 <Dio_VSet_pin_Dir+0x15e>
     1b6:	c4 36       	cpi	r28, 0x64	; 100
     1b8:	a1 f5       	brne	.+104    	; 0x222 <Dio_VSet_pin_Dir+0x190>
     1ba:	27 c0       	rjmp	.+78     	; 0x20a <Dio_VSet_pin_Dir+0x178>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(DDRA_, reg_numb);
     1bc:	4a b3       	in	r20, 0x1a	; 26
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	c9 01       	movw	r24, r18
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Dio_VSet_pin_Dir+0x138>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	da 95       	dec	r29
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Dio_VSet_pin_Dir+0x134>
     1ce:	80 95       	com	r24
     1d0:	84 23       	and	r24, r20
     1d2:	8a bb       	out	0x1a, r24	; 26
			break;
     1d4:	26 c0       	rjmp	.+76     	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
			CLEAR_BIT(DDRB_, reg_numb);
     1d6:	47 b3       	in	r20, 0x17	; 23
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	c9 01       	movw	r24, r18
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Dio_VSet_pin_Dir+0x152>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	da 95       	dec	r29
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <Dio_VSet_pin_Dir+0x14e>
     1e8:	80 95       	com	r24
     1ea:	84 23       	and	r24, r20
     1ec:	87 bb       	out	0x17, r24	; 23
			break;
     1ee:	19 c0       	rjmp	.+50     	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
			CLEAR_BIT(DDRC_, reg_numb);
     1f0:	44 b3       	in	r20, 0x14	; 20
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	c9 01       	movw	r24, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_VSet_pin_Dir+0x16c>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	da 95       	dec	r29
     200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_VSet_pin_Dir+0x168>
     202:	80 95       	com	r24
     204:	84 23       	and	r24, r20
     206:	84 bb       	out	0x14, r24	; 20
			break;
     208:	0c c0       	rjmp	.+24     	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(DDRD_, reg_numb);
     20a:	41 b3       	in	r20, 0x11	; 17
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	c9 01       	movw	r24, r18
     212:	02 c0       	rjmp	.+4      	; 0x218 <Dio_VSet_pin_Dir+0x186>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	da 95       	dec	r29
     21a:	e2 f7       	brpl	.-8      	; 0x214 <Dio_VSet_pin_Dir+0x182>
     21c:	80 95       	com	r24
     21e:	84 23       	and	r24, r20
     220:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			break;  // Handle unexpected port values
		}
	}
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	08 95       	ret

0000022c <DIO_vwrite>:

void DIO_vwrite(unsigned char port , unsigned char reg_numb, const char *val)
{
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	c8 2f       	mov	r28, r24
     236:	d6 2f       	mov	r29, r22
     238:	8a 01       	movw	r16, r20
	if (((strcmp(val, "HIGH")) == 0) || ((strcmp(val, "high")) == 0) || ((strcmp(val, "1")) == 0) )
     23a:	ca 01       	movw	r24, r20
     23c:	6a e7       	ldi	r22, 0x7A	; 122
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     244:	28 2f       	mov	r18, r24
     246:	39 2f       	mov	r19, r25
     248:	21 15       	cp	r18, r1
     24a:	31 05       	cpc	r19, r1
     24c:	a9 f0       	breq	.+42     	; 0x278 <DIO_vwrite+0x4c>
     24e:	c8 01       	movw	r24, r16
     250:	6f e7       	ldi	r22, 0x7F	; 127
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     258:	28 2f       	mov	r18, r24
     25a:	39 2f       	mov	r19, r25
     25c:	21 15       	cp	r18, r1
     25e:	31 05       	cpc	r19, r1
     260:	59 f0       	breq	.+22     	; 0x278 <DIO_vwrite+0x4c>
     262:	c8 01       	movw	r24, r16
     264:	64 e8       	ldi	r22, 0x84	; 132
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     26c:	28 2f       	mov	r18, r24
     26e:	39 2f       	mov	r19, r25
     270:	21 15       	cp	r18, r1
     272:	31 05       	cpc	r19, r1
     274:	09 f0       	breq	.+2      	; 0x278 <DIO_vwrite+0x4c>
     276:	4b c0       	rjmp	.+150    	; 0x30e <DIO_vwrite+0xe2>
	{
		switch (port)
     278:	c4 34       	cpi	r28, 0x44	; 68
     27a:	09 f4       	brne	.+2      	; 0x27e <DIO_vwrite+0x52>
     27c:	3c c0       	rjmp	.+120    	; 0x2f6 <DIO_vwrite+0xca>
     27e:	c5 34       	cpi	r28, 0x45	; 69
     280:	40 f4       	brcc	.+16     	; 0x292 <DIO_vwrite+0x66>
     282:	c2 34       	cpi	r28, 0x42	; 66
     284:	01 f1       	breq	.+64     	; 0x2c6 <DIO_vwrite+0x9a>
     286:	c3 34       	cpi	r28, 0x43	; 67
     288:	50 f5       	brcc	.+84     	; 0x2de <DIO_vwrite+0xb2>
     28a:	c1 34       	cpi	r28, 0x41	; 65
     28c:	09 f0       	breq	.+2      	; 0x290 <DIO_vwrite+0x64>
     28e:	aa c0       	rjmp	.+340    	; 0x3e4 <DIO_vwrite+0x1b8>
     290:	0e c0       	rjmp	.+28     	; 0x2ae <DIO_vwrite+0x82>
     292:	c2 36       	cpi	r28, 0x62	; 98
     294:	c1 f0       	breq	.+48     	; 0x2c6 <DIO_vwrite+0x9a>
     296:	c3 36       	cpi	r28, 0x63	; 99
     298:	20 f4       	brcc	.+8      	; 0x2a2 <DIO_vwrite+0x76>
     29a:	c1 36       	cpi	r28, 0x61	; 97
     29c:	09 f0       	breq	.+2      	; 0x2a0 <DIO_vwrite+0x74>
     29e:	a2 c0       	rjmp	.+324    	; 0x3e4 <DIO_vwrite+0x1b8>
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <DIO_vwrite+0x82>
     2a2:	c3 36       	cpi	r28, 0x63	; 99
     2a4:	e1 f0       	breq	.+56     	; 0x2de <DIO_vwrite+0xb2>
     2a6:	c4 36       	cpi	r28, 0x64	; 100
     2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_vwrite+0x80>
     2aa:	9c c0       	rjmp	.+312    	; 0x3e4 <DIO_vwrite+0x1b8>
     2ac:	24 c0       	rjmp	.+72     	; 0x2f6 <DIO_vwrite+0xca>
		{
			case 'A':
			case 'a':
			SET_BIT(PORTA_, reg_numb);
     2ae:	4b b3       	in	r20, 0x1b	; 27
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	c9 01       	movw	r24, r18
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_vwrite+0x90>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	da 95       	dec	r29
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_vwrite+0x8c>
     2c0:	84 2b       	or	r24, r20
     2c2:	8b bb       	out	0x1b, r24	; 27
			break;
     2c4:	8f c0       	rjmp	.+286    	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			SET_BIT(PORTB_, reg_numb);
     2c6:	48 b3       	in	r20, 0x18	; 24
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	c9 01       	movw	r24, r18
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vwrite+0xa8>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	da 95       	dec	r29
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vwrite+0xa4>
     2d8:	84 2b       	or	r24, r20
     2da:	88 bb       	out	0x18, r24	; 24
			break;
     2dc:	83 c0       	rjmp	.+262    	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			SET_BIT(PORTC_, reg_numb);
     2de:	45 b3       	in	r20, 0x15	; 21
     2e0:	21 e0       	ldi	r18, 0x01	; 1
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	c9 01       	movw	r24, r18
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vwrite+0xc0>
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	da 95       	dec	r29
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vwrite+0xbc>
     2f0:	84 2b       	or	r24, r20
     2f2:	85 bb       	out	0x15, r24	; 21
			break;
     2f4:	77 c0       	rjmp	.+238    	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			SET_BIT(PORTD_, reg_numb);
     2f6:	42 b3       	in	r20, 0x12	; 18
     2f8:	21 e0       	ldi	r18, 0x01	; 1
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	c9 01       	movw	r24, r18
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_vwrite+0xd8>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	da 95       	dec	r29
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_vwrite+0xd4>
     308:	84 2b       	or	r24, r20
     30a:	82 bb       	out	0x12, r24	; 18
			break;
     30c:	6b c0       	rjmp	.+214    	; 0x3e4 <DIO_vwrite+0x1b8>
			default:
			break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(val, "LOW")) == 0) || ((strcmp(val, "low")) == 0) || ((strcmp(val, "0")) == 0))
     30e:	c8 01       	movw	r24, r16
     310:	66 e8       	ldi	r22, 0x86	; 134
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     318:	28 2f       	mov	r18, r24
     31a:	39 2f       	mov	r19, r25
     31c:	21 15       	cp	r18, r1
     31e:	31 05       	cpc	r19, r1
     320:	a9 f0       	breq	.+42     	; 0x34c <DIO_vwrite+0x120>
     322:	c8 01       	movw	r24, r16
     324:	6a e8       	ldi	r22, 0x8A	; 138
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     32c:	28 2f       	mov	r18, r24
     32e:	39 2f       	mov	r19, r25
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	59 f0       	breq	.+22     	; 0x34c <DIO_vwrite+0x120>
     336:	c8 01       	movw	r24, r16
     338:	6e e8       	ldi	r22, 0x8E	; 142
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     340:	28 2f       	mov	r18, r24
     342:	39 2f       	mov	r19, r25
     344:	21 15       	cp	r18, r1
     346:	31 05       	cpc	r19, r1
     348:	09 f0       	breq	.+2      	; 0x34c <DIO_vwrite+0x120>
     34a:	4c c0       	rjmp	.+152    	; 0x3e4 <DIO_vwrite+0x1b8>
	{
		switch (port)
     34c:	c4 34       	cpi	r28, 0x44	; 68
     34e:	09 f4       	brne	.+2      	; 0x352 <DIO_vwrite+0x126>
     350:	3d c0       	rjmp	.+122    	; 0x3cc <DIO_vwrite+0x1a0>
     352:	c5 34       	cpi	r28, 0x45	; 69
     354:	40 f4       	brcc	.+16     	; 0x366 <DIO_vwrite+0x13a>
     356:	c2 34       	cpi	r28, 0x42	; 66
     358:	f9 f0       	breq	.+62     	; 0x398 <DIO_vwrite+0x16c>
     35a:	c3 34       	cpi	r28, 0x43	; 67
     35c:	50 f5       	brcc	.+84     	; 0x3b2 <DIO_vwrite+0x186>
     35e:	c1 34       	cpi	r28, 0x41	; 65
     360:	09 f0       	breq	.+2      	; 0x364 <DIO_vwrite+0x138>
     362:	40 c0       	rjmp	.+128    	; 0x3e4 <DIO_vwrite+0x1b8>
     364:	0c c0       	rjmp	.+24     	; 0x37e <DIO_vwrite+0x152>
     366:	c2 36       	cpi	r28, 0x62	; 98
     368:	b9 f0       	breq	.+46     	; 0x398 <DIO_vwrite+0x16c>
     36a:	c3 36       	cpi	r28, 0x63	; 99
     36c:	18 f4       	brcc	.+6      	; 0x374 <DIO_vwrite+0x148>
     36e:	c1 36       	cpi	r28, 0x61	; 97
     370:	c9 f5       	brne	.+114    	; 0x3e4 <DIO_vwrite+0x1b8>
     372:	05 c0       	rjmp	.+10     	; 0x37e <DIO_vwrite+0x152>
     374:	c3 36       	cpi	r28, 0x63	; 99
     376:	e9 f0       	breq	.+58     	; 0x3b2 <DIO_vwrite+0x186>
     378:	c4 36       	cpi	r28, 0x64	; 100
     37a:	a1 f5       	brne	.+104    	; 0x3e4 <DIO_vwrite+0x1b8>
     37c:	27 c0       	rjmp	.+78     	; 0x3cc <DIO_vwrite+0x1a0>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(PORTA_, reg_numb);
     37e:	4b b3       	in	r20, 0x1b	; 27
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	c9 01       	movw	r24, r18
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_vwrite+0x160>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	da 95       	dec	r29
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_vwrite+0x15c>
     390:	80 95       	com	r24
     392:	84 23       	and	r24, r20
     394:	8b bb       	out	0x1b, r24	; 27
			break;
     396:	26 c0       	rjmp	.+76     	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			CLEAR_BIT(PORTB_, reg_numb);
     398:	48 b3       	in	r20, 0x18	; 24
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	c9 01       	movw	r24, r18
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_vwrite+0x17a>
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	da 95       	dec	r29
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_vwrite+0x176>
     3aa:	80 95       	com	r24
     3ac:	84 23       	and	r24, r20
     3ae:	88 bb       	out	0x18, r24	; 24
			break;
     3b0:	19 c0       	rjmp	.+50     	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			CLEAR_BIT(PORTC_, reg_numb);
     3b2:	45 b3       	in	r20, 0x15	; 21
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	c9 01       	movw	r24, r18
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_vwrite+0x194>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	da 95       	dec	r29
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_vwrite+0x190>
     3c4:	80 95       	com	r24
     3c6:	84 23       	and	r24, r20
     3c8:	85 bb       	out	0x15, r24	; 21
			break;
     3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(PORTD_, reg_numb);
     3cc:	42 b3       	in	r20, 0x12	; 18
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	c9 01       	movw	r24, r18
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_vwrite+0x1ae>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	da 95       	dec	r29
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_vwrite+0x1aa>
     3de:	80 95       	com	r24
     3e0:	84 23       	and	r24, r20
     3e2:	82 bb       	out	0x12, r24	; 18
			default:
			break;  // Handle unexpected port values
		}
	}
	
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	08 95       	ret

000003ee <DIO_vToggle>:

void DIO_vToggle(unsigned char port , unsigned char reg_numb)
{
	switch (port)
     3ee:	84 34       	cpi	r24, 0x44	; 68
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_vToggle+0x6>
     3f2:	3d c0       	rjmp	.+122    	; 0x46e <DIO_vToggle+0x80>
     3f4:	85 34       	cpi	r24, 0x45	; 69
     3f6:	40 f4       	brcc	.+16     	; 0x408 <DIO_vToggle+0x1a>
     3f8:	82 34       	cpi	r24, 0x42	; 66
     3fa:	f9 f0       	breq	.+62     	; 0x43a <DIO_vToggle+0x4c>
     3fc:	83 34       	cpi	r24, 0x43	; 67
     3fe:	50 f5       	brcc	.+84     	; 0x454 <DIO_vToggle+0x66>
     400:	81 34       	cpi	r24, 0x41	; 65
     402:	09 f0       	breq	.+2      	; 0x406 <DIO_vToggle+0x18>
     404:	40 c0       	rjmp	.+128    	; 0x486 <DIO_vToggle+0x98>
     406:	0c c0       	rjmp	.+24     	; 0x420 <DIO_vToggle+0x32>
     408:	82 36       	cpi	r24, 0x62	; 98
     40a:	b9 f0       	breq	.+46     	; 0x43a <DIO_vToggle+0x4c>
     40c:	83 36       	cpi	r24, 0x63	; 99
     40e:	18 f4       	brcc	.+6      	; 0x416 <DIO_vToggle+0x28>
     410:	81 36       	cpi	r24, 0x61	; 97
     412:	c9 f5       	brne	.+114    	; 0x486 <DIO_vToggle+0x98>
     414:	05 c0       	rjmp	.+10     	; 0x420 <DIO_vToggle+0x32>
     416:	83 36       	cpi	r24, 0x63	; 99
     418:	e9 f0       	breq	.+58     	; 0x454 <DIO_vToggle+0x66>
     41a:	84 36       	cpi	r24, 0x64	; 100
     41c:	a1 f5       	brne	.+104    	; 0x486 <DIO_vToggle+0x98>
     41e:	27 c0       	rjmp	.+78     	; 0x46e <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA_, reg_numb);
     420:	2b b3       	in	r18, 0x1b	; 27
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	ac 01       	movw	r20, r24
     428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_vToggle+0x40>
     42a:	44 0f       	add	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_vToggle+0x3c>
     432:	ba 01       	movw	r22, r20
     434:	62 27       	eor	r22, r18
     436:	6b bb       	out	0x1b, r22	; 27
		break;
     438:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB_, reg_numb);
     43a:	28 b3       	in	r18, 0x18	; 24
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	ac 01       	movw	r20, r24
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_vToggle+0x5a>
     444:	44 0f       	add	r20, r20
     446:	55 1f       	adc	r21, r21
     448:	6a 95       	dec	r22
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_vToggle+0x56>
     44c:	ba 01       	movw	r22, r20
     44e:	62 27       	eor	r22, r18
     450:	68 bb       	out	0x18, r22	; 24
		break;
     452:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC_, reg_numb);
     454:	25 b3       	in	r18, 0x15	; 21
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	ac 01       	movw	r20, r24
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_vToggle+0x74>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_vToggle+0x70>
     466:	ba 01       	movw	r22, r20
     468:	62 27       	eor	r22, r18
     46a:	65 bb       	out	0x15, r22	; 21
		break;
     46c:	08 95       	ret
		case 'D':   // Fixed inconsistency
		case 'd':
		TOG_BIT(PORTD_, reg_numb);
     46e:	22 b3       	in	r18, 0x12	; 18
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	ac 01       	movw	r20, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_vToggle+0x8e>
     478:	44 0f       	add	r20, r20
     47a:	55 1f       	adc	r21, r21
     47c:	6a 95       	dec	r22
     47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_vToggle+0x8a>
     480:	ba 01       	movw	r22, r20
     482:	62 27       	eor	r22, r18
     484:	62 bb       	out	0x12, r22	; 18
     486:	08 95       	ret

00000488 <DIO_u8Read_pin>:
}

unsigned char DIO_u8Read_pin(unsigned char port , unsigned char reg_numb)
{
	
	switch (port)
     488:	84 34       	cpi	r24, 0x44	; 68
     48a:	09 f4       	brne	.+2      	; 0x48e <DIO_u8Read_pin+0x6>
     48c:	4e c0       	rjmp	.+156    	; 0x52a <DIO_u8Read_pin+0xa2>
     48e:	85 34       	cpi	r24, 0x45	; 69
     490:	40 f4       	brcc	.+16     	; 0x4a2 <DIO_u8Read_pin+0x1a>
     492:	82 34       	cpi	r24, 0x42	; 66
     494:	31 f1       	breq	.+76     	; 0x4e2 <DIO_u8Read_pin+0x5a>
     496:	83 34       	cpi	r24, 0x43	; 67
     498:	b0 f5       	brcc	.+108    	; 0x506 <DIO_u8Read_pin+0x7e>
     49a:	81 34       	cpi	r24, 0x41	; 65
     49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_u8Read_pin+0x18>
     49e:	57 c0       	rjmp	.+174    	; 0x54e <DIO_u8Read_pin+0xc6>
     4a0:	0e c0       	rjmp	.+28     	; 0x4be <DIO_u8Read_pin+0x36>
     4a2:	82 36       	cpi	r24, 0x62	; 98
     4a4:	f1 f0       	breq	.+60     	; 0x4e2 <DIO_u8Read_pin+0x5a>
     4a6:	83 36       	cpi	r24, 0x63	; 99
     4a8:	20 f4       	brcc	.+8      	; 0x4b2 <DIO_u8Read_pin+0x2a>
     4aa:	81 36       	cpi	r24, 0x61	; 97
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <DIO_u8Read_pin+0x28>
     4ae:	4f c0       	rjmp	.+158    	; 0x54e <DIO_u8Read_pin+0xc6>
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <DIO_u8Read_pin+0x36>
     4b2:	83 36       	cpi	r24, 0x63	; 99
     4b4:	41 f1       	breq	.+80     	; 0x506 <DIO_u8Read_pin+0x7e>
     4b6:	84 36       	cpi	r24, 0x64	; 100
     4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_u8Read_pin+0x34>
     4ba:	49 c0       	rjmp	.+146    	; 0x54e <DIO_u8Read_pin+0xc6>
     4bc:	36 c0       	rjmp	.+108    	; 0x52a <DIO_u8Read_pin+0xa2>
	{
		case 'A':
		case 'a':
		return READ_BIT(PINA_, reg_numb);
     4be:	29 b3       	in	r18, 0x19	; 25
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	06 2e       	mov	r0, r22
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_u8Read_pin+0x44>
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	0a 94       	dec	r0
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_u8Read_pin+0x40>
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	82 23       	and	r24, r18
     4d4:	93 23       	and	r25, r19
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8Read_pin+0x54>
     4d8:	95 95       	asr	r25
     4da:	87 95       	ror	r24
     4dc:	6a 95       	dec	r22
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8Read_pin+0x50>
     4e0:	08 95       	ret
		break;
		case 'B':
		case 'b':
		return READ_BIT(PINB_, reg_numb);
     4e2:	26 b3       	in	r18, 0x16	; 22
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	06 2e       	mov	r0, r22
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_u8Read_pin+0x68>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_u8Read_pin+0x64>
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	82 23       	and	r24, r18
     4f8:	93 23       	and	r25, r19
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_u8Read_pin+0x78>
     4fc:	95 95       	asr	r25
     4fe:	87 95       	ror	r24
     500:	6a 95       	dec	r22
     502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_u8Read_pin+0x74>
     504:	08 95       	ret
		break;
		case 'C':
		case 'c':
		return READ_BIT(PINC_, reg_numb);
     506:	23 b3       	in	r18, 0x13	; 19
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	06 2e       	mov	r0, r22
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8Read_pin+0x8c>
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8Read_pin+0x88>
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	82 23       	and	r24, r18
     51c:	93 23       	and	r25, r19
     51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_u8Read_pin+0x9c>
     520:	95 95       	asr	r25
     522:	87 95       	ror	r24
     524:	6a 95       	dec	r22
     526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_u8Read_pin+0x98>
     528:	08 95       	ret
		break;
		case 'D':   // Fixed inconsistency
		case 'd':
		return READ_BIT(PIND_, reg_numb);
     52a:	20 b3       	in	r18, 0x10	; 16
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	06 2e       	mov	r0, r22
     532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8Read_pin+0xb0>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8Read_pin+0xac>
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	82 23       	and	r24, r18
     540:	93 23       	and	r25, r19
     542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_u8Read_pin+0xc0>
     544:	95 95       	asr	r25
     546:	87 95       	ror	r24
     548:	6a 95       	dec	r22
     54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_u8Read_pin+0xbc>
     54c:	08 95       	ret
		break;
		default:
		break;  // Handle unexpected port values
	}
}
     54e:	08 95       	ret

00000550 <DIO_VSet_port_Direction>:


void DIO_VSet_port_Direction(unsigned char port , unsigned char *dir)
{
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	c8 2f       	mov	r28, r24
     558:	8b 01       	movw	r16, r22
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
     55a:	cb 01       	movw	r24, r22
     55c:	60 e6       	ldi	r22, 0x60	; 96
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     564:	28 2f       	mov	r18, r24
     566:	39 2f       	mov	r19, r25
     568:	21 15       	cp	r18, r1
     56a:	31 05       	cpc	r19, r1
     56c:	51 f0       	breq	.+20     	; 0x582 <DIO_VSet_port_Direction+0x32>
     56e:	c8 01       	movw	r24, r16
     570:	67 e6       	ldi	r22, 0x67	; 103
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     578:	28 2f       	mov	r18, r24
     57a:	39 2f       	mov	r19, r25
     57c:	21 15       	cp	r18, r1
     57e:	31 05       	cpc	r19, r1
     580:	31 f5       	brne	.+76     	; 0x5ce <DIO_VSet_port_Direction+0x7e>
		{
			switch(port)
     582:	c4 34       	cpi	r28, 0x44	; 68
     584:	09 f1       	breq	.+66     	; 0x5c8 <DIO_VSet_port_Direction+0x78>
     586:	c5 34       	cpi	r28, 0x45	; 69
     588:	40 f4       	brcc	.+16     	; 0x59a <DIO_VSet_port_Direction+0x4a>
     58a:	c2 34       	cpi	r28, 0x42	; 66
     58c:	b9 f0       	breq	.+46     	; 0x5bc <DIO_VSet_port_Direction+0x6c>
     58e:	c3 34       	cpi	r28, 0x43	; 67
     590:	c0 f4       	brcc	.+48     	; 0x5c2 <DIO_VSet_port_Direction+0x72>
     592:	c1 34       	cpi	r28, 0x41	; 65
     594:	09 f0       	breq	.+2      	; 0x598 <DIO_VSet_port_Direction+0x48>
     596:	4d c0       	rjmp	.+154    	; 0x632 <DIO_VSet_port_Direction+0xe2>
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <DIO_VSet_port_Direction+0x66>
     59a:	c2 36       	cpi	r28, 0x62	; 98
     59c:	79 f0       	breq	.+30     	; 0x5bc <DIO_VSet_port_Direction+0x6c>
     59e:	c3 36       	cpi	r28, 0x63	; 99
     5a0:	20 f4       	brcc	.+8      	; 0x5aa <DIO_VSet_port_Direction+0x5a>
     5a2:	c1 36       	cpi	r28, 0x61	; 97
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <DIO_VSet_port_Direction+0x58>
     5a6:	45 c0       	rjmp	.+138    	; 0x632 <DIO_VSet_port_Direction+0xe2>
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <DIO_VSet_port_Direction+0x66>
     5aa:	c3 36       	cpi	r28, 0x63	; 99
     5ac:	51 f0       	breq	.+20     	; 0x5c2 <DIO_VSet_port_Direction+0x72>
     5ae:	c4 36       	cpi	r28, 0x64	; 100
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <DIO_VSet_port_Direction+0x64>
     5b2:	3f c0       	rjmp	.+126    	; 0x632 <DIO_VSet_port_Direction+0xe2>
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <DIO_VSet_port_Direction+0x78>
			{
				case'a':
				case'A':
				DDRA_ = 0xff;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	8a bb       	out	0x1a, r24	; 26
				break;
     5ba:	3b c0       	rjmp	.+118    	; 0x632 <DIO_VSet_port_Direction+0xe2>
				case 'b':
				case 'B':
				DDRB_ = 0xff;
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	87 bb       	out	0x17, r24	; 23
				break;
     5c0:	38 c0       	rjmp	.+112    	; 0x632 <DIO_VSet_port_Direction+0xe2>
				case 'C':
				case 'c':
				DDRC_ = 0xff;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	84 bb       	out	0x14, r24	; 20
				break;
     5c6:	35 c0       	rjmp	.+106    	; 0x632 <DIO_VSet_port_Direction+0xe2>
				case 'd':
				case 'D':
				DDRD_ = 0xff;
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	81 bb       	out	0x11, r24	; 17
				break;
     5cc:	32 c0       	rjmp	.+100    	; 0x632 <DIO_VSet_port_Direction+0xe2>
			}
		}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
     5ce:	c8 01       	movw	r24, r16
     5d0:	6e e6       	ldi	r22, 0x6E	; 110
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     5d8:	28 2f       	mov	r18, r24
     5da:	39 2f       	mov	r19, r25
     5dc:	21 15       	cp	r18, r1
     5de:	31 05       	cpc	r19, r1
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <DIO_VSet_port_Direction+0xa6>
     5e2:	c8 01       	movw	r24, r16
     5e4:	64 e7       	ldi	r22, 0x74	; 116
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
     5ec:	28 2f       	mov	r18, r24
     5ee:	39 2f       	mov	r19, r25
     5f0:	21 15       	cp	r18, r1
     5f2:	31 05       	cpc	r19, r1
     5f4:	f1 f4       	brne	.+60     	; 0x632 <DIO_VSet_port_Direction+0xe2>
	{
		switch(port)
     5f6:	c4 34       	cpi	r28, 0x44	; 68
     5f8:	d9 f0       	breq	.+54     	; 0x630 <DIO_VSet_port_Direction+0xe0>
     5fa:	c5 34       	cpi	r28, 0x45	; 69
     5fc:	38 f4       	brcc	.+14     	; 0x60c <DIO_VSet_port_Direction+0xbc>
     5fe:	c2 34       	cpi	r28, 0x42	; 66
     600:	99 f0       	breq	.+38     	; 0x628 <DIO_VSet_port_Direction+0xd8>
     602:	c3 34       	cpi	r28, 0x43	; 67
     604:	98 f4       	brcc	.+38     	; 0x62c <DIO_VSet_port_Direction+0xdc>
     606:	c1 34       	cpi	r28, 0x41	; 65
     608:	a1 f4       	brne	.+40     	; 0x632 <DIO_VSet_port_Direction+0xe2>
     60a:	0c c0       	rjmp	.+24     	; 0x624 <DIO_VSet_port_Direction+0xd4>
     60c:	c2 36       	cpi	r28, 0x62	; 98
     60e:	61 f0       	breq	.+24     	; 0x628 <DIO_VSet_port_Direction+0xd8>
     610:	c3 36       	cpi	r28, 0x63	; 99
     612:	18 f4       	brcc	.+6      	; 0x61a <DIO_VSet_port_Direction+0xca>
     614:	c1 36       	cpi	r28, 0x61	; 97
     616:	69 f4       	brne	.+26     	; 0x632 <DIO_VSet_port_Direction+0xe2>
     618:	05 c0       	rjmp	.+10     	; 0x624 <DIO_VSet_port_Direction+0xd4>
     61a:	c3 36       	cpi	r28, 0x63	; 99
     61c:	39 f0       	breq	.+14     	; 0x62c <DIO_VSet_port_Direction+0xdc>
     61e:	c4 36       	cpi	r28, 0x64	; 100
     620:	41 f4       	brne	.+16     	; 0x632 <DIO_VSet_port_Direction+0xe2>
     622:	06 c0       	rjmp	.+12     	; 0x630 <DIO_VSet_port_Direction+0xe0>
		{
			case'a':
			case'A':
			DDRA_ = 0;
     624:	1a ba       	out	0x1a, r1	; 26
			break;
     626:	05 c0       	rjmp	.+10     	; 0x632 <DIO_VSet_port_Direction+0xe2>
			case 'b':
			case 'B':
			DDRB_ = 0;
     628:	17 ba       	out	0x17, r1	; 23
			break;
     62a:	03 c0       	rjmp	.+6      	; 0x632 <DIO_VSet_port_Direction+0xe2>
			case 'C':
			case 'c':
			DDRC_ = 0;
     62c:	14 ba       	out	0x14, r1	; 20
			break;
     62e:	01 c0       	rjmp	.+2      	; 0x632 <DIO_VSet_port_Direction+0xe2>
			case 'd':
			case 'D':
			DDRD_ = 0;
     630:	11 ba       	out	0x11, r1	; 17
			break;
		}
	}
}
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	08 95       	ret

0000063a <DIO_VWrite_port>:

void DIO_VWrite_port(unsigned char port , unsigned char val)
{
		switch(port)
     63a:	84 34       	cpi	r24, 0x44	; 68
     63c:	d9 f0       	breq	.+54     	; 0x674 <DIO_VWrite_port+0x3a>
     63e:	85 34       	cpi	r24, 0x45	; 69
     640:	38 f4       	brcc	.+14     	; 0x650 <DIO_VWrite_port+0x16>
     642:	82 34       	cpi	r24, 0x42	; 66
     644:	99 f0       	breq	.+38     	; 0x66c <DIO_VWrite_port+0x32>
     646:	83 34       	cpi	r24, 0x43	; 67
     648:	98 f4       	brcc	.+38     	; 0x670 <DIO_VWrite_port+0x36>
     64a:	81 34       	cpi	r24, 0x41	; 65
     64c:	a1 f4       	brne	.+40     	; 0x676 <DIO_VWrite_port+0x3c>
     64e:	0c c0       	rjmp	.+24     	; 0x668 <DIO_VWrite_port+0x2e>
     650:	82 36       	cpi	r24, 0x62	; 98
     652:	61 f0       	breq	.+24     	; 0x66c <DIO_VWrite_port+0x32>
     654:	83 36       	cpi	r24, 0x63	; 99
     656:	18 f4       	brcc	.+6      	; 0x65e <DIO_VWrite_port+0x24>
     658:	81 36       	cpi	r24, 0x61	; 97
     65a:	69 f4       	brne	.+26     	; 0x676 <DIO_VWrite_port+0x3c>
     65c:	05 c0       	rjmp	.+10     	; 0x668 <DIO_VWrite_port+0x2e>
     65e:	83 36       	cpi	r24, 0x63	; 99
     660:	39 f0       	breq	.+14     	; 0x670 <DIO_VWrite_port+0x36>
     662:	84 36       	cpi	r24, 0x64	; 100
     664:	41 f4       	brne	.+16     	; 0x676 <DIO_VWrite_port+0x3c>
     666:	06 c0       	rjmp	.+12     	; 0x674 <DIO_VWrite_port+0x3a>
		{
			case'a':
			case'A':
			PORTA_ = val;
     668:	6b bb       	out	0x1b, r22	; 27
			break;
     66a:	08 95       	ret
			case 'b':
			case 'B':
			PORTB_ = val;
     66c:	68 bb       	out	0x18, r22	; 24
			break;
     66e:	08 95       	ret
			case 'C':
			case 'c':
			PORTC_ = val;
     670:	65 bb       	out	0x15, r22	; 21
			break;
     672:	08 95       	ret
			case 'd':
			case 'D':
			PORTD_ = val;
     674:	62 bb       	out	0x12, r22	; 18
     676:	08 95       	ret

00000678 <DIO_U8Read_port>:
}


unsigned char DIO_U8Read_port(unsigned char port)
{
	switch(port)
     678:	84 34       	cpi	r24, 0x44	; 68
     67a:	d9 f0       	breq	.+54     	; 0x6b2 <DIO_U8Read_port+0x3a>
     67c:	85 34       	cpi	r24, 0x45	; 69
     67e:	38 f4       	brcc	.+14     	; 0x68e <DIO_U8Read_port+0x16>
     680:	82 34       	cpi	r24, 0x42	; 66
     682:	99 f0       	breq	.+38     	; 0x6aa <DIO_U8Read_port+0x32>
     684:	83 34       	cpi	r24, 0x43	; 67
     686:	98 f4       	brcc	.+38     	; 0x6ae <DIO_U8Read_port+0x36>
     688:	81 34       	cpi	r24, 0x41	; 65
     68a:	a9 f4       	brne	.+42     	; 0x6b6 <DIO_U8Read_port+0x3e>
     68c:	0c c0       	rjmp	.+24     	; 0x6a6 <DIO_U8Read_port+0x2e>
     68e:	82 36       	cpi	r24, 0x62	; 98
     690:	61 f0       	breq	.+24     	; 0x6aa <DIO_U8Read_port+0x32>
     692:	83 36       	cpi	r24, 0x63	; 99
     694:	18 f4       	brcc	.+6      	; 0x69c <DIO_U8Read_port+0x24>
     696:	81 36       	cpi	r24, 0x61	; 97
     698:	71 f4       	brne	.+28     	; 0x6b6 <DIO_U8Read_port+0x3e>
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <DIO_U8Read_port+0x2e>
     69c:	83 36       	cpi	r24, 0x63	; 99
     69e:	39 f0       	breq	.+14     	; 0x6ae <DIO_U8Read_port+0x36>
     6a0:	84 36       	cpi	r24, 0x64	; 100
     6a2:	49 f4       	brne	.+18     	; 0x6b6 <DIO_U8Read_port+0x3e>
     6a4:	06 c0       	rjmp	.+12     	; 0x6b2 <DIO_U8Read_port+0x3a>
	{
		case'a':
		case'A':
			return PINA_ ;
     6a6:	89 b3       	in	r24, 0x19	; 25
     6a8:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PINB_;
     6aa:	86 b3       	in	r24, 0x16	; 22
     6ac:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PINC_;
     6ae:	83 b3       	in	r24, 0x13	; 19
     6b0:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PIND_;
     6b2:	80 b3       	in	r24, 0x10	; 16
     6b4:	08 95       	ret
			break;
	}
}
     6b6:	08 95       	ret

000006b8 <DIO_VToggle_port>:


void DIO_VToggle_port(unsigned char port)

{
	switch(port)
     6b8:	84 34       	cpi	r24, 0x44	; 68
     6ba:	09 f1       	breq	.+66     	; 0x6fe <DIO_VToggle_port+0x46>
     6bc:	85 34       	cpi	r24, 0x45	; 69
     6be:	38 f4       	brcc	.+14     	; 0x6ce <DIO_VToggle_port+0x16>
     6c0:	82 34       	cpi	r24, 0x42	; 66
     6c2:	a9 f0       	breq	.+42     	; 0x6ee <DIO_VToggle_port+0x36>
     6c4:	83 34       	cpi	r24, 0x43	; 67
     6c6:	b8 f4       	brcc	.+46     	; 0x6f6 <DIO_VToggle_port+0x3e>
     6c8:	81 34       	cpi	r24, 0x41	; 65
     6ca:	e1 f4       	brne	.+56     	; 0x704 <DIO_VToggle_port+0x4c>
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <DIO_VToggle_port+0x2e>
     6ce:	82 36       	cpi	r24, 0x62	; 98
     6d0:	71 f0       	breq	.+28     	; 0x6ee <DIO_VToggle_port+0x36>
     6d2:	83 36       	cpi	r24, 0x63	; 99
     6d4:	18 f4       	brcc	.+6      	; 0x6dc <DIO_VToggle_port+0x24>
     6d6:	81 36       	cpi	r24, 0x61	; 97
     6d8:	a9 f4       	brne	.+42     	; 0x704 <DIO_VToggle_port+0x4c>
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <DIO_VToggle_port+0x2e>
     6dc:	83 36       	cpi	r24, 0x63	; 99
     6de:	59 f0       	breq	.+22     	; 0x6f6 <DIO_VToggle_port+0x3e>
     6e0:	84 36       	cpi	r24, 0x64	; 100
     6e2:	81 f4       	brne	.+32     	; 0x704 <DIO_VToggle_port+0x4c>
     6e4:	0c c0       	rjmp	.+24     	; 0x6fe <DIO_VToggle_port+0x46>
	{
		case'a':
		case'A':
			return PORTA_ ^= (0xff);
     6e6:	8b b3       	in	r24, 0x1b	; 27
     6e8:	80 95       	com	r24
     6ea:	8b bb       	out	0x1b, r24	; 27
     6ec:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PORTB_ ^= (0xff);
     6ee:	88 b3       	in	r24, 0x18	; 24
     6f0:	80 95       	com	r24
     6f2:	88 bb       	out	0x18, r24	; 24
     6f4:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PORTC_ ^= (0xff);
     6f6:	85 b3       	in	r24, 0x15	; 21
     6f8:	80 95       	com	r24
     6fa:	85 bb       	out	0x15, r24	; 21
     6fc:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PORTD_ ^= (0xff);
     6fe:	82 b3       	in	r24, 0x12	; 18
     700:	80 95       	com	r24
     702:	82 bb       	out	0x12, r24	; 18
     704:	08 95       	ret

00000706 <Dio_connect_pullup>:


void Dio_connect_pullup(unsigned char port , unsigned char pin_numb , unsigned char state)
{
// by default the PUD of SFIOR is set to low which means the pull-up is enabled
	switch(port)
     706:	84 34       	cpi	r24, 0x44	; 68
     708:	09 f4       	brne	.+2      	; 0x70c <Dio_connect_pullup+0x6>
     70a:	71 c0       	rjmp	.+226    	; 0x7ee <Dio_connect_pullup+0xe8>
     70c:	85 34       	cpi	r24, 0x45	; 69
     70e:	48 f4       	brcc	.+18     	; 0x722 <Dio_connect_pullup+0x1c>
     710:	82 34       	cpi	r24, 0x42	; 66
     712:	99 f1       	breq	.+102    	; 0x77a <Dio_connect_pullup+0x74>
     714:	83 34       	cpi	r24, 0x43	; 67
     716:	08 f0       	brcs	.+2      	; 0x71a <Dio_connect_pullup+0x14>
     718:	4d c0       	rjmp	.+154    	; 0x7b4 <Dio_connect_pullup+0xae>
     71a:	81 34       	cpi	r24, 0x41	; 65
     71c:	09 f0       	breq	.+2      	; 0x720 <Dio_connect_pullup+0x1a>
     71e:	83 c0       	rjmp	.+262    	; 0x826 <Dio_connect_pullup+0x120>
     720:	0f c0       	rjmp	.+30     	; 0x740 <Dio_connect_pullup+0x3a>
     722:	82 36       	cpi	r24, 0x62	; 98
     724:	51 f1       	breq	.+84     	; 0x77a <Dio_connect_pullup+0x74>
     726:	83 36       	cpi	r24, 0x63	; 99
     728:	20 f4       	brcc	.+8      	; 0x732 <Dio_connect_pullup+0x2c>
     72a:	81 36       	cpi	r24, 0x61	; 97
     72c:	09 f0       	breq	.+2      	; 0x730 <Dio_connect_pullup+0x2a>
     72e:	7b c0       	rjmp	.+246    	; 0x826 <Dio_connect_pullup+0x120>
     730:	07 c0       	rjmp	.+14     	; 0x740 <Dio_connect_pullup+0x3a>
     732:	83 36       	cpi	r24, 0x63	; 99
     734:	09 f4       	brne	.+2      	; 0x738 <Dio_connect_pullup+0x32>
     736:	3e c0       	rjmp	.+124    	; 0x7b4 <Dio_connect_pullup+0xae>
     738:	84 36       	cpi	r24, 0x64	; 100
     73a:	09 f0       	breq	.+2      	; 0x73e <Dio_connect_pullup+0x38>
     73c:	74 c0       	rjmp	.+232    	; 0x826 <Dio_connect_pullup+0x120>
     73e:	57 c0       	rjmp	.+174    	; 0x7ee <Dio_connect_pullup+0xe8>
	{
		case 'A':
		case 'a':			
			(state == 1) ?  (SET_BIT(PORTA_ , pin_numb),0) : (CLEAR_BIT(PORTA_,pin_numb),0);
     740:	41 30       	cpi	r20, 0x01	; 1
     742:	69 f4       	brne	.+26     	; 0x75e <Dio_connect_pullup+0x58>
     744:	2b b3       	in	r18, 0x1b	; 27
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	ac 01       	movw	r20, r24
     74c:	02 c0       	rjmp	.+4      	; 0x752 <Dio_connect_pullup+0x4c>
     74e:	44 0f       	add	r20, r20
     750:	55 1f       	adc	r21, r21
     752:	6a 95       	dec	r22
     754:	e2 f7       	brpl	.-8      	; 0x74e <Dio_connect_pullup+0x48>
     756:	ba 01       	movw	r22, r20
     758:	62 2b       	or	r22, r18
     75a:	6b bb       	out	0x1b, r22	; 27
     75c:	08 95       	ret
     75e:	2b b3       	in	r18, 0x1b	; 27
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	ac 01       	movw	r20, r24
     766:	02 c0       	rjmp	.+4      	; 0x76c <Dio_connect_pullup+0x66>
     768:	44 0f       	add	r20, r20
     76a:	55 1f       	adc	r21, r21
     76c:	6a 95       	dec	r22
     76e:	e2 f7       	brpl	.-8      	; 0x768 <Dio_connect_pullup+0x62>
     770:	ba 01       	movw	r22, r20
     772:	60 95       	com	r22
     774:	62 23       	and	r22, r18
     776:	6b bb       	out	0x1b, r22	; 27
     778:	08 95       	ret
			break;
		case 'B':
		case 'b':
			(state == 1) ?  (SET_BIT(PORTB_ , pin_numb),0) : (CLEAR_BIT(PORTB_,pin_numb),0);
     77a:	41 30       	cpi	r20, 0x01	; 1
     77c:	69 f4       	brne	.+26     	; 0x798 <Dio_connect_pullup+0x92>
     77e:	28 b3       	in	r18, 0x18	; 24
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	ac 01       	movw	r20, r24
     786:	02 c0       	rjmp	.+4      	; 0x78c <Dio_connect_pullup+0x86>
     788:	44 0f       	add	r20, r20
     78a:	55 1f       	adc	r21, r21
     78c:	6a 95       	dec	r22
     78e:	e2 f7       	brpl	.-8      	; 0x788 <Dio_connect_pullup+0x82>
     790:	ba 01       	movw	r22, r20
     792:	62 2b       	or	r22, r18
     794:	68 bb       	out	0x18, r22	; 24
     796:	08 95       	ret
     798:	28 b3       	in	r18, 0x18	; 24
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	ac 01       	movw	r20, r24
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <Dio_connect_pullup+0xa0>
     7a2:	44 0f       	add	r20, r20
     7a4:	55 1f       	adc	r21, r21
     7a6:	6a 95       	dec	r22
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <Dio_connect_pullup+0x9c>
     7aa:	ba 01       	movw	r22, r20
     7ac:	60 95       	com	r22
     7ae:	62 23       	and	r22, r18
     7b0:	68 bb       	out	0x18, r22	; 24
     7b2:	08 95       	ret
			break;
		case 'C':
		case 'c':
			(state == 1) ?  (SET_BIT(PORTC_ , pin_numb),0) : (CLEAR_BIT(PORTC_,pin_numb),0);
     7b4:	41 30       	cpi	r20, 0x01	; 1
     7b6:	69 f4       	brne	.+26     	; 0x7d2 <Dio_connect_pullup+0xcc>
     7b8:	25 b3       	in	r18, 0x15	; 21
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	ac 01       	movw	r20, r24
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <Dio_connect_pullup+0xc0>
     7c2:	44 0f       	add	r20, r20
     7c4:	55 1f       	adc	r21, r21
     7c6:	6a 95       	dec	r22
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <Dio_connect_pullup+0xbc>
     7ca:	ba 01       	movw	r22, r20
     7cc:	62 2b       	or	r22, r18
     7ce:	65 bb       	out	0x15, r22	; 21
     7d0:	08 95       	ret
     7d2:	25 b3       	in	r18, 0x15	; 21
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	ac 01       	movw	r20, r24
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <Dio_connect_pullup+0xda>
     7dc:	44 0f       	add	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	6a 95       	dec	r22
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <Dio_connect_pullup+0xd6>
     7e4:	ba 01       	movw	r22, r20
     7e6:	60 95       	com	r22
     7e8:	62 23       	and	r22, r18
     7ea:	65 bb       	out	0x15, r22	; 21
     7ec:	08 95       	ret
			break;
		case 'D':
		case 'd':
			(state == 1) ?  (SET_BIT(PORTD_ , pin_numb),0) : (CLEAR_BIT(PORTD_,pin_numb),0);
     7ee:	41 30       	cpi	r20, 0x01	; 1
     7f0:	69 f4       	brne	.+26     	; 0x80c <Dio_connect_pullup+0x106>
     7f2:	22 b3       	in	r18, 0x12	; 18
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	ac 01       	movw	r20, r24
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <Dio_connect_pullup+0xfa>
     7fc:	44 0f       	add	r20, r20
     7fe:	55 1f       	adc	r21, r21
     800:	6a 95       	dec	r22
     802:	e2 f7       	brpl	.-8      	; 0x7fc <Dio_connect_pullup+0xf6>
     804:	ba 01       	movw	r22, r20
     806:	62 2b       	or	r22, r18
     808:	62 bb       	out	0x12, r22	; 18
     80a:	08 95       	ret
     80c:	22 b3       	in	r18, 0x12	; 18
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	ac 01       	movw	r20, r24
     814:	02 c0       	rjmp	.+4      	; 0x81a <Dio_connect_pullup+0x114>
     816:	44 0f       	add	r20, r20
     818:	55 1f       	adc	r21, r21
     81a:	6a 95       	dec	r22
     81c:	e2 f7       	brpl	.-8      	; 0x816 <Dio_connect_pullup+0x110>
     81e:	ba 01       	movw	r22, r20
     820:	60 95       	com	r22
     822:	62 23       	and	r22, r18
     824:	62 bb       	out	0x12, r22	; 18
     826:	08 95       	ret

00000828 <Dio_Write_lowNibble2>:
}
}


void Dio_Write_lowNibble2(unsigned char port , unsigned char val )
{
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	00 d0       	rcall	.+0      	; 0x834 <Dio_Write_lowNibble2+0xc>
     834:	00 d0       	rcall	.+0      	; 0x836 <Dio_Write_lowNibble2+0xe>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	18 2f       	mov	r17, r24
	const char *bit_as_string[] = {"0", "1"};
     83c:	8e e8       	ldi	r24, 0x8E	; 142
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	84 e8       	ldi	r24, 0x84	; 132
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9c 83       	std	Y+4, r25	; 0x04
     84a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vwrite(port , 0 , bit_as_string[READ_BIT(val,0)]);
     84c:	e6 2e       	mov	r14, r22
     84e:	ff 24       	eor	r15, r15
     850:	f7 01       	movw	r30, r14
     852:	e1 70       	andi	r30, 0x01	; 1
     854:	f0 70       	andi	r31, 0x00	; 0
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	8c 0f       	add	r24, r28
     860:	9d 1f       	adc	r25, r29
     862:	e8 0f       	add	r30, r24
     864:	f9 1f       	adc	r31, r25
     866:	40 81       	ld	r20, Z
     868:	51 81       	ldd	r21, Z+1	; 0x01
     86a:	81 2f       	mov	r24, r17
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(port , 1 , bit_as_string[READ_BIT(val,1)]);
     872:	f7 01       	movw	r30, r14
     874:	e2 70       	andi	r30, 0x02	; 2
     876:	f0 70       	andi	r31, 0x00	; 0
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	8c 0f       	add	r24, r28
     87e:	9d 1f       	adc	r25, r29
     880:	e8 0f       	add	r30, r24
     882:	f9 1f       	adc	r31, r25
     884:	40 81       	ld	r20, Z
     886:	51 81       	ldd	r21, Z+1	; 0x01
     888:	81 2f       	mov	r24, r17
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(port , 2 , bit_as_string[READ_BIT(val,2)]);
     890:	f7 01       	movw	r30, r14
     892:	e4 70       	andi	r30, 0x04	; 4
     894:	f0 70       	andi	r31, 0x00	; 0
     896:	f5 95       	asr	r31
     898:	e7 95       	ror	r30
     89a:	f5 95       	asr	r31
     89c:	e7 95       	ror	r30
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	8c 0f       	add	r24, r28
     8a8:	9d 1f       	adc	r25, r29
     8aa:	e8 0f       	add	r30, r24
     8ac:	f9 1f       	adc	r31, r25
     8ae:	40 81       	ld	r20, Z
     8b0:	51 81       	ldd	r21, Z+1	; 0x01
     8b2:	81 2f       	mov	r24, r17
     8b4:	62 e0       	ldi	r22, 0x02	; 2
     8b6:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(port , 3 , bit_as_string[READ_BIT(val,3)]);
     8ba:	98 e0       	ldi	r25, 0x08	; 8
     8bc:	e9 22       	and	r14, r25
     8be:	ff 24       	eor	r15, r15
     8c0:	f7 01       	movw	r30, r14
     8c2:	f5 95       	asr	r31
     8c4:	e7 95       	ror	r30
     8c6:	f5 95       	asr	r31
     8c8:	e7 95       	ror	r30
     8ca:	f5 95       	asr	r31
     8cc:	e7 95       	ror	r30
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	8c 0f       	add	r24, r28
     8d8:	9d 1f       	adc	r25, r29
     8da:	e8 0f       	add	r30, r24
     8dc:	f9 1f       	adc	r31, r25
     8de:	40 81       	ld	r20, Z
     8e0:	51 81       	ldd	r21, Z+1	; 0x01
     8e2:	81 2f       	mov	r24, r17
     8e4:	63 e0       	ldi	r22, 0x03	; 3
     8e6:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
}
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	08 95       	ret

000008fe <Dio_Write_highNibble2>:

void Dio_Write_highNibble2(unsigned char port , unsigned char val )
{
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	00 d0       	rcall	.+0      	; 0x90a <Dio_Write_highNibble2+0xc>
     90a:	00 d0       	rcall	.+0      	; 0x90c <Dio_Write_highNibble2+0xe>
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	18 2f       	mov	r17, r24
	const char *bit_as_string[] = {"0", "1"};
     912:	8e e8       	ldi	r24, 0x8E	; 142
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9a 83       	std	Y+2, r25	; 0x02
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	84 e8       	ldi	r24, 0x84	; 132
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9c 83       	std	Y+4, r25	; 0x04
     920:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vwrite(port , 4 , bit_as_string[READ_BIT(val,0)]);
     922:	e6 2e       	mov	r14, r22
     924:	ff 24       	eor	r15, r15
     926:	f7 01       	movw	r30, r14
     928:	e1 70       	andi	r30, 0x01	; 1
     92a:	f0 70       	andi	r31, 0x00	; 0
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	8c 0f       	add	r24, r28
     936:	9d 1f       	adc	r25, r29
     938:	e8 0f       	add	r30, r24
     93a:	f9 1f       	adc	r31, r25
     93c:	40 81       	ld	r20, Z
     93e:	51 81       	ldd	r21, Z+1	; 0x01
     940:	81 2f       	mov	r24, r17
     942:	64 e0       	ldi	r22, 0x04	; 4
     944:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(port , 5 , bit_as_string[READ_BIT(val,1)]);
     948:	f7 01       	movw	r30, r14
     94a:	e2 70       	andi	r30, 0x02	; 2
     94c:	f0 70       	andi	r31, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	8c 0f       	add	r24, r28
     954:	9d 1f       	adc	r25, r29
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	40 81       	ld	r20, Z
     95c:	51 81       	ldd	r21, Z+1	; 0x01
     95e:	81 2f       	mov	r24, r17
     960:	65 e0       	ldi	r22, 0x05	; 5
     962:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(port , 6 , bit_as_string[READ_BIT(val,2)]);
     966:	f7 01       	movw	r30, r14
     968:	e4 70       	andi	r30, 0x04	; 4
     96a:	f0 70       	andi	r31, 0x00	; 0
     96c:	f5 95       	asr	r31
     96e:	e7 95       	ror	r30
     970:	f5 95       	asr	r31
     972:	e7 95       	ror	r30
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	8c 0f       	add	r24, r28
     97e:	9d 1f       	adc	r25, r29
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	40 81       	ld	r20, Z
     986:	51 81       	ldd	r21, Z+1	; 0x01
     988:	81 2f       	mov	r24, r17
     98a:	66 e0       	ldi	r22, 0x06	; 6
     98c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(port , 7 , bit_as_string[READ_BIT(val,3)]);
     990:	98 e0       	ldi	r25, 0x08	; 8
     992:	e9 22       	and	r14, r25
     994:	ff 24       	eor	r15, r15
     996:	f7 01       	movw	r30, r14
     998:	f5 95       	asr	r31
     99a:	e7 95       	ror	r30
     99c:	f5 95       	asr	r31
     99e:	e7 95       	ror	r30
     9a0:	f5 95       	asr	r31
     9a2:	e7 95       	ror	r30
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	8c 0f       	add	r24, r28
     9ae:	9d 1f       	adc	r25, r29
     9b0:	e8 0f       	add	r30, r24
     9b2:	f9 1f       	adc	r31, r25
     9b4:	40 81       	ld	r20, Z
     9b6:	51 81       	ldd	r21, Z+1	; 0x01
     9b8:	81 2f       	mov	r24, r17
     9ba:	67 e0       	ldi	r22, 0x07	; 7
     9bc:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
}
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <Dio_Write_lowNibble>:

void Dio_Write_lowNibble(unsigned char port , unsigned char val )
{
	val &=0x0f;
     9d4:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     9d6:	84 34       	cpi	r24, 0x44	; 68
     9d8:	51 f1       	breq	.+84     	; 0xa2e <Dio_Write_lowNibble+0x5a>
     9da:	85 34       	cpi	r24, 0x45	; 69
     9dc:	38 f4       	brcc	.+14     	; 0x9ec <Dio_Write_lowNibble+0x18>
     9de:	82 34       	cpi	r24, 0x42	; 66
     9e0:	c1 f0       	breq	.+48     	; 0xa12 <Dio_Write_lowNibble+0x3e>
     9e2:	83 34       	cpi	r24, 0x43	; 67
     9e4:	e8 f4       	brcc	.+58     	; 0xa20 <Dio_Write_lowNibble+0x4c>
     9e6:	81 34       	cpi	r24, 0x41	; 65
     9e8:	41 f5       	brne	.+80     	; 0xa3a <Dio_Write_lowNibble+0x66>
     9ea:	0c c0       	rjmp	.+24     	; 0xa04 <Dio_Write_lowNibble+0x30>
     9ec:	82 36       	cpi	r24, 0x62	; 98
     9ee:	89 f0       	breq	.+34     	; 0xa12 <Dio_Write_lowNibble+0x3e>
     9f0:	83 36       	cpi	r24, 0x63	; 99
     9f2:	18 f4       	brcc	.+6      	; 0x9fa <Dio_Write_lowNibble+0x26>
     9f4:	81 36       	cpi	r24, 0x61	; 97
     9f6:	09 f5       	brne	.+66     	; 0xa3a <Dio_Write_lowNibble+0x66>
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <Dio_Write_lowNibble+0x30>
     9fa:	83 36       	cpi	r24, 0x63	; 99
     9fc:	89 f0       	breq	.+34     	; 0xa20 <Dio_Write_lowNibble+0x4c>
     9fe:	84 36       	cpi	r24, 0x64	; 100
     a00:	e1 f4       	brne	.+56     	; 0xa3a <Dio_Write_lowNibble+0x66>
     a02:	15 c0       	rjmp	.+42     	; 0xa2e <Dio_Write_lowNibble+0x5a>
	{
		case'A':
		case'a':
			PORTA_&=0xf0;
     a04:	8b b3       	in	r24, 0x1b	; 27
     a06:	80 7f       	andi	r24, 0xF0	; 240
     a08:	8b bb       	out	0x1b, r24	; 27
			PORTA_|=val;
     a0a:	8b b3       	in	r24, 0x1b	; 27
     a0c:	68 2b       	or	r22, r24
     a0e:	6b bb       	out	0x1b, r22	; 27
			break;
     a10:	08 95       	ret
		case'b':
		case'B':
			PORTB_&=0xf0;
     a12:	88 b3       	in	r24, 0x18	; 24
     a14:	80 7f       	andi	r24, 0xF0	; 240
     a16:	88 bb       	out	0x18, r24	; 24
			PORTB_|=val;
     a18:	88 b3       	in	r24, 0x18	; 24
     a1a:	68 2b       	or	r22, r24
     a1c:	68 bb       	out	0x18, r22	; 24
			break;
     a1e:	08 95       	ret
		case'C':
		case'c':
			PORTC_&=0xf0;
     a20:	85 b3       	in	r24, 0x15	; 21
     a22:	80 7f       	andi	r24, 0xF0	; 240
     a24:	85 bb       	out	0x15, r24	; 21
			PORTC_|=val;
     a26:	85 b3       	in	r24, 0x15	; 21
     a28:	68 2b       	or	r22, r24
     a2a:	65 bb       	out	0x15, r22	; 21
			break;
     a2c:	08 95       	ret
		case'D':
		case'd':
			PORTD_&=0xf0;
     a2e:	82 b3       	in	r24, 0x12	; 18
     a30:	80 7f       	andi	r24, 0xF0	; 240
     a32:	82 bb       	out	0x12, r24	; 18
			PORTD_|=val;
     a34:	82 b3       	in	r24, 0x12	; 18
     a36:	68 2b       	or	r22, r24
     a38:	62 bb       	out	0x12, r22	; 18
     a3a:	08 95       	ret

00000a3c <Dio_Write_highNibble>:



void Dio_Write_highNibble(unsigned char port , unsigned char val )
{
	val<<=4;
     a3c:	62 95       	swap	r22
     a3e:	60 7f       	andi	r22, 0xF0	; 240
	switch(port) 
     a40:	84 34       	cpi	r24, 0x44	; 68
     a42:	51 f1       	breq	.+84     	; 0xa98 <Dio_Write_highNibble+0x5c>
     a44:	85 34       	cpi	r24, 0x45	; 69
     a46:	38 f4       	brcc	.+14     	; 0xa56 <Dio_Write_highNibble+0x1a>
     a48:	82 34       	cpi	r24, 0x42	; 66
     a4a:	c1 f0       	breq	.+48     	; 0xa7c <Dio_Write_highNibble+0x40>
     a4c:	83 34       	cpi	r24, 0x43	; 67
     a4e:	e8 f4       	brcc	.+58     	; 0xa8a <Dio_Write_highNibble+0x4e>
     a50:	81 34       	cpi	r24, 0x41	; 65
     a52:	41 f5       	brne	.+80     	; 0xaa4 <Dio_Write_highNibble+0x68>
     a54:	0c c0       	rjmp	.+24     	; 0xa6e <Dio_Write_highNibble+0x32>
     a56:	82 36       	cpi	r24, 0x62	; 98
     a58:	89 f0       	breq	.+34     	; 0xa7c <Dio_Write_highNibble+0x40>
     a5a:	83 36       	cpi	r24, 0x63	; 99
     a5c:	18 f4       	brcc	.+6      	; 0xa64 <Dio_Write_highNibble+0x28>
     a5e:	81 36       	cpi	r24, 0x61	; 97
     a60:	09 f5       	brne	.+66     	; 0xaa4 <Dio_Write_highNibble+0x68>
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <Dio_Write_highNibble+0x32>
     a64:	83 36       	cpi	r24, 0x63	; 99
     a66:	89 f0       	breq	.+34     	; 0xa8a <Dio_Write_highNibble+0x4e>
     a68:	84 36       	cpi	r24, 0x64	; 100
     a6a:	e1 f4       	brne	.+56     	; 0xaa4 <Dio_Write_highNibble+0x68>
     a6c:	15 c0       	rjmp	.+42     	; 0xa98 <Dio_Write_highNibble+0x5c>
	{
		case'A':
		case'a':
			PORTA_&=0xf0;
     a6e:	8b b3       	in	r24, 0x1b	; 27
     a70:	80 7f       	andi	r24, 0xF0	; 240
     a72:	8b bb       	out	0x1b, r24	; 27
			PORTA_|=val;
     a74:	8b b3       	in	r24, 0x1b	; 27
     a76:	68 2b       	or	r22, r24
     a78:	6b bb       	out	0x1b, r22	; 27
			break;
     a7a:	08 95       	ret
		case'b':
		case'B':
			PORTB_&=0xf0;
     a7c:	88 b3       	in	r24, 0x18	; 24
     a7e:	80 7f       	andi	r24, 0xF0	; 240
     a80:	88 bb       	out	0x18, r24	; 24
			PORTB_|=val;
     a82:	88 b3       	in	r24, 0x18	; 24
     a84:	68 2b       	or	r22, r24
     a86:	68 bb       	out	0x18, r22	; 24
			break;
     a88:	08 95       	ret
		case'C':
		case'c':
			PORTC_&=0xf0;
     a8a:	85 b3       	in	r24, 0x15	; 21
     a8c:	80 7f       	andi	r24, 0xF0	; 240
     a8e:	85 bb       	out	0x15, r24	; 21
			PORTC_|=val;
     a90:	85 b3       	in	r24, 0x15	; 21
     a92:	68 2b       	or	r22, r24
     a94:	65 bb       	out	0x15, r22	; 21
			break;
     a96:	08 95       	ret
		case'D':
		case'd':
			PORTD_&=0xf0;
     a98:	82 b3       	in	r24, 0x12	; 18
     a9a:	80 7f       	andi	r24, 0xF0	; 240
     a9c:	82 bb       	out	0x12, r24	; 18
			PORTD_|=val;
     a9e:	82 b3       	in	r24, 0x12	; 18
     aa0:	68 2b       	or	r22, r24
     aa2:	62 bb       	out	0x12, r22	; 18
     aa4:	08 95       	ret

00000aa6 <Dio_Set_lowNibble>:
		
	}
}

Dio_Set_lowNibble(unsigned char port)
{
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	18 2f       	mov	r17, r24
	Dio_VSet_pin_Dir(port , 0,"OUTPUT");
     aae:	c0 e6       	ldi	r28, 0x60	; 96
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	ae 01       	movw	r20, r28
     ab6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 1,"OUTPUT");
     aba:	81 2f       	mov	r24, r17
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	ae 01       	movw	r20, r28
     ac0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 2,"OUTPUT");
     ac4:	81 2f       	mov	r24, r17
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	ae 01       	movw	r20, r28
     aca:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 3,"OUTPUT");
     ace:	81 2f       	mov	r24, r17
     ad0:	63 e0       	ldi	r22, 0x03	; 3
     ad2:	ae 01       	movw	r20, r28
     ad4:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	08 95       	ret

00000ae0 <Dio_Set_highNibble>:

Dio_Set_highNibble(unsigned char port)
{
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	18 2f       	mov	r17, r24
	Dio_VSet_pin_Dir(port , 4,"OUTPUT");
     ae8:	c0 e6       	ldi	r28, 0x60	; 96
     aea:	d0 e0       	ldi	r29, 0x00	; 0
     aec:	64 e0       	ldi	r22, 0x04	; 4
     aee:	ae 01       	movw	r20, r28
     af0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 5,"OUTPUT");
     af4:	81 2f       	mov	r24, r17
     af6:	65 e0       	ldi	r22, 0x05	; 5
     af8:	ae 01       	movw	r20, r28
     afa:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 6,"OUTPUT");
     afe:	81 2f       	mov	r24, r17
     b00:	66 e0       	ldi	r22, 0x06	; 6
     b02:	ae 01       	movw	r20, r28
     b04:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 7,"OUTPUT");
     b08:	81 2f       	mov	r24, r17
     b0a:	67 e0       	ldi	r22, 0x07	; 7
     b0c:	ae 01       	movw	r20, r28
     b0e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	08 95       	ret

00000b1a <keypad_intialize>:
#define Keypad_pin PIND_
#define HIGH  "HIGH"
#define LOW "LOW"

void keypad_intialize(unsigned char port)
{
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	c8 2f       	mov	r28, r24
	Dio_VSet_pin_Dir(port , 0,"OUTPUT");
     b22:	00 e9       	ldi	r16, 0x90	; 144
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	a8 01       	movw	r20, r16
     b2a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 1,"OUTPUT");
     b2e:	8c 2f       	mov	r24, r28
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	a8 01       	movw	r20, r16
     b34:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 2,"OUTPUT");
     b38:	8c 2f       	mov	r24, r28
     b3a:	62 e0       	ldi	r22, 0x02	; 2
     b3c:	a8 01       	movw	r20, r16
     b3e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 3,"OUTPUT");
     b42:	8c 2f       	mov	r24, r28
     b44:	63 e0       	ldi	r22, 0x03	; 3
     b46:	a8 01       	movw	r20, r16
     b48:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 4,"INTPUT");
     b4c:	07 e9       	ldi	r16, 0x97	; 151
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	8c 2f       	mov	r24, r28
     b52:	64 e0       	ldi	r22, 0x04	; 4
     b54:	a8 01       	movw	r20, r16
     b56:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 5,"INTPUT");
     b5a:	8c 2f       	mov	r24, r28
     b5c:	65 e0       	ldi	r22, 0x05	; 5
     b5e:	a8 01       	movw	r20, r16
     b60:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 6,"INTPUT");
     b64:	8c 2f       	mov	r24, r28
     b66:	66 e0       	ldi	r22, 0x06	; 6
     b68:	a8 01       	movw	r20, r16
     b6a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 7,"INTPUT");
     b6e:	8c 2f       	mov	r24, r28
     b70:	67 e0       	ldi	r22, 0x07	; 7
     b72:	a8 01       	movw	r20, r16
     b74:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	
	Dio_connect_pullup(port, 4 , 1);
     b78:	8c 2f       	mov	r24, r28
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 83 03 	call	0x706	; 0x706 <Dio_connect_pullup>
	Dio_connect_pullup(port, 5 , 1);
     b82:	8c 2f       	mov	r24, r28
     b84:	65 e0       	ldi	r22, 0x05	; 5
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	0e 94 83 03 	call	0x706	; 0x706 <Dio_connect_pullup>
	Dio_connect_pullup(port, 6 , 1);
     b8c:	8c 2f       	mov	r24, r28
     b8e:	66 e0       	ldi	r22, 0x06	; 6
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	0e 94 83 03 	call	0x706	; 0x706 <Dio_connect_pullup>
	Dio_connect_pullup(port, 7 , 1);
     b96:	8c 2f       	mov	r24, r28
     b98:	67 e0       	ldi	r22, 0x07	; 7
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 83 03 	call	0x706	; 0x706 <Dio_connect_pullup>
}
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <Keypad_Pressed_value8u>:



unsigned char Keypad_Pressed_value8u(void)
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
	// First row
	DIO_vwrite(Keypad_port,0,LOW);
     bac:	84 e6       	ldi	r24, 0x64	; 100
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	4e e9       	ldi	r20, 0x9E	; 158
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,HIGH);
     bb8:	c2 ea       	ldi	r28, 0xA2	; 162
     bba:	d0 e0       	ldi	r29, 0x00	; 0
     bbc:	84 e6       	ldi	r24, 0x64	; 100
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	ae 01       	movw	r20, r28
     bc2:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,HIGH);
     bc6:	84 e6       	ldi	r24, 0x64	; 100
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	ae 01       	movw	r20, r28
     bcc:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,HIGH);
     bd0:	84 e6       	ldi	r24, 0x64	; 100
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	ae 01       	movw	r20, r28
     bd6:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bda:	83 ec       	ldi	r24, 0xC3	; 195
     bdc:	99 e0       	ldi	r25, 0x09	; 9
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <Keypad_Pressed_value8u+0x36>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <Keypad_Pressed_value8u+0x3c>
     be4:	00 00       	nop
	_delay_ms(10);  // small delay for settling
	if (!READ_BIT(Keypad_pin,4)) return '7';
     be6:	84 9b       	sbis	0x10, 4	; 16
     be8:	71 c0       	rjmp	.+226    	; 0xccc <Keypad_Pressed_value8u+0x124>
	if (!READ_BIT(Keypad_pin,5)) return '8';
     bea:	85 9b       	sbis	0x10, 5	; 16
     bec:	71 c0       	rjmp	.+226    	; 0xcd0 <Keypad_Pressed_value8u+0x128>
	if (!READ_BIT(Keypad_pin,6)) return '9';
     bee:	86 9b       	sbis	0x10, 6	; 16
     bf0:	71 c0       	rjmp	.+226    	; 0xcd4 <Keypad_Pressed_value8u+0x12c>
	if (!READ_BIT(Keypad_pin,7)) return 'A';
     bf2:	87 9b       	sbis	0x10, 7	; 16
     bf4:	71 c0       	rjmp	.+226    	; 0xcd8 <Keypad_Pressed_value8u+0x130>
	
	// Second row
	DIO_vwrite(Keypad_port,0,HIGH);
     bf6:	84 e6       	ldi	r24, 0x64	; 100
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	ae 01       	movw	r20, r28
     bfc:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,LOW);
     c00:	84 e6       	ldi	r24, 0x64	; 100
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	4e e9       	ldi	r20, 0x9E	; 158
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,HIGH);
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	ae 01       	movw	r20, r28
     c12:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,HIGH);
     c16:	84 e6       	ldi	r24, 0x64	; 100
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	ae 01       	movw	r20, r28
     c1c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
     c20:	83 ec       	ldi	r24, 0xC3	; 195
     c22:	99 e0       	ldi	r25, 0x09	; 9
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <Keypad_Pressed_value8u+0x7c>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <Keypad_Pressed_value8u+0x82>
     c2a:	00 00       	nop
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) return '4';
     c2c:	84 9b       	sbis	0x10, 4	; 16
     c2e:	56 c0       	rjmp	.+172    	; 0xcdc <Keypad_Pressed_value8u+0x134>
	if (!READ_BIT(Keypad_pin,5)) return '5';
     c30:	85 9b       	sbis	0x10, 5	; 16
     c32:	56 c0       	rjmp	.+172    	; 0xce0 <Keypad_Pressed_value8u+0x138>
	if (!READ_BIT(Keypad_pin,6)) return '6';
     c34:	86 9b       	sbis	0x10, 6	; 16
     c36:	56 c0       	rjmp	.+172    	; 0xce4 <Keypad_Pressed_value8u+0x13c>
	if (!READ_BIT(Keypad_pin,7)) return 'B';
     c38:	87 9b       	sbis	0x10, 7	; 16
     c3a:	56 c0       	rjmp	.+172    	; 0xce8 <Keypad_Pressed_value8u+0x140>
	
	// Third row
	DIO_vwrite(Keypad_port,0,HIGH);
     c3c:	84 e6       	ldi	r24, 0x64	; 100
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	ae 01       	movw	r20, r28
     c42:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,HIGH);
     c46:	84 e6       	ldi	r24, 0x64	; 100
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	ae 01       	movw	r20, r28
     c4c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,LOW);
     c50:	84 e6       	ldi	r24, 0x64	; 100
     c52:	62 e0       	ldi	r22, 0x02	; 2
     c54:	4e e9       	ldi	r20, 0x9E	; 158
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,HIGH);
     c5c:	84 e6       	ldi	r24, 0x64	; 100
     c5e:	63 e0       	ldi	r22, 0x03	; 3
     c60:	ae 01       	movw	r20, r28
     c62:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
     c66:	83 ec       	ldi	r24, 0xC3	; 195
     c68:	99 e0       	ldi	r25, 0x09	; 9
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <Keypad_Pressed_value8u+0xc2>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <Keypad_Pressed_value8u+0xc8>
     c70:	00 00       	nop
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) return '1';
     c72:	84 9b       	sbis	0x10, 4	; 16
     c74:	3b c0       	rjmp	.+118    	; 0xcec <Keypad_Pressed_value8u+0x144>
	if (!READ_BIT(Keypad_pin,5)) return '2';
     c76:	85 9b       	sbis	0x10, 5	; 16
     c78:	3b c0       	rjmp	.+118    	; 0xcf0 <Keypad_Pressed_value8u+0x148>
	if (!READ_BIT(Keypad_pin,6)) return '3';
     c7a:	86 9b       	sbis	0x10, 6	; 16
     c7c:	3b c0       	rjmp	.+118    	; 0xcf4 <Keypad_Pressed_value8u+0x14c>
	if (!READ_BIT(Keypad_pin,7)) return 'C';
     c7e:	87 9b       	sbis	0x10, 7	; 16
     c80:	3b c0       	rjmp	.+118    	; 0xcf8 <Keypad_Pressed_value8u+0x150>
	
	// Fourth row
	DIO_vwrite(Keypad_port,0,HIGH);
     c82:	84 e6       	ldi	r24, 0x64	; 100
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	ae 01       	movw	r20, r28
     c88:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,HIGH);
     c8c:	84 e6       	ldi	r24, 0x64	; 100
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	ae 01       	movw	r20, r28
     c92:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,HIGH);
     c96:	84 e6       	ldi	r24, 0x64	; 100
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	ae 01       	movw	r20, r28
     c9c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,LOW);
     ca0:	84 e6       	ldi	r24, 0x64	; 100
     ca2:	63 e0       	ldi	r22, 0x03	; 3
     ca4:	4e e9       	ldi	r20, 0x9E	; 158
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
     cac:	83 ec       	ldi	r24, 0xC3	; 195
     cae:	99 e0       	ldi	r25, 0x09	; 9
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <Keypad_Pressed_value8u+0x108>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <Keypad_Pressed_value8u+0x10e>
     cb6:	00 00       	nop
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) return '*';
     cb8:	84 9b       	sbis	0x10, 4	; 16
     cba:	20 c0       	rjmp	.+64     	; 0xcfc <Keypad_Pressed_value8u+0x154>
	if (!READ_BIT(Keypad_pin,5)) return '0';
     cbc:	85 9b       	sbis	0x10, 5	; 16
     cbe:	20 c0       	rjmp	.+64     	; 0xd00 <Keypad_Pressed_value8u+0x158>
	if (!READ_BIT(Keypad_pin,6)) return '#';
     cc0:	86 9b       	sbis	0x10, 6	; 16
     cc2:	20 c0       	rjmp	.+64     	; 0xd04 <Keypad_Pressed_value8u+0x15c>
	if (!READ_BIT(Keypad_pin,7)) return 'D';
     cc4:	87 99       	sbic	0x10, 7	; 16
     cc6:	20 c0       	rjmp	.+64     	; 0xd08 <Keypad_Pressed_value8u+0x160>
     cc8:	84 e4       	ldi	r24, 0x44	; 68
     cca:	1f c0       	rjmp	.+62     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	DIO_vwrite(Keypad_port,0,LOW);
	DIO_vwrite(Keypad_port,1,HIGH);
	DIO_vwrite(Keypad_port,2,HIGH);
	DIO_vwrite(Keypad_port,3,HIGH);
	_delay_ms(10);  // small delay for settling
	if (!READ_BIT(Keypad_pin,4)) return '7';
     ccc:	87 e3       	ldi	r24, 0x37	; 55
     cce:	1d c0       	rjmp	.+58     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,5)) return '8';
     cd0:	88 e3       	ldi	r24, 0x38	; 56
     cd2:	1b c0       	rjmp	.+54     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,6)) return '9';
     cd4:	89 e3       	ldi	r24, 0x39	; 57
     cd6:	19 c0       	rjmp	.+50     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,7)) return 'A';
     cd8:	81 e4       	ldi	r24, 0x41	; 65
     cda:	17 c0       	rjmp	.+46     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	DIO_vwrite(Keypad_port,0,HIGH);
	DIO_vwrite(Keypad_port,1,LOW);
	DIO_vwrite(Keypad_port,2,HIGH);
	DIO_vwrite(Keypad_port,3,HIGH);
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) return '4';
     cdc:	84 e3       	ldi	r24, 0x34	; 52
     cde:	15 c0       	rjmp	.+42     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,5)) return '5';
     ce0:	85 e3       	ldi	r24, 0x35	; 53
     ce2:	13 c0       	rjmp	.+38     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,6)) return '6';
     ce4:	86 e3       	ldi	r24, 0x36	; 54
     ce6:	11 c0       	rjmp	.+34     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,7)) return 'B';
     ce8:	82 e4       	ldi	r24, 0x42	; 66
     cea:	0f c0       	rjmp	.+30     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	DIO_vwrite(Keypad_port,0,HIGH);
	DIO_vwrite(Keypad_port,1,HIGH);
	DIO_vwrite(Keypad_port,2,LOW);
	DIO_vwrite(Keypad_port,3,HIGH);
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) return '1';
     cec:	81 e3       	ldi	r24, 0x31	; 49
     cee:	0d c0       	rjmp	.+26     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,5)) return '2';
     cf0:	82 e3       	ldi	r24, 0x32	; 50
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,6)) return '3';
     cf4:	83 e3       	ldi	r24, 0x33	; 51
     cf6:	09 c0       	rjmp	.+18     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,7)) return 'C';
     cf8:	83 e4       	ldi	r24, 0x43	; 67
     cfa:	07 c0       	rjmp	.+14     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	DIO_vwrite(Keypad_port,0,HIGH);
	DIO_vwrite(Keypad_port,1,HIGH);
	DIO_vwrite(Keypad_port,2,HIGH);
	DIO_vwrite(Keypad_port,3,LOW);
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) return '*';
     cfc:	8a e2       	ldi	r24, 0x2A	; 42
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,5)) return '0';
     d00:	80 e3       	ldi	r24, 0x30	; 48
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,6)) return '#';
     d04:	83 e2       	ldi	r24, 0x23	; 35
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <Keypad_Pressed_value8u+0x162>
	if (!READ_BIT(Keypad_pin,7)) return 'D';
	
	return '\0';  // No key pressed
     d08:	80 e0       	ldi	r24, 0x00	; 0
}
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <keypad_u8check_press>:

unsigned char keypad_u8check_press(void)
{
     d10:	6f 92       	push	r6
     d12:	7f 92       	push	r7
     d14:	8f 92       	push	r8
     d16:	9f 92       	push	r9
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	60 97       	sbiw	r28, 0x10	; 16
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4] = {
     d3a:	de 01       	movw	r26, r28
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	e7 ea       	ldi	r30, 0xA7	; 167
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	81 50       	subi	r24, 0x01	; 1
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <keypad_u8check_press+0x34>
	{'A','0','=','+'}
	};

	unsigned char row, column;

	for (row = 0; row < 4; row++)
     d4c:	00 e0       	ldi	r16, 0x00	; 0
	
	return '\0';  // No key pressed
}

unsigned char keypad_u8check_press(void)
{
     d4e:	bb 24       	eor	r11, r11

	for (row = 0; row < 4; row++)
	{
		// Set all rows HIGH first (only once per row scan)
		for (unsigned char r = 0; r < 4; r++)
		DIO_vwrite(Keypad_port, r, HIGH);
     d50:	0f 2e       	mov	r0, r31
     d52:	f2 ea       	ldi	r31, 0xA2	; 162
     d54:	cf 2e       	mov	r12, r31
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	df 2e       	mov	r13, r31
     d5a:	f0 2d       	mov	r31, r0

		// Set current row LOW
		DIO_vwrite(Keypad_port, row, LOW);
     d5c:	0f 2e       	mov	r0, r31
     d5e:	fe e9       	ldi	r31, 0x9E	; 158
     d60:	8f 2e       	mov	r8, r31
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	9f 2e       	mov	r9, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	66 24       	eor	r6, r6
     d6a:	77 24       	eor	r7, r7
		
		for (column = 0; column < 4; column++)
		{
			if (READ_BIT(Keypad_pin, column + 4) == 0)
     d6c:	ee 24       	eor	r14, r14
     d6e:	ff 24       	eor	r15, r15
     d70:	e3 94       	inc	r14
     d72:	58 c0       	rjmp	.+176    	; 0xe24 <keypad_u8check_press+0x114>

	for (row = 0; row < 4; row++)
	{
		// Set all rows HIGH first (only once per row scan)
		for (unsigned char r = 0; r < 4; r++)
		DIO_vwrite(Keypad_port, r, HIGH);
     d74:	84 e6       	ldi	r24, 0x64	; 100
     d76:	61 2f       	mov	r22, r17
     d78:	a6 01       	movw	r20, r12
     d7a:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	unsigned char row, column;

	for (row = 0; row < 4; row++)
	{
		// Set all rows HIGH first (only once per row scan)
		for (unsigned char r = 0; r < 4; r++)
     d7e:	1f 5f       	subi	r17, 0xFF	; 255
     d80:	14 30       	cpi	r17, 0x04	; 4
     d82:	c1 f7       	brne	.-16     	; 0xd74 <keypad_u8check_press+0x64>
		DIO_vwrite(Keypad_port, r, HIGH);

		// Set current row LOW
		DIO_vwrite(Keypad_port, row, LOW);
     d84:	84 e6       	ldi	r24, 0x64	; 100
     d86:	60 2f       	mov	r22, r16
     d88:	a4 01       	movw	r20, r8
     d8a:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
     d8e:	93 01       	movw	r18, r6
		
		for (column = 0; column < 4; column++)
		{
			if (READ_BIT(Keypad_pin, column + 4) == 0)
     d90:	80 b3       	in	r24, 0x10	; 16
     d92:	f9 01       	movw	r30, r18
	if (!READ_BIT(Keypad_pin,7)) return 'D';
	
	return '\0';  // No key pressed
}

unsigned char keypad_u8check_press(void)
     d94:	b9 01       	movw	r22, r18
     d96:	6c 5f       	subi	r22, 0xFC	; 252
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
		// Set current row LOW
		DIO_vwrite(Keypad_port, row, LOW);
		
		for (column = 0; column < 4; column++)
		{
			if (READ_BIT(Keypad_pin, column + 4) == 0)
     d9a:	a7 01       	movw	r20, r14
     d9c:	06 2e       	mov	r0, r22
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <keypad_u8check_press+0x94>
     da0:	44 0f       	add	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <keypad_u8check_press+0x90>
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	84 23       	and	r24, r20
     dac:	95 23       	and	r25, r21
     dae:	06 2e       	mov	r0, r22
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <keypad_u8check_press+0xa6>
     db2:	95 95       	asr	r25
     db4:	87 95       	ror	r24
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <keypad_u8check_press+0xa2>
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	51 f5       	brne	.+84     	; 0xe12 <keypad_u8check_press+0x102>
     dbe:	87 e8       	ldi	r24, 0x87	; 135
     dc0:	93 e1       	ldi	r25, 0x13	; 19
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <keypad_u8check_press+0xb2>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <keypad_u8check_press+0xb8>
     dc8:	00 00       	nop
			{
				_delay_ms(20); // debounce
				if (READ_BIT(Keypad_pin, column + 4) == 0)
     dca:	80 b3       	in	r24, 0x10	; 16
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	84 23       	and	r24, r20
     dd0:	95 23       	and	r25, r21
     dd2:	06 2e       	mov	r0, r22
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <keypad_u8check_press+0xca>
     dd6:	95 95       	asr	r25
     dd8:	87 95       	ror	r24
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <keypad_u8check_press+0xc6>
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	c1 f4       	brne	.+48     	; 0xe12 <keypad_u8check_press+0x102>
				{
					// Wait until key is released (optional but cleaner)
					while (READ_BIT(Keypad_pin, column + 4) == 0);
     de2:	80 b3       	in	r24, 0x10	; 16
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	84 23       	and	r24, r20
     de8:	95 23       	and	r25, r21
     dea:	06 2e       	mov	r0, r22
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <keypad_u8check_press+0xe2>
     dee:	95 95       	asr	r25
     df0:	87 95       	ror	r24
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <keypad_u8check_press+0xde>
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	a1 f3       	breq	.-24     	; 0xde2 <keypad_u8check_press+0xd2>
					return arr[row][column];
     dfa:	80 2f       	mov	r24, r16
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	e8 0f       	add	r30, r24
     e08:	f9 1f       	adc	r31, r25
     e0a:	ec 0f       	add	r30, r28
     e0c:	fd 1f       	adc	r31, r29
     e0e:	81 81       	ldd	r24, Z+1	; 0x01
     e10:	0c c0       	rjmp	.+24     	; 0xe2a <keypad_u8check_press+0x11a>
     e12:	2f 5f       	subi	r18, 0xFF	; 255
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
		DIO_vwrite(Keypad_port, r, HIGH);

		// Set current row LOW
		DIO_vwrite(Keypad_port, row, LOW);
		
		for (column = 0; column < 4; column++)
     e16:	24 30       	cpi	r18, 0x04	; 4
     e18:	31 05       	cpc	r19, r1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <keypad_u8check_press+0x10e>
     e1c:	b9 cf       	rjmp	.-142    	; 0xd90 <keypad_u8check_press+0x80>
	{'A','0','=','+'}
	};

	unsigned char row, column;

	for (row = 0; row < 4; row++)
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	04 30       	cpi	r16, 0x04	; 4
     e22:	11 f0       	breq	.+4      	; 0xe28 <keypad_u8check_press+0x118>
	
	return '\0';  // No key pressed
}

unsigned char keypad_u8check_press(void)
{
     e24:	1b 2d       	mov	r17, r11
     e26:	a6 cf       	rjmp	.-180    	; 0xd74 <keypad_u8check_press+0x64>
				}
			}
		}
	}
	
	return 0xFF; // no key pressed
     e28:	8f ef       	ldi	r24, 0xFF	; 255
}
     e2a:	60 96       	adiw	r28, 0x10	; 16
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	9f 90       	pop	r9
     e4a:	8f 90       	pop	r8
     e4c:	7f 90       	pop	r7
     e4e:	6f 90       	pop	r6
     e50:	08 95       	ret

00000e52 <enable>:
// Private function prototype
static void enable(void);

void enable(void)
{
    DIO_vwrite(LCD_control_port, En, "HIGH");
     e52:	81 e4       	ldi	r24, 0x41	; 65
     e54:	66 e0       	ldi	r22, 0x06	; 6
     e56:	47 eb       	ldi	r20, 0xB7	; 183
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
     e5e:	89 ef       	ldi	r24, 0xF9	; 249
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <enable+0x10>
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <enable+0x16>
     e68:	00 00       	nop
    _delay_ms(1);       // Enable pulse width (typically >450ns)
    DIO_vwrite(LCD_control_port, En, "LOW");
     e6a:	81 e4       	ldi	r24, 0x41	; 65
     e6c:	66 e0       	ldi	r22, 0x06	; 6
     e6e:	4c eb       	ldi	r20, 0xBC	; 188
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
     e76:	89 ef       	ldi	r24, 0xF9	; 249
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <enable+0x28>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <enable+0x2e>
     e80:	00 00       	nop
    _delay_ms(1);     // Command/data execution time
}
     e82:	08 95       	ret

00000e84 <Lcd_Send_cmd>:

void Lcd_Send_cmd(uint8_t cmd)
{
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	18 2f       	mov	r17, r24
	#if defined Eight_bit_mode
    DIO_VWrite_port(LCD_Data_port, cmd);
    DIO_vwrite(LCD_control_port, RS, "LOW");
    enable();
	#else
	DIO_vwrite(LCD_control_port, RS, "LOW");
     e8c:	cc eb       	ldi	r28, 0xBC	; 188
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	81 e4       	ldi	r24, 0x41	; 65
     e92:	67 e0       	ldi	r22, 0x07	; 7
     e94:	ae 01       	movw	r20, r28
     e96:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,(cmd >> 4)); // Send the most 4 bits
     e9a:	61 2f       	mov	r22, r17
     e9c:	62 95       	swap	r22
     e9e:	6f 70       	andi	r22, 0x0F	; 15
     ea0:	81 e4       	ldi	r24, 0x41	; 65
     ea2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Dio_Write_lowNibble>
	enable();
     ea6:	0e 94 29 07 	call	0xe52	; 0xe52 <enable>
	DIO_vwrite(LCD_control_port, RS, "LOW");
     eaa:	81 e4       	ldi	r24, 0x41	; 65
     eac:	67 e0       	ldi	r22, 0x07	; 7
     eae:	ae 01       	movw	r20, r28
     eb0:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,cmd); // send the least 4 bits
     eb4:	81 e4       	ldi	r24, 0x41	; 65
     eb6:	61 2f       	mov	r22, r17
     eb8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Dio_Write_lowNibble>
	enable();
     ebc:	0e 94 29 07 	call	0xe52	; 0xe52 <enable>
	#endif
	
    // Most commands need 1-2ms except clear and home
    if(cmd == LCD_CLEAR_DISPLAY || cmd == LCD_RETURN_HOME) {
     ec0:	11 50       	subi	r17, 0x01	; 1
     ec2:	12 30       	cpi	r17, 0x02	; 2
     ec4:	38 f4       	brcc	.+14     	; 0xed4 <Lcd_Send_cmd+0x50>
     ec6:	83 ef       	ldi	r24, 0xF3	; 243
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <Lcd_Send_cmd+0x46>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <Lcd_Send_cmd+0x4c>
     ed0:	00 00       	nop
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <Lcd_Send_cmd+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ed4:	91 e2       	ldi	r25, 0x21	; 33
     ed6:	9a 95       	dec	r25
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <Lcd_Send_cmd+0x52>
     eda:	00 00       	nop
        _delay_ms(2);
    } else {
        _delay_us(100);
    }
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	08 95       	ret

00000ee4 <Lcd_Send_char>:

void Lcd_Send_char(uint8_t data)
{	
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	18 2f       	mov	r17, r24
    DIO_VWrite_port(LCD_Data_port, data);
    DIO_vwrite(LCD_control_port, RS, "HIGH");
    enable();
    _delay_us(100);     // Character write time
	#else
	DIO_vwrite(LCD_control_port, RS, "HIGH");
     eec:	c7 eb       	ldi	r28, 0xB7	; 183
     eee:	d0 e0       	ldi	r29, 0x00	; 0
     ef0:	81 e4       	ldi	r24, 0x41	; 65
     ef2:	67 e0       	ldi	r22, 0x07	; 7
     ef4:	ae 01       	movw	r20, r28
     ef6:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,(data >> 4)); // Send the most 4 bits
     efa:	61 2f       	mov	r22, r17
     efc:	62 95       	swap	r22
     efe:	6f 70       	andi	r22, 0x0F	; 15
     f00:	81 e4       	ldi	r24, 0x41	; 65
     f02:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Dio_Write_lowNibble>
	enable();
     f06:	0e 94 29 07 	call	0xe52	; 0xe52 <enable>
	DIO_vwrite(LCD_control_port, RS, "HIGH");
     f0a:	81 e4       	ldi	r24, 0x41	; 65
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	ae 01       	movw	r20, r28
     f10:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,data); // send the least 4 bits
     f14:	81 e4       	ldi	r24, 0x41	; 65
     f16:	61 2f       	mov	r22, r17
     f18:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Dio_Write_lowNibble>
	enable();
     f1c:	0e 94 29 07 	call	0xe52	; 0xe52 <enable>
	#endif
	
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <Lcd_Initialize>:

void Lcd_Initialize(void)
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
    DIO_VSet_port_Direction(LCD_Data_port, "OUTPUT");
    Dio_VSet_pin_Dir(LCD_control_port, RS, "OUTPUT");
    Dio_VSet_pin_Dir(LCD_control_port, En, "OUTPUT");
	
	#else
	Dio_Set_lowNibble(LCD_Data_port);
     f2c:	81 e4       	ldi	r24, 0x41	; 65
     f2e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Dio_Set_lowNibble>
	Dio_VSet_pin_Dir(LCD_control_port, RS, "OUTPUT");
     f32:	c0 ec       	ldi	r28, 0xC0	; 192
     f34:	d0 e0       	ldi	r29, 0x00	; 0
     f36:	81 e4       	ldi	r24, 0x41	; 65
     f38:	67 e0       	ldi	r22, 0x07	; 7
     f3a:	ae 01       	movw	r20, r28
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(LCD_control_port, En, "OUTPUT");
     f40:	81 e4       	ldi	r24, 0x41	; 65
     f42:	66 e0       	ldi	r22, 0x06	; 6
     f44:	ae 01       	movw	r20, r28
     f46:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f4a:	8b e4       	ldi	r24, 0x4B	; 75
     f4c:	9d e1       	ldi	r25, 0x1D	; 29
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <Lcd_Initialize+0x26>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <Lcd_Initialize+0x2c>
     f54:	00 00       	nop
	#endif
    _delay_ms(30);
    
    // Initialization sequence
	Lcd_Send_cmd(LCD_RETURN_HOME); //return home
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
     f5c:	83 ec       	ldi	r24, 0xC3	; 195
     f5e:	99 e0       	ldi	r25, 0x09	; 9
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <Lcd_Initialize+0x38>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <Lcd_Initialize+0x3e>
     f66:	00 00       	nop
	_delay_ms(10);
	Lcd_Send_cmd(LCD_FUNCTION_SET); //4bit mode
     f68:	88 e2       	ldi	r24, 0x28	; 40
     f6a:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
     f6e:	89 ef       	ldi	r24, 0xF9	; 249
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <Lcd_Initialize+0x4a>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <Lcd_Initialize+0x50>
     f78:	00 00       	nop
	_delay_ms(1);
	Lcd_Send_cmd(LCD_CURSOR_ON);//display on cursor on
     f7a:	8e e0       	ldi	r24, 0x0E	; 14
     f7c:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
     f80:	89 ef       	ldi	r24, 0xF9	; 249
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <Lcd_Initialize+0x5c>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <Lcd_Initialize+0x62>
     f8a:	00 00       	nop
	_delay_ms(1);
	Lcd_Send_cmd(LCD_CLEAR_DISPLAY);//clear the screen
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
     f92:	83 ec       	ldi	r24, 0xC3	; 195
     f94:	99 e0       	ldi	r25, 0x09	; 9
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <Lcd_Initialize+0x6e>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <Lcd_Initialize+0x74>
     f9c:	00 00       	nop
	_delay_ms(10);
	Lcd_Send_cmd(LCD_ENTRY_MODE_SET); //entry mode
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
     fa4:	89 ef       	ldi	r24, 0xF9	; 249
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <Lcd_Initialize+0x80>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <Lcd_Initialize+0x86>
     fae:	00 00       	nop
	_delay_ms(1);


}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <Lcd_Clear_Screen>:

void Lcd_Clear_Screen(void)
{
    Lcd_Send_cmd(LCD_CLEAR_DISPLAY);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
     fbc:	83 ef       	ldi	r24, 0xF3	; 243
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <Lcd_Clear_Screen+0xa>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <Lcd_Clear_Screen+0x10>
     fc6:	00 00       	nop
    _delay_ms(2);       // Clear display needs extra time
}
     fc8:	08 95       	ret

00000fca <Lcd_send_string>:

void Lcd_send_string(const uint8_t *data)
{
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
    while (*data != '\0') {
     fd0:	88 81       	ld	r24, Y
     fd2:	88 23       	and	r24, r24
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <Lcd_send_string+0x18>
{
    Lcd_Send_cmd(LCD_CLEAR_DISPLAY);
    _delay_ms(2);       // Clear display needs extra time
}

void Lcd_send_string(const uint8_t *data)
     fd6:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\0') {
        Lcd_Send_char(*data++);
     fd8:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    _delay_ms(2);       // Clear display needs extra time
}

void Lcd_send_string(const uint8_t *data)
{
    while (*data != '\0') {
     fdc:	89 91       	ld	r24, Y+
     fde:	88 23       	and	r24, r24
     fe0:	d9 f7       	brne	.-10     	; 0xfd8 <Lcd_send_string+0xe>
        Lcd_Send_char(*data++);
    }
}	
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <Lcd_Set_cursor>:

void Lcd_Set_cursor(unsigned char row , unsigned char column)
{	unsigned char address_line = 0;
	if (row == 1 && column >= 0 && column <= 16)
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	29 f4       	brne	.+10     	; 0xff6 <Lcd_Set_cursor+0xe>
     fec:	61 31       	cpi	r22, 0x11	; 17
     fee:	50 f4       	brcc	.+20     	; 0x1004 <Lcd_Set_cursor+0x1c>
	{
		address_line = 0x80 + column -1;
     ff0:	86 2f       	mov	r24, r22
     ff2:	81 58       	subi	r24, 0x81	; 129
     ff4:	0c c0       	rjmp	.+24     	; 0x100e <Lcd_Set_cursor+0x26>
	}
	else if(row == 2 && column >= 0 && column <= 16)
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	39 f4       	brne	.+14     	; 0x1008 <Lcd_Set_cursor+0x20>
     ffa:	61 31       	cpi	r22, 0x11	; 17
     ffc:	38 f4       	brcc	.+14     	; 0x100c <Lcd_Set_cursor+0x24>
	{
		address_line = 0xC0 + column -1 ;
     ffe:	86 2f       	mov	r24, r22
    1000:	81 54       	subi	r24, 0x41	; 65
    1002:	05 c0       	rjmp	.+10     	; 0x100e <Lcd_Set_cursor+0x26>
	}
	else 
	{
		address_line = 0x80;
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	03 c0       	rjmp	.+6      	; 0x100e <Lcd_Set_cursor+0x26>
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	01 c0       	rjmp	.+2      	; 0x100e <Lcd_Set_cursor+0x26>
    100c:	80 e8       	ldi	r24, 0x80	; 128
	}
	Lcd_Send_cmd(address_line);
    100e:	0e 94 42 07 	call	0xe84	; 0xe84 <Lcd_Send_cmd>
    1012:	08 95       	ret

00001014 <Edit_Timev>:
		
	}
}

void Edit_Timev(void)
{	cli();
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	f8 94       	cli
	unsigned char hours_ones = 0, hours_tens = 0;
	unsigned char minutes_ones = 0, minutes_tens = 0;
	unsigned char seconds_ones = 0, seconds_tens = 0;

	Lcd_Clear_Screen();
    101a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Lcd_Clear_Screen>
	Lcd_Set_cursor(1,1);
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
	Lcd_send_string("Hours = ");
    1026:	87 ec       	ldi	r24, 0xC7	; 199
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	94 e3       	ldi	r25, 0x34	; 52
    1032:	ac e0       	ldi	r26, 0x0C	; 12
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	a0 40       	sbci	r26, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <Edit_Timev+0x20>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <Edit_Timev+0x2a>
    103e:	00 00       	nop
	_delay_ms(500);
	
	do {
		hours_tens = keypad_u8check_press();
    1040:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
	} while (hours_tens < '0' || hours_tens > '9');
    1044:	d8 2f       	mov	r29, r24
    1046:	d0 53       	subi	r29, 0x30	; 48
    1048:	da 30       	cpi	r29, 0x0A	; 10
    104a:	d0 f7       	brcc	.-12     	; 0x1040 <Edit_Timev+0x2c>
	Lcd_Send_char(hours_tens);
    104c:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	91 ee       	ldi	r25, 0xE1	; 225
    1054:	a4 e0       	ldi	r26, 0x04	; 4
    1056:	81 50       	subi	r24, 0x01	; 1
    1058:	90 40       	sbci	r25, 0x00	; 0
    105a:	a0 40       	sbci	r26, 0x00	; 0
    105c:	e1 f7       	brne	.-8      	; 0x1056 <Edit_Timev+0x42>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <Edit_Timev+0x4c>
    1060:	00 00       	nop
	_delay_ms(200);
	hours_tens -= '0';

	do {
		hours_ones = keypad_u8check_press();
    1062:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
	} while (hours_ones < '0' || hours_ones > '9');
    1066:	c8 2f       	mov	r28, r24
    1068:	c0 53       	subi	r28, 0x30	; 48
    106a:	ca 30       	cpi	r28, 0x0A	; 10
    106c:	d0 f7       	brcc	.-12     	; 0x1062 <Edit_Timev+0x4e>
	Lcd_Send_char(hours_ones);
    106e:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	91 ee       	ldi	r25, 0xE1	; 225
    1076:	a4 e0       	ldi	r26, 0x04	; 4
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	90 40       	sbci	r25, 0x00	; 0
    107c:	a0 40       	sbci	r26, 0x00	; 0
    107e:	e1 f7       	brne	.-8      	; 0x1078 <Edit_Timev+0x64>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <Edit_Timev+0x6e>
    1082:	00 00       	nop
	_delay_ms(200);
	hours_ones -= '0';

	hours = (hours_tens * 10) + hours_ones;
    1084:	dd 0f       	add	r29, r29
    1086:	8d 2f       	mov	r24, r29
    1088:	88 0f       	add	r24, r24
    108a:	88 0f       	add	r24, r24
    108c:	d8 0f       	add	r29, r24
    108e:	cd 0f       	add	r28, r29
    1090:	c0 93 48 01 	sts	0x0148, r28
	if (hours > 23) hours = 0;
    1094:	80 91 48 01 	lds	r24, 0x0148
    1098:	88 31       	cpi	r24, 0x18	; 24
    109a:	10 f0       	brcs	.+4      	; 0x10a0 <Edit_Timev+0x8c>
    109c:	10 92 48 01 	sts	0x0148, r1

	Lcd_Clear_Screen();
    10a0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Lcd_Clear_Screen>
	Lcd_Set_cursor(1,1);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
	Lcd_send_string("Minutes = ");
    10ac:	80 ed       	ldi	r24, 0xD0	; 208
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>

	do {
		minutes_tens = keypad_u8check_press();
    10b4:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
	} while (minutes_tens < '0' || minutes_tens > '9');
    10b8:	d8 2f       	mov	r29, r24
    10ba:	d0 53       	subi	r29, 0x30	; 48
    10bc:	da 30       	cpi	r29, 0x0A	; 10
    10be:	d0 f7       	brcc	.-12     	; 0x10b4 <Edit_Timev+0xa0>
	Lcd_Send_char(minutes_tens);
    10c0:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	91 ee       	ldi	r25, 0xE1	; 225
    10c8:	a4 e0       	ldi	r26, 0x04	; 4
    10ca:	81 50       	subi	r24, 0x01	; 1
    10cc:	90 40       	sbci	r25, 0x00	; 0
    10ce:	a0 40       	sbci	r26, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <Edit_Timev+0xb6>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <Edit_Timev+0xc0>
    10d4:	00 00       	nop
	_delay_ms(200);
	minutes_tens -= '0';

	do {
		minutes_ones = keypad_u8check_press();
    10d6:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
	} while (minutes_ones < '0' || minutes_ones > '9');
    10da:	c8 2f       	mov	r28, r24
    10dc:	c0 53       	subi	r28, 0x30	; 48
    10de:	ca 30       	cpi	r28, 0x0A	; 10
    10e0:	d0 f7       	brcc	.-12     	; 0x10d6 <Edit_Timev+0xc2>
	Lcd_Send_char(minutes_ones);
    10e2:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	91 ee       	ldi	r25, 0xE1	; 225
    10ea:	a4 e0       	ldi	r26, 0x04	; 4
    10ec:	81 50       	subi	r24, 0x01	; 1
    10ee:	90 40       	sbci	r25, 0x00	; 0
    10f0:	a0 40       	sbci	r26, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <Edit_Timev+0xd8>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <Edit_Timev+0xe2>
    10f6:	00 00       	nop
	_delay_ms(200);
	minutes_ones -= '0';

	minutes = (minutes_tens * 10) + minutes_ones;
    10f8:	dd 0f       	add	r29, r29
    10fa:	8d 2f       	mov	r24, r29
    10fc:	88 0f       	add	r24, r24
    10fe:	88 0f       	add	r24, r24
    1100:	d8 0f       	add	r29, r24
    1102:	cd 0f       	add	r28, r29
    1104:	c0 93 47 01 	sts	0x0147, r28
	if (minutes > 59) minutes = 0;
    1108:	80 91 47 01 	lds	r24, 0x0147
    110c:	8c 33       	cpi	r24, 0x3C	; 60
    110e:	10 f0       	brcs	.+4      	; 0x1114 <Edit_Timev+0x100>
    1110:	10 92 47 01 	sts	0x0147, r1

	Lcd_Clear_Screen();
    1114:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Lcd_Clear_Screen>
	Lcd_Set_cursor(1,1);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
	Lcd_send_string("Seconds = ");
    1120:	8b ed       	ldi	r24, 0xDB	; 219
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>

	do {
		seconds_tens = keypad_u8check_press();
    1128:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
	} while (seconds_tens < '0' || seconds_tens > '9');
    112c:	d8 2f       	mov	r29, r24
    112e:	d0 53       	subi	r29, 0x30	; 48
    1130:	da 30       	cpi	r29, 0x0A	; 10
    1132:	d0 f7       	brcc	.-12     	; 0x1128 <Edit_Timev+0x114>
	Lcd_Send_char(seconds_tens);
    1134:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	91 ee       	ldi	r25, 0xE1	; 225
    113c:	a4 e0       	ldi	r26, 0x04	; 4
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	a0 40       	sbci	r26, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <Edit_Timev+0x12a>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <Edit_Timev+0x134>
    1148:	00 00       	nop
	_delay_ms(200);
	seconds_tens -= '0';

	do {
		seconds_ones = keypad_u8check_press();
    114a:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
	} while (seconds_ones < '0' || seconds_ones > '9');
    114e:	c8 2f       	mov	r28, r24
    1150:	c0 53       	subi	r28, 0x30	; 48
    1152:	ca 30       	cpi	r28, 0x0A	; 10
    1154:	d0 f7       	brcc	.-12     	; 0x114a <Edit_Timev+0x136>
	Lcd_Send_char(seconds_ones);
    1156:	0e 94 72 07 	call	0xee4	; 0xee4 <Lcd_Send_char>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	91 ee       	ldi	r25, 0xE1	; 225
    115e:	a4 e0       	ldi	r26, 0x04	; 4
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	90 40       	sbci	r25, 0x00	; 0
    1164:	a0 40       	sbci	r26, 0x00	; 0
    1166:	e1 f7       	brne	.-8      	; 0x1160 <Edit_Timev+0x14c>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <Edit_Timev+0x156>
    116a:	00 00       	nop
	_delay_ms(200);
	seconds_ones -= '0';

	counter = (seconds_tens * 10) + seconds_ones;
    116c:	dd 0f       	add	r29, r29
    116e:	8d 2f       	mov	r24, r29
    1170:	88 0f       	add	r24, r24
    1172:	88 0f       	add	r24, r24
    1174:	d8 0f       	add	r29, r24
    1176:	cd 0f       	add	r28, r29
    1178:	c0 93 4a 01 	sts	0x014A, r28
	if (counter > 59) counter = 0;
    117c:	80 91 4a 01 	lds	r24, 0x014A
    1180:	8c 33       	cpi	r24, 0x3C	; 60
    1182:	10 f0       	brcs	.+4      	; 0x1188 <Edit_Timev+0x174>
    1184:	10 92 4a 01 	sts	0x014A, r1


	Lcd_Clear_Screen();
    1188:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Lcd_Clear_Screen>
	Lcd_Set_cursor(1,1);
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
	Lcd_send_string("Time Updated");
    1194:	86 ee       	ldi	r24, 0xE6	; 230
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	99 e6       	ldi	r25, 0x69	; 105
    11a0:	a8 e1       	ldi	r26, 0x18	; 24
    11a2:	81 50       	subi	r24, 0x01	; 1
    11a4:	90 40       	sbci	r25, 0x00	; 0
    11a6:	a0 40       	sbci	r26, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <Edit_Timev+0x18e>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <Edit_Timev+0x198>
    11ac:	00 00       	nop
	_delay_ms(1000);
	sei();
    11ae:	78 94       	sei

	Lcd_Set_cursor(1,1);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
	Lcd_send_string("Press 1 to Edit time");
    11b8:	83 ef       	ldi	r24, 0xF3	; 243
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <__vector_5>:
        }
    }
}

ISR(TIMER2_OVF_vect)
{
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	8f 93       	push	r24
	
	counter++;
    11d2:	80 91 4a 01 	lds	r24, 0x014A
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	80 93 4a 01 	sts	0x014A, r24
}
    11dc:	8f 91       	pop	r24
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti

000011e8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    11e8:	1f 92       	push	r1
    11ea:	0f 92       	push	r0
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	8f 93       	push	r24
	
	flag++;
    11f4:	80 91 49 01 	lds	r24, 0x0149
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	80 93 49 01 	sts	0x0149, r24
	if (flag > 5)
    11fe:	80 91 49 01 	lds	r24, 0x0149
    1202:	86 30       	cpi	r24, 0x06	; 6
    1204:	10 f0       	brcs	.+4      	; 0x120a <__vector_11+0x22>
	flag =0;
    1206:	10 92 49 01 	sts	0x0149, r1
}
    120a:	8f 91       	pop	r24
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <Enable_mux_7seg>:
void Enable_mux_7seg(unsigned char pin)
{
	PORTC |= 0b00111111;          
    1216:	95 b3       	in	r25, 0x15	; 21
    1218:	9f 63       	ori	r25, 0x3F	; 63
    121a:	95 bb       	out	0x15, r25	; 21
	CLEAR_BIT(PORTC, pin);        
    121c:	95 b3       	in	r25, 0x15	; 21
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <Enable_mux_7seg+0x12>
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	8a 95       	dec	r24
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <Enable_mux_7seg+0xe>
    122c:	20 95       	com	r18
    122e:	92 23       	and	r25, r18
    1230:	95 bb       	out	0x15, r25	; 21
}
    1232:	08 95       	ret

00001234 <Update_Time>:


void Update_Time(void)
{
	seconds = counter;
    1234:	80 91 4a 01 	lds	r24, 0x014A
    1238:	80 93 46 01 	sts	0x0146, r24
	if (seconds == 60)
    123c:	80 91 46 01 	lds	r24, 0x0146
    1240:	8c 33       	cpi	r24, 0x3C	; 60
    1242:	39 f4       	brne	.+14     	; 0x1252 <Update_Time+0x1e>
	{
		minutes++;
    1244:	80 91 47 01 	lds	r24, 0x0147
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 47 01 	sts	0x0147, r24
		counter = 0;
    124e:	10 92 4a 01 	sts	0x014A, r1
	}
	if (minutes == 60)
    1252:	80 91 47 01 	lds	r24, 0x0147
    1256:	8c 33       	cpi	r24, 0x3C	; 60
    1258:	39 f4       	brne	.+14     	; 0x1268 <Update_Time+0x34>
	{
		minutes = 0;
    125a:	10 92 47 01 	sts	0x0147, r1
		(hours)++;
    125e:	80 91 48 01 	lds	r24, 0x0148
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 48 01 	sts	0x0148, r24
	}
	if (hours == 24)
    1268:	80 91 48 01 	lds	r24, 0x0148
    126c:	88 31       	cpi	r24, 0x18	; 24
    126e:	11 f4       	brne	.+4      	; 0x1274 <Update_Time+0x40>
	{
		hours = 0;
    1270:	10 92 48 01 	sts	0x0148, r1
    1274:	08 95       	ret

00001276 <main>:
volatile unsigned char seconds = 0;
#define F_CPU 8000000UL
#include "util/delay.h"
int main(void)
{	
	timer2_OVF_init_int();
    1276:	0e 94 21 0b 	call	0x1642	; 0x1642 <timer2_OVF_init_int>
	timer0_OVF_interrupt();
    127a:	0e 94 b5 0a 	call	0x156a	; 0x156a <timer0_OVF_interrupt>
	
	for (int i = 0 ; i <= 5 ; i++)
    127e:	c0 e0       	ldi	r28, 0x00	; 0
    1280:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Dio_VSet_pin_Dir('c',i,"OUTPUT");
    1282:	08 e0       	ldi	r16, 0x08	; 8
    1284:	11 e0       	ldi	r17, 0x01	; 1
    1286:	83 e6       	ldi	r24, 0x63	; 99
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	be 01       	movw	r22, r28
    128c:	a8 01       	movw	r20, r16
    128e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
int main(void)
{	
	timer2_OVF_init_int();
	timer0_OVF_interrupt();
	
	for (int i = 0 ; i <= 5 ; i++)
    1292:	21 96       	adiw	r28, 0x01	; 1
    1294:	c6 30       	cpi	r28, 0x06	; 6
    1296:	d1 05       	cpc	r29, r1
    1298:	b1 f7       	brne	.-20     	; 0x1286 <main+0x10>
	{
		Dio_VSet_pin_Dir('c',i,"OUTPUT");
	}
	Seven_Segment_vintit('b');
    129a:	82 e6       	ldi	r24, 0x62	; 98
    129c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <Seven_Segment_vintit>
	keypad_intialize('d');
    12a0:	84 e6       	ldi	r24, 0x64	; 100
    12a2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <keypad_intialize>
	Lcd_Initialize();
    12a6:	0e 94 94 07 	call	0xf28	; 0xf28 <Lcd_Initialize>

	Lcd_Set_cursor(1,1);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
	Lcd_send_string("Press 1 to Edit time");
    12b2:	83 ef       	ldi	r24, 0xF3	; 243
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>
		Edit_Timev();
		else if (keypad_u8check_press() != 0xFF )
		{
			Lcd_Clear_Screen();
			Lcd_Set_cursor(1,1);
			Lcd_send_string("Wrong choice");
    12ba:	0f e0       	ldi	r16, 0x0F	; 15
    12bc:	11 e0       	ldi	r17, 0x01	; 1
			_delay_ms(500);
			Lcd_Clear_Screen();
			Lcd_Set_cursor(1,1);
			Lcd_send_string("Press 1 to Edit time");	
    12be:	0f 2e       	mov	r0, r31
    12c0:	f3 ef       	ldi	r31, 0xF3	; 243
    12c2:	ef 2e       	mov	r14, r31
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	ff 2e       	mov	r15, r31
    12c8:	f0 2d       	mov	r31, r0
	        Seven_segment_write_by_numb('b',hours % 10);
	        break;
	        // tens minutes
	        case 2:
	        Enable_mux_7seg(2);
	        Seven_segment_write_by_numb('b',minutes / 10);
    12ca:	ca e0       	ldi	r28, 0x0A	; 10
	Lcd_send_string("Press 1 to Edit time");
	
    while(1)
    {	

		Update_Time();
    12cc:	0e 94 1a 09 	call	0x1234	; 0x1234 <Update_Time>
		if (keypad_u8check_press() == '1')
    12d0:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
    12d4:	81 33       	cpi	r24, 0x31	; 49
    12d6:	19 f4       	brne	.+6      	; 0x12de <main+0x68>
		Edit_Timev();
    12d8:	0e 94 0a 08 	call	0x1014	; 0x1014 <Edit_Timev>
    12dc:	1f c0       	rjmp	.+62     	; 0x131c <main+0xa6>
		else if (keypad_u8check_press() != 0xFF )
    12de:	0e 94 88 06 	call	0xd10	; 0xd10 <keypad_u8check_press>
    12e2:	8f 3f       	cpi	r24, 0xFF	; 255
    12e4:	d9 f0       	breq	.+54     	; 0x131c <main+0xa6>
		{
			Lcd_Clear_Screen();
    12e6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Lcd_Clear_Screen>
			Lcd_Set_cursor(1,1);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
			Lcd_send_string("Wrong choice");
    12f2:	c8 01       	movw	r24, r16
    12f4:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	94 e3       	ldi	r25, 0x34	; 52
    12fc:	ac e0       	ldi	r26, 0x0C	; 12
    12fe:	81 50       	subi	r24, 0x01	; 1
    1300:	90 40       	sbci	r25, 0x00	; 0
    1302:	a0 40       	sbci	r26, 0x00	; 0
    1304:	e1 f7       	brne	.-8      	; 0x12fe <main+0x88>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <main+0x92>
    1308:	00 00       	nop
			_delay_ms(500);
			Lcd_Clear_Screen();
    130a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Lcd_Clear_Screen>
			Lcd_Set_cursor(1,1);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Lcd_Set_cursor>
			Lcd_send_string("Press 1 to Edit time");	
    1316:	c7 01       	movw	r24, r14
    1318:	0e 94 e5 07 	call	0xfca	; 0xfca <Lcd_send_string>
		}
		switch(flag)
    131c:	80 91 49 01 	lds	r24, 0x0149
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	51 f1       	breq	.+84     	; 0x1378 <main+0x102>
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	30 f4       	brcc	.+12     	; 0x1334 <main+0xbe>
    1328:	88 23       	and	r24, r24
    132a:	61 f0       	breq	.+24     	; 0x1344 <main+0xce>
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	09 f0       	breq	.+2      	; 0x1332 <main+0xbc>
    1330:	57 c0       	rjmp	.+174    	; 0x13e0 <main+0x16a>
    1332:	15 c0       	rjmp	.+42     	; 0x135e <main+0xe8>
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	d1 f1       	breq	.+116    	; 0x13ac <main+0x136>
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	58 f1       	brcs	.+86     	; 0x1392 <main+0x11c>
    133c:	85 30       	cpi	r24, 0x05	; 5
    133e:	09 f0       	breq	.+2      	; 0x1342 <main+0xcc>
    1340:	4f c0       	rjmp	.+158    	; 0x13e0 <main+0x16a>
    1342:	41 c0       	rjmp	.+130    	; 0x13c6 <main+0x150>
        {
	        // tens hours
	        case 0 :
	        Enable_mux_7seg(0);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 0b 09 	call	0x1216	; 0x1216 <Enable_mux_7seg>
	        Seven_segment_write_by_numb('b',hours / 10);
    134a:	80 91 48 01 	lds	r24, 0x0148
    134e:	6c 2f       	mov	r22, r28
    1350:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodqi4>
    1354:	68 2f       	mov	r22, r24
    1356:	82 e6       	ldi	r24, 0x62	; 98
    1358:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Seven_segment_write_by_numb>
	        break;
    135c:	b7 cf       	rjmp	.-146    	; 0x12cc <main+0x56>
	        // ones hours
	        case 1:
	        Enable_mux_7seg(1);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	0e 94 0b 09 	call	0x1216	; 0x1216 <Enable_mux_7seg>
	        Seven_segment_write_by_numb('b',hours % 10);
    1364:	80 91 48 01 	lds	r24, 0x0148
    1368:	6c 2f       	mov	r22, r28
    136a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodqi4>
    136e:	82 e6       	ldi	r24, 0x62	; 98
    1370:	69 2f       	mov	r22, r25
    1372:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Seven_segment_write_by_numb>
	        break;
    1376:	aa cf       	rjmp	.-172    	; 0x12cc <main+0x56>
	        // tens minutes
	        case 2:
	        Enable_mux_7seg(2);
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	0e 94 0b 09 	call	0x1216	; 0x1216 <Enable_mux_7seg>
	        Seven_segment_write_by_numb('b',minutes / 10);
    137e:	80 91 47 01 	lds	r24, 0x0147
    1382:	6c 2f       	mov	r22, r28
    1384:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodqi4>
    1388:	68 2f       	mov	r22, r24
    138a:	82 e6       	ldi	r24, 0x62	; 98
    138c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Seven_segment_write_by_numb>
	        break;
    1390:	9d cf       	rjmp	.-198    	; 0x12cc <main+0x56>
	        // ones minutes
	        case 3:
	        Enable_mux_7seg(3);
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	0e 94 0b 09 	call	0x1216	; 0x1216 <Enable_mux_7seg>
	        Seven_segment_write_by_numb('b',minutes % 10);
    1398:	80 91 47 01 	lds	r24, 0x0147
    139c:	6c 2f       	mov	r22, r28
    139e:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodqi4>
    13a2:	82 e6       	ldi	r24, 0x62	; 98
    13a4:	69 2f       	mov	r22, r25
    13a6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Seven_segment_write_by_numb>
	        break;
    13aa:	90 cf       	rjmp	.-224    	; 0x12cc <main+0x56>
	        // tens seconds
	        case 4:
	        Enable_mux_7seg(4);
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	0e 94 0b 09 	call	0x1216	; 0x1216 <Enable_mux_7seg>
	        Seven_segment_write_by_numb('b',seconds / 10);
    13b2:	80 91 46 01 	lds	r24, 0x0146
    13b6:	6c 2f       	mov	r22, r28
    13b8:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodqi4>
    13bc:	68 2f       	mov	r22, r24
    13be:	82 e6       	ldi	r24, 0x62	; 98
    13c0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Seven_segment_write_by_numb>
	        break;
    13c4:	83 cf       	rjmp	.-250    	; 0x12cc <main+0x56>
	        // ones seconds
	        case 5:
	        Enable_mux_7seg(5);
    13c6:	85 e0       	ldi	r24, 0x05	; 5
    13c8:	0e 94 0b 09 	call	0x1216	; 0x1216 <Enable_mux_7seg>
	        Seven_segment_write_by_numb('b',seconds % 10);
    13cc:	80 91 46 01 	lds	r24, 0x0146
    13d0:	6c 2f       	mov	r22, r28
    13d2:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodqi4>
    13d6:	82 e6       	ldi	r24, 0x62	; 98
    13d8:	69 2f       	mov	r22, r25
    13da:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Seven_segment_write_by_numb>
	        break;
    13de:	76 cf       	rjmp	.-276    	; 0x12cc <main+0x56>
	        default:
	        flag = 0;
    13e0:	10 92 49 01 	sts	0x0149, r1
	        break;
    13e4:	73 cf       	rjmp	.-282    	; 0x12cc <main+0x56>

000013e6 <Seven_Segment_vintit>:
#include "DIO.h"
#define comman_cathod

void Seven_Segment_vintit(unsigned char port)
{
	DIO_VSet_port_Direction(port,"output");
    13e6:	6c e1       	ldi	r22, 0x1C	; 28
    13e8:	71 e0       	ldi	r23, 0x01	; 1
    13ea:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_VSet_port_Direction>
}
    13ee:	08 95       	ret

000013f0 <Seven_segment_write_by_numb>:

void Seven_segment_write_by_numb(unsigned char port , unsigned char numb)
{  
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	2a 97       	sbiw	r28, 0x0a	; 10
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
	#ifdef comman_cathod
		unsigned char arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
    1404:	de 01       	movw	r26, r28
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	e3 e2       	ldi	r30, 0x23	; 35
    140a:	f1 e0       	ldi	r31, 0x01	; 1
    140c:	9a e0       	ldi	r25, 0x0A	; 10
    140e:	01 90       	ld	r0, Z+
    1410:	0d 92       	st	X+, r0
    1412:	91 50       	subi	r25, 0x01	; 1
    1414:	e1 f7       	brne	.-8      	; 0x140e <Seven_segment_write_by_numb+0x1e>
	#else
		unsigned char arr[10]={~0x3f,~0x06,~0x5b,~0x4f,~0x66,~0x6d,~0x7d,~0x47,~0x7f,~0x6f};
	#endif
	DIO_VWrite_port(port , arr[numb]);
    1416:	fe 01       	movw	r30, r28
    1418:	e6 0f       	add	r30, r22
    141a:	f1 1d       	adc	r31, r1
    141c:	61 81       	ldd	r22, Z+1	; 0x01
    141e:	0e 94 1d 03 	call	0x63a	; 0x63a <DIO_VWrite_port>
}
    1422:	2a 96       	adiw	r28, 0x0a	; 10
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <Seven_segment_vinit_BCD>:


void Seven_segment_vinit_BCD(unsigned char port , const char *nibble)
{
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	18 2f       	mov	r17, r24
    143c:	eb 01       	movw	r28, r22
	if ((strcmp(nibble , "LOW") == 0) || (strcmp(nibble , "low") == 0))
    143e:	cb 01       	movw	r24, r22
    1440:	6d e2       	ldi	r22, 0x2D	; 45
    1442:	71 e0       	ldi	r23, 0x01	; 1
    1444:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    1448:	28 2f       	mov	r18, r24
    144a:	39 2f       	mov	r19, r25
    144c:	21 15       	cp	r18, r1
    144e:	31 05       	cpc	r19, r1
    1450:	51 f0       	breq	.+20     	; 0x1466 <Seven_segment_vinit_BCD+0x32>
    1452:	ce 01       	movw	r24, r28
    1454:	61 e3       	ldi	r22, 0x31	; 49
    1456:	71 e0       	ldi	r23, 0x01	; 1
    1458:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    145c:	28 2f       	mov	r18, r24
    145e:	39 2f       	mov	r19, r25
    1460:	21 15       	cp	r18, r1
    1462:	31 05       	cpc	r19, r1
    1464:	b9 f4       	brne	.+46     	; 0x1494 <Seven_segment_vinit_BCD+0x60>
	{
		Dio_VSet_pin_Dir(port,0,"OUTPUT");
    1466:	c5 e3       	ldi	r28, 0x35	; 53
    1468:	d1 e0       	ldi	r29, 0x01	; 1
    146a:	81 2f       	mov	r24, r17
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	ae 01       	movw	r20, r28
    1470:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
		Dio_VSet_pin_Dir(port,1,"OUTPUT");
    1474:	81 2f       	mov	r24, r17
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	ae 01       	movw	r20, r28
    147a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
		Dio_VSet_pin_Dir(port,2,"OUTPUT");
    147e:	81 2f       	mov	r24, r17
    1480:	62 e0       	ldi	r22, 0x02	; 2
    1482:	ae 01       	movw	r20, r28
    1484:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
		Dio_VSet_pin_Dir(port,3,"OUTPUT");
    1488:	81 2f       	mov	r24, r17
    148a:	63 e0       	ldi	r22, 0x03	; 3
    148c:	ae 01       	movw	r20, r28
    148e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
    1492:	2a c0       	rjmp	.+84     	; 0x14e8 <Seven_segment_vinit_BCD+0xb4>
	}
	else if  ((strcmp(nibble,  "HIGH") == 0) || (strcmp(nibble , "high") == 0))
    1494:	ce 01       	movw	r24, r28
    1496:	6c e3       	ldi	r22, 0x3C	; 60
    1498:	71 e0       	ldi	r23, 0x01	; 1
    149a:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    149e:	28 2f       	mov	r18, r24
    14a0:	39 2f       	mov	r19, r25
    14a2:	21 15       	cp	r18, r1
    14a4:	31 05       	cpc	r19, r1
    14a6:	51 f0       	breq	.+20     	; 0x14bc <Seven_segment_vinit_BCD+0x88>
    14a8:	ce 01       	movw	r24, r28
    14aa:	61 e4       	ldi	r22, 0x41	; 65
    14ac:	71 e0       	ldi	r23, 0x01	; 1
    14ae:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    14b2:	28 2f       	mov	r18, r24
    14b4:	39 2f       	mov	r19, r25
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	b1 f4       	brne	.+44     	; 0x14e8 <Seven_segment_vinit_BCD+0xb4>
	{
		Dio_VSet_pin_Dir(port,4,"OUTPUT");
    14bc:	c5 e3       	ldi	r28, 0x35	; 53
    14be:	d1 e0       	ldi	r29, 0x01	; 1
    14c0:	81 2f       	mov	r24, r17
    14c2:	64 e0       	ldi	r22, 0x04	; 4
    14c4:	ae 01       	movw	r20, r28
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
		Dio_VSet_pin_Dir(port,5,"OUTPUT");
    14ca:	81 2f       	mov	r24, r17
    14cc:	65 e0       	ldi	r22, 0x05	; 5
    14ce:	ae 01       	movw	r20, r28
    14d0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
		Dio_VSet_pin_Dir(port,6,"OUTPUT");
    14d4:	81 2f       	mov	r24, r17
    14d6:	66 e0       	ldi	r22, 0x06	; 6
    14d8:	ae 01       	movw	r20, r28
    14da:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
		Dio_VSet_pin_Dir(port,7,"OUTPUT");
    14de:	81 2f       	mov	r24, r17
    14e0:	67 e0       	ldi	r22, 0x07	; 7
    14e2:	ae 01       	movw	r20, r28
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	}
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	08 95       	ret

000014f0 <Seven_segment_vWrite_BCD>:

void Seven_segment_vWrite_BCD(unsigned char port , unsigned char val , const char *nibble)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	18 2f       	mov	r17, r24
    14fa:	06 2f       	mov	r16, r22
    14fc:	ea 01       	movw	r28, r20
	if ((strcmp(nibble,"LOW") == 0 ) || (strcmp(nibble,"low") == 0))
    14fe:	ca 01       	movw	r24, r20
    1500:	6d e2       	ldi	r22, 0x2D	; 45
    1502:	71 e0       	ldi	r23, 0x01	; 1
    1504:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    1508:	28 2f       	mov	r18, r24
    150a:	39 2f       	mov	r19, r25
    150c:	21 15       	cp	r18, r1
    150e:	31 05       	cpc	r19, r1
    1510:	51 f0       	breq	.+20     	; 0x1526 <Seven_segment_vWrite_BCD+0x36>
    1512:	ce 01       	movw	r24, r28
    1514:	61 e3       	ldi	r22, 0x31	; 49
    1516:	71 e0       	ldi	r23, 0x01	; 1
    1518:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    151c:	28 2f       	mov	r18, r24
    151e:	39 2f       	mov	r19, r25
    1520:	21 15       	cp	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	29 f4       	brne	.+10     	; 0x1530 <Seven_segment_vWrite_BCD+0x40>
	{
		Dio_Write_lowNibble(port , val);
    1526:	81 2f       	mov	r24, r17
    1528:	60 2f       	mov	r22, r16
    152a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Dio_Write_lowNibble>
    152e:	18 c0       	rjmp	.+48     	; 0x1560 <Seven_segment_vWrite_BCD+0x70>
	}
	else if  ((strcmp(nibble,"HIGH") == 0) || (strcmp(nibble,"high") == 0))
    1530:	ce 01       	movw	r24, r28
    1532:	6c e3       	ldi	r22, 0x3C	; 60
    1534:	71 e0       	ldi	r23, 0x01	; 1
    1536:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    153a:	28 2f       	mov	r18, r24
    153c:	39 2f       	mov	r19, r25
    153e:	21 15       	cp	r18, r1
    1540:	31 05       	cpc	r19, r1
    1542:	51 f0       	breq	.+20     	; 0x1558 <Seven_segment_vWrite_BCD+0x68>
    1544:	ce 01       	movw	r24, r28
    1546:	61 e4       	ldi	r22, 0x41	; 65
    1548:	71 e0       	ldi	r23, 0x01	; 1
    154a:	0e 94 44 0b 	call	0x1688	; 0x1688 <strcmp>
    154e:	28 2f       	mov	r18, r24
    1550:	39 2f       	mov	r19, r25
    1552:	21 15       	cp	r18, r1
    1554:	31 05       	cpc	r19, r1
    1556:	21 f4       	brne	.+8      	; 0x1560 <Seven_segment_vWrite_BCD+0x70>
	{
		Dio_Write_highNibble(port , val);
    1558:	81 2f       	mov	r24, r17
    155a:	60 2f       	mov	r22, r16
    155c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Dio_Write_highNibble>
	}
}
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <timer0_OVF_interrupt>:
#include "avr/io.h"
#include "avr/interrupt.h"
void timer0_OVF_interrupt(void)
{	
	/* select OVF mode*/
	CLEAR_BIT(TCCR0,WGM01);
    156a:	83 b7       	in	r24, 0x33	; 51
    156c:	87 7f       	andi	r24, 0xF7	; 247
    156e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,WGM00);
    1570:	83 b7       	in	r24, 0x33	; 51
    1572:	8f 7b       	andi	r24, 0xBF	; 191
    1574:	83 bf       	out	0x33, r24	; 51
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1576:	83 b7       	in	r24, 0x33	; 51
    1578:	81 60       	ori	r24, 0x01	; 1
    157a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
    157c:	83 b7       	in	r24, 0x33	; 51
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);
    1582:	83 b7       	in	r24, 0x33	; 51
    1584:	8b 7f       	andi	r24, 0xFB	; 251
    1586:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	SET_BIT(TIMSK,TOIE0);
    1588:	89 b7       	in	r24, 0x39	; 57
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	89 bf       	out	0x39, r24	; 57
	sei();
    158e:	78 94       	sei
}
    1590:	08 95       	ret

00001592 <timer0_CTC_init_interrupt>:


void timer0_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    1592:	83 b7       	in	r24, 0x33	; 51
    1594:	88 60       	ori	r24, 0x08	; 8
    1596:	83 bf       	out	0x33, r24	; 51
	/* select timer clock */
	CLEAR_BIT(TCCR0,CS00);
    1598:	83 b7       	in	r24, 0x33	; 51
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    159e:	83 b7       	in	r24, 0x33	; 51
    15a0:	84 60       	ori	r24, 0x04	; 4
    15a2:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS01);
    15a4:	83 b7       	in	r24, 0x33	; 51
    15a6:	8d 7f       	andi	r24, 0xFD	; 253
    15a8:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
    15aa:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    15ac:	89 b7       	in	r24, 0x39	; 57
    15ae:	82 60       	ori	r24, 0x02	; 2
    15b0:	89 bf       	out	0x39, r24	; 57
}
    15b2:	08 95       	ret

000015b4 <timer0_CTC_Wave_NonPWM_init>:


void timer0_CTC_Wave_NonPWM_init(unsigned char compare_value )
{
	/* select CTC mode*/
	SET_BIT(TCCR0_,WGM01);
    15b4:	83 b7       	in	r24, 0x33	; 51
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,WGM00);
    15ba:	83 b7       	in	r24, 0x33	; 51
    15bc:	8f 7b       	andi	r24, 0xBF	; 191
    15be:	83 bf       	out	0x33, r24	; 51
	/* select 1024 prescaler */
	SET_BIT(TCCR0_,CS00);
    15c0:	83 b7       	in	r24, 0x33	; 51
    15c2:	81 60       	ori	r24, 0x01	; 1
    15c4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_,CS02);
    15c6:	83 b7       	in	r24, 0x33	; 51
    15c8:	84 60       	ori	r24, 0x04	; 4
    15ca:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS01);
    15cc:	83 b7       	in	r24, 0x33	; 51
    15ce:	8d 7f       	andi	r24, 0xFD	; 253
    15d0:	83 bf       	out	0x33, r24	; 51
	/* Toggle mode*/
	SET_BIT(TCCR0 , COM00);
    15d2:	83 b7       	in	r24, 0x33	; 51
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0 , COM01);
    15d8:	83 b7       	in	r24, 0x33	; 51
    15da:	8f 7d       	andi	r24, 0xDF	; 223
    15dc:	83 bf       	out	0x33, r24	; 51
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    15de:	bb 9a       	sbi	0x17, 3	; 23
}
    15e0:	08 95       	ret

000015e2 <Timer0_fastPwm_init>:


void Timer0_fastPwm_init(void)
{
	/* select fast pwm mode */
	SET_BIT(TCCR0_,WGM01);
    15e2:	83 b7       	in	r24, 0x33	; 51
    15e4:	88 60       	ori	r24, 0x08	; 8
    15e6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_,WGM00);
    15e8:	83 b7       	in	r24, 0x33	; 51
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	83 bf       	out	0x33, r24	; 51
	
	/* select 1 prescaler */
	SET_BIT(TCCR0_,CS00);
    15ee:	83 b7       	in	r24, 0x33	; 51
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS02);
    15f4:	83 b7       	in	r24, 0x33	; 51
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS01);
    15fa:	83 b7       	in	r24, 0x33	; 51
    15fc:	8d 7f       	andi	r24, 0xFD	; 253
    15fe:	83 bf       	out	0x33, r24	; 51
	
	/* select non_inverting mode */
	SET_BIT(TCCR0,COM01);
    1600:	83 b7       	in	r24, 0x33	; 51
    1602:	80 62       	ori	r24, 0x20	; 32
    1604:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
    1606:	83 b7       	in	r24, 0x33	; 51
    1608:	8f 7e       	andi	r24, 0xEF	; 239
    160a:	83 bf       	out	0x33, r24	; 51
	
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    160c:	bb 9a       	sbi	0x17, 3	; 23
}
    160e:	08 95       	ret

00001610 <Timer0_wave_generate>:

void Timer0_wave_generate(unsigned char compare_value)
{
	/* load value in ocr0*/
	OCR0_ = compare_value;
    1610:	8c bf       	out	0x3c, r24	; 60
	
}
    1612:	08 95       	ret

00001614 <Timer0_PhaseCorrect_init>:

void Timer0_PhaseCorrect_init(void)
{
	/* select phase correct pwm mode */
	CLEAR_BIT(TCCR0_,WGM01);
    1614:	83 b7       	in	r24, 0x33	; 51
    1616:	87 7f       	andi	r24, 0xF7	; 247
    1618:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_,WGM00);
    161a:	83 b7       	in	r24, 0x33	; 51
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	83 bf       	out	0x33, r24	; 51
	
	/* select 1 prescaler */
	SET_BIT(TCCR0_,CS00);
    1620:	83 b7       	in	r24, 0x33	; 51
    1622:	81 60       	ori	r24, 0x01	; 1
    1624:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS02);
    1626:	83 b7       	in	r24, 0x33	; 51
    1628:	8b 7f       	andi	r24, 0xFB	; 251
    162a:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_,CS01);
    162c:	83 b7       	in	r24, 0x33	; 51
    162e:	8d 7f       	andi	r24, 0xFD	; 253
    1630:	83 bf       	out	0x33, r24	; 51
	
	/* select functionality mode */
	SET_BIT(TCCR0,COM01);
    1632:	83 b7       	in	r24, 0x33	; 51
    1634:	80 62       	ori	r24, 0x20	; 32
    1636:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,COM00);
    1638:	83 b7       	in	r24, 0x33	; 51
    163a:	8f 7e       	andi	r24, 0xEF	; 239
    163c:	83 bf       	out	0x33, r24	; 51
	
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    163e:	bb 9a       	sbi	0x17, 3	; 23
}
    1640:	08 95       	ret

00001642 <timer2_OVF_init_int>:

void timer2_OVF_init_int(void)
{
	/* select ovf mode */
	CLEAR_BIT(TCCR2,WGM20);
    1642:	85 b5       	in	r24, 0x25	; 37
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,WGM21);
    1648:	85 b5       	in	r24, 0x25	; 37
    164a:	87 7f       	andi	r24, 0xF7	; 247
    164c:	85 bd       	out	0x25, r24	; 37
	/* select prescaler 128 */
	SET_BIT(TCCR2,CS22);
    164e:	85 b5       	in	r24, 0x25	; 37
    1650:	84 60       	ori	r24, 0x04	; 4
    1652:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2,CS21);
    1654:	85 b5       	in	r24, 0x25	; 37
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
    165a:	85 b5       	in	r24, 0x25	; 37
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	85 bd       	out	0x25, r24	; 37
	/* set ass external crystal */
	SET_BIT(ASSR,AS2);
    1660:	82 b5       	in	r24, 0x22	; 34
    1662:	88 60       	ori	r24, 0x08	; 8
    1664:	82 bd       	out	0x22, r24	; 34
	/* SET INTERRUPT */
	SET_BIT(TIMSK,TOIE2);
    1666:	89 b7       	in	r24, 0x39	; 57
    1668:	80 64       	ori	r24, 0x40	; 64
    166a:	89 bf       	out	0x39, r24	; 57
	sei();
    166c:	78 94       	sei
	
	
    166e:	08 95       	ret

00001670 <__udivmodqi4>:
    1670:	99 1b       	sub	r25, r25
    1672:	79 e0       	ldi	r23, 0x09	; 9
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__udivmodqi4_ep>

00001676 <__udivmodqi4_loop>:
    1676:	99 1f       	adc	r25, r25
    1678:	96 17       	cp	r25, r22
    167a:	08 f0       	brcs	.+2      	; 0x167e <__udivmodqi4_ep>
    167c:	96 1b       	sub	r25, r22

0000167e <__udivmodqi4_ep>:
    167e:	88 1f       	adc	r24, r24
    1680:	7a 95       	dec	r23
    1682:	c9 f7       	brne	.-14     	; 0x1676 <__udivmodqi4_loop>
    1684:	80 95       	com	r24
    1686:	08 95       	ret

00001688 <strcmp>:
    1688:	fb 01       	movw	r30, r22
    168a:	dc 01       	movw	r26, r24
    168c:	8d 91       	ld	r24, X+
    168e:	01 90       	ld	r0, Z+
    1690:	80 19       	sub	r24, r0
    1692:	01 10       	cpse	r0, r1
    1694:	d9 f3       	breq	.-10     	; 0x168c <strcmp+0x4>
    1696:	99 0b       	sbc	r25, r25
    1698:	08 95       	ret

0000169a <_exit>:
    169a:	f8 94       	cli

0000169c <__stop_program>:
    169c:	ff cf       	rjmp	.-2      	; 0x169c <__stop_program>
