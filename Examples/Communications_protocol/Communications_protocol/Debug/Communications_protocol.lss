
Communications_protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000511  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000159  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012d  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  00001585  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include <avr/io.h>

int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <UART_vinit>:
void UART_vinit(unsigned short baud)
{
	
	// DEFINE THE baud rate
	
	unsigned short UBRR= (F_CPU/ (16UL * baud))-1;
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	aa 1f       	adc	r26, r26
  9e:	bb 1f       	adc	r27, r27
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	aa 1f       	adc	r26, r26
  a6:	bb 1f       	adc	r27, r27
  a8:	9c 01       	movw	r18, r24
  aa:	ad 01       	movw	r20, r26
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	44 1f       	adc	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	44 1f       	adc	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	72 e1       	ldi	r23, 0x12	; 18
  c0:	8a e7       	ldi	r24, 0x7A	; 122
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 85 00 	call	0x10a	; 0x10a <__udivmodsi4>
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
	UBRRH = (unsigned char) (UBRR >> 8);
  cc:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char) UBRR ;
  ce:	29 b9       	out	0x09, r18	; 9
	
	// enable uart sender and receiver bits
	UCSRB |= (1<<RXEN) | (1<<TXEN);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
	// choose to transmit 8 data bit, no parity bits , 1 stop bit
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  d6:	86 e8       	ldi	r24, 0x86	; 134
  d8:	80 bd       	out	0x20, r24	; 32
}
  da:	08 95       	ret

000000dc <UART_SendChar>:

void UART_SendChar(unsigned char data)
{
	while(!(UCSRA & ( 1 << UDRE)));
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <UART_SendChar>
	UDR = data;
  e0:	8c b9       	out	0x0c, r24	; 12
}
  e2:	08 95       	ret

000000e4 <UART_u8Recieve_data>:

unsigned char UART_u8Recieve_data(void)
{
	while(!(UCSRA & (1<<RXC)));
  e4:	5f 9b       	sbis	0x0b, 7	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <UART_u8Recieve_data>
	return UDR;
  e8:	8c b1       	in	r24, 0x0c	; 12
}
  ea:	08 95       	ret

000000ec <UART_SendString>:

void UART_SendString(const char* str) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	while (*str) {
  f2:	88 81       	ld	r24, Y
  f4:	88 23       	and	r24, r24
  f6:	31 f0       	breq	.+12     	; 0x104 <UART_SendString+0x18>
{
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}

void UART_SendString(const char* str) {
  f8:	21 96       	adiw	r28, 0x01	; 1
	while (*str) {
		UART_SendChar(*str++);
  fa:	0e 94 6e 00 	call	0xdc	; 0xdc <UART_SendChar>
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}

void UART_SendString(const char* str) {
	while (*str) {
  fe:	89 91       	ld	r24, Y+
 100:	88 23       	and	r24, r24
 102:	d9 f7       	brne	.-10     	; 0xfa <UART_SendString+0xe>
		UART_SendChar(*str++);
	}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <__udivmodsi4>:
 10a:	a1 e2       	ldi	r26, 0x21	; 33
 10c:	1a 2e       	mov	r1, r26
 10e:	aa 1b       	sub	r26, r26
 110:	bb 1b       	sub	r27, r27
 112:	fd 01       	movw	r30, r26
 114:	0d c0       	rjmp	.+26     	; 0x130 <__udivmodsi4_ep>

00000116 <__udivmodsi4_loop>:
 116:	aa 1f       	adc	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	ee 1f       	adc	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	a2 17       	cp	r26, r18
 120:	b3 07       	cpc	r27, r19
 122:	e4 07       	cpc	r30, r20
 124:	f5 07       	cpc	r31, r21
 126:	20 f0       	brcs	.+8      	; 0x130 <__udivmodsi4_ep>
 128:	a2 1b       	sub	r26, r18
 12a:	b3 0b       	sbc	r27, r19
 12c:	e4 0b       	sbc	r30, r20
 12e:	f5 0b       	sbc	r31, r21

00000130 <__udivmodsi4_ep>:
 130:	66 1f       	adc	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	88 1f       	adc	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	1a 94       	dec	r1
 13a:	69 f7       	brne	.-38     	; 0x116 <__udivmodsi4_loop>
 13c:	60 95       	com	r22
 13e:	70 95       	com	r23
 140:	80 95       	com	r24
 142:	90 95       	com	r25
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
 148:	bd 01       	movw	r22, r26
 14a:	cf 01       	movw	r24, r30
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
