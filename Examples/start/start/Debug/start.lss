
start.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000006a4  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c3  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000239  00000000  00000000  00001713  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000437  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ab  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e6  00000000  00000000  00002053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 03 	call	0x650	; 0x650 <main>
  8a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led_initialize>:
 */ 
#include "DIO.h"

void led_initialize(unsigned char port , unsigned char bin_numb)
{
	Dio_VSet_pin_Dir(port , bin_numb, "OUTPUT");
  92:	40 e6       	ldi	r20, 0x60	; 96
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	0e 94 58 00 	call	0xb0	; 0xb0 <Dio_VSet_pin_Dir>
	return 0;
}
  9a:	08 95       	ret

0000009c <led_on>:

void led_on(unsigned char port , unsigned char bin_numb)
{
	DIO_vwrite(port,bin_numb,"HIGH");
  9c:	47 e6       	ldi	r20, 0x67	; 103
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vwrite>
}
  a4:	08 95       	ret

000000a6 <led_off>:

void led_off(unsigned char port , unsigned char bin_numb)
{
	DIO_vwrite(port,bin_numb,"LOW");
  a6:	4c e6       	ldi	r20, 0x6C	; 108
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_vwrite>
  ae:	08 95       	ret

000000b0 <Dio_VSet_pin_Dir>:
 */ 
#include "std_macros.h"
#include <string.h>

void Dio_VSet_pin_Dir(unsigned char port, unsigned char reg_numb, const char *dir)
{
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	c8 2f       	mov	r28, r24
  ba:	d6 2f       	mov	r29, r22
  bc:	8a 01       	movw	r16, r20
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
  be:	ca 01       	movw	r24, r20
  c0:	60 e7       	ldi	r22, 0x70	; 112
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
  c8:	28 2f       	mov	r18, r24
  ca:	39 2f       	mov	r19, r25
  cc:	21 15       	cp	r18, r1
  ce:	31 05       	cpc	r19, r1
  d0:	59 f0       	breq	.+22     	; 0xe8 <Dio_VSet_pin_Dir+0x38>
  d2:	c8 01       	movw	r24, r16
  d4:	67 e7       	ldi	r22, 0x77	; 119
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
  dc:	28 2f       	mov	r18, r24
  de:	39 2f       	mov	r19, r25
  e0:	21 15       	cp	r18, r1
  e2:	31 05       	cpc	r19, r1
  e4:	09 f0       	breq	.+2      	; 0xe8 <Dio_VSet_pin_Dir+0x38>
  e6:	4b c0       	rjmp	.+150    	; 0x17e <Dio_VSet_pin_Dir+0xce>
	{
		switch (port)
  e8:	c4 34       	cpi	r28, 0x44	; 68
  ea:	09 f4       	brne	.+2      	; 0xee <Dio_VSet_pin_Dir+0x3e>
  ec:	3c c0       	rjmp	.+120    	; 0x166 <Dio_VSet_pin_Dir+0xb6>
  ee:	c5 34       	cpi	r28, 0x45	; 69
  f0:	40 f4       	brcc	.+16     	; 0x102 <Dio_VSet_pin_Dir+0x52>
  f2:	c2 34       	cpi	r28, 0x42	; 66
  f4:	01 f1       	breq	.+64     	; 0x136 <Dio_VSet_pin_Dir+0x86>
  f6:	c3 34       	cpi	r28, 0x43	; 67
  f8:	50 f5       	brcc	.+84     	; 0x14e <Dio_VSet_pin_Dir+0x9e>
  fa:	c1 34       	cpi	r28, 0x41	; 65
  fc:	09 f0       	breq	.+2      	; 0x100 <Dio_VSet_pin_Dir+0x50>
  fe:	a0 c0       	rjmp	.+320    	; 0x240 <Dio_VSet_pin_Dir+0x190>
 100:	0e c0       	rjmp	.+28     	; 0x11e <Dio_VSet_pin_Dir+0x6e>
 102:	c2 36       	cpi	r28, 0x62	; 98
 104:	c1 f0       	breq	.+48     	; 0x136 <Dio_VSet_pin_Dir+0x86>
 106:	c3 36       	cpi	r28, 0x63	; 99
 108:	20 f4       	brcc	.+8      	; 0x112 <Dio_VSet_pin_Dir+0x62>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	09 f0       	breq	.+2      	; 0x110 <Dio_VSet_pin_Dir+0x60>
 10e:	98 c0       	rjmp	.+304    	; 0x240 <Dio_VSet_pin_Dir+0x190>
 110:	06 c0       	rjmp	.+12     	; 0x11e <Dio_VSet_pin_Dir+0x6e>
 112:	c3 36       	cpi	r28, 0x63	; 99
 114:	e1 f0       	breq	.+56     	; 0x14e <Dio_VSet_pin_Dir+0x9e>
 116:	c4 36       	cpi	r28, 0x64	; 100
 118:	09 f0       	breq	.+2      	; 0x11c <Dio_VSet_pin_Dir+0x6c>
 11a:	92 c0       	rjmp	.+292    	; 0x240 <Dio_VSet_pin_Dir+0x190>
 11c:	24 c0       	rjmp	.+72     	; 0x166 <Dio_VSet_pin_Dir+0xb6>
		{
			case 'A':
			case 'a':
				SET_BIT(DDRA_, reg_numb);
 11e:	4a b3       	in	r20, 0x1a	; 26
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	c9 01       	movw	r24, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <Dio_VSet_pin_Dir+0x7c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	da 95       	dec	r29
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Dio_VSet_pin_Dir+0x78>
 130:	84 2b       	or	r24, r20
 132:	8a bb       	out	0x1a, r24	; 26
				break;
 134:	85 c0       	rjmp	.+266    	; 0x240 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
				SET_BIT(DDRB_, reg_numb);
 136:	47 b3       	in	r20, 0x17	; 23
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	c9 01       	movw	r24, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Dio_VSet_pin_Dir+0x94>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	da 95       	dec	r29
 146:	e2 f7       	brpl	.-8      	; 0x140 <Dio_VSet_pin_Dir+0x90>
 148:	84 2b       	or	r24, r20
 14a:	87 bb       	out	0x17, r24	; 23
				break;
 14c:	79 c0       	rjmp	.+242    	; 0x240 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
				SET_BIT(DDRC_, reg_numb);
 14e:	44 b3       	in	r20, 0x14	; 20
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	c9 01       	movw	r24, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <Dio_VSet_pin_Dir+0xac>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	da 95       	dec	r29
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Dio_VSet_pin_Dir+0xa8>
 160:	84 2b       	or	r24, r20
 162:	84 bb       	out	0x14, r24	; 20
				break;
 164:	6d c0       	rjmp	.+218    	; 0x240 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
				SET_BIT(DDRD_, reg_numb);
 166:	41 b3       	in	r20, 0x11	; 17
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	c9 01       	movw	r24, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <Dio_VSet_pin_Dir+0xc4>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	da 95       	dec	r29
 176:	e2 f7       	brpl	.-8      	; 0x170 <Dio_VSet_pin_Dir+0xc0>
 178:	84 2b       	or	r24, r20
 17a:	81 bb       	out	0x11, r24	; 17
				break;
 17c:	61 c0       	rjmp	.+194    	; 0x240 <Dio_VSet_pin_Dir+0x190>
			default:
				break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
 17e:	c8 01       	movw	r24, r16
 180:	6e e7       	ldi	r22, 0x7E	; 126
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
 188:	28 2f       	mov	r18, r24
 18a:	39 2f       	mov	r19, r25
 18c:	21 15       	cp	r18, r1
 18e:	31 05       	cpc	r19, r1
 190:	59 f0       	breq	.+22     	; 0x1a8 <Dio_VSet_pin_Dir+0xf8>
 192:	c8 01       	movw	r24, r16
 194:	64 e8       	ldi	r22, 0x84	; 132
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
 19c:	28 2f       	mov	r18, r24
 19e:	39 2f       	mov	r19, r25
 1a0:	21 15       	cp	r18, r1
 1a2:	31 05       	cpc	r19, r1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <Dio_VSet_pin_Dir+0xf8>
 1a6:	4c c0       	rjmp	.+152    	; 0x240 <Dio_VSet_pin_Dir+0x190>
	{
		switch (port)
 1a8:	c4 34       	cpi	r28, 0x44	; 68
 1aa:	09 f4       	brne	.+2      	; 0x1ae <Dio_VSet_pin_Dir+0xfe>
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <Dio_VSet_pin_Dir+0x178>
 1ae:	c5 34       	cpi	r28, 0x45	; 69
 1b0:	40 f4       	brcc	.+16     	; 0x1c2 <Dio_VSet_pin_Dir+0x112>
 1b2:	c2 34       	cpi	r28, 0x42	; 66
 1b4:	f9 f0       	breq	.+62     	; 0x1f4 <Dio_VSet_pin_Dir+0x144>
 1b6:	c3 34       	cpi	r28, 0x43	; 67
 1b8:	50 f5       	brcc	.+84     	; 0x20e <Dio_VSet_pin_Dir+0x15e>
 1ba:	c1 34       	cpi	r28, 0x41	; 65
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <Dio_VSet_pin_Dir+0x110>
 1be:	40 c0       	rjmp	.+128    	; 0x240 <Dio_VSet_pin_Dir+0x190>
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <Dio_VSet_pin_Dir+0x12a>
 1c2:	c2 36       	cpi	r28, 0x62	; 98
 1c4:	b9 f0       	breq	.+46     	; 0x1f4 <Dio_VSet_pin_Dir+0x144>
 1c6:	c3 36       	cpi	r28, 0x63	; 99
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <Dio_VSet_pin_Dir+0x120>
 1ca:	c1 36       	cpi	r28, 0x61	; 97
 1cc:	c9 f5       	brne	.+114    	; 0x240 <Dio_VSet_pin_Dir+0x190>
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <Dio_VSet_pin_Dir+0x12a>
 1d0:	c3 36       	cpi	r28, 0x63	; 99
 1d2:	e9 f0       	breq	.+58     	; 0x20e <Dio_VSet_pin_Dir+0x15e>
 1d4:	c4 36       	cpi	r28, 0x64	; 100
 1d6:	a1 f5       	brne	.+104    	; 0x240 <Dio_VSet_pin_Dir+0x190>
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <Dio_VSet_pin_Dir+0x178>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(DDRA_, reg_numb);
 1da:	4a b3       	in	r20, 0x1a	; 26
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	c9 01       	movw	r24, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_VSet_pin_Dir+0x138>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	da 95       	dec	r29
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_VSet_pin_Dir+0x134>
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	8a bb       	out	0x1a, r24	; 26
			break;
 1f2:	26 c0       	rjmp	.+76     	; 0x240 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
			CLEAR_BIT(DDRB_, reg_numb);
 1f4:	47 b3       	in	r20, 0x17	; 23
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	c9 01       	movw	r24, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <Dio_VSet_pin_Dir+0x152>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	da 95       	dec	r29
 204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_VSet_pin_Dir+0x14e>
 206:	80 95       	com	r24
 208:	84 23       	and	r24, r20
 20a:	87 bb       	out	0x17, r24	; 23
			break;
 20c:	19 c0       	rjmp	.+50     	; 0x240 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
			CLEAR_BIT(DDRC_, reg_numb);
 20e:	44 b3       	in	r20, 0x14	; 20
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	c9 01       	movw	r24, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <Dio_VSet_pin_Dir+0x16c>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	da 95       	dec	r29
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Dio_VSet_pin_Dir+0x168>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	84 bb       	out	0x14, r24	; 20
			break;
 226:	0c c0       	rjmp	.+24     	; 0x240 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(DDRD_, reg_numb);
 228:	41 b3       	in	r20, 0x11	; 17
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	c9 01       	movw	r24, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <Dio_VSet_pin_Dir+0x186>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	da 95       	dec	r29
 238:	e2 f7       	brpl	.-8      	; 0x232 <Dio_VSet_pin_Dir+0x182>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			break;  // Handle unexpected port values
		}
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <DIO_vwrite>:

void DIO_vwrite(unsigned char port , unsigned char reg_numb, const char *val)
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	c8 2f       	mov	r28, r24
 254:	d6 2f       	mov	r29, r22
 256:	8a 01       	movw	r16, r20
	if (((strcmp(val, "HIGH")) == 0) || ((strcmp(val, "high")) == 0))
 258:	ca 01       	movw	r24, r20
 25a:	6a e8       	ldi	r22, 0x8A	; 138
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
 262:	28 2f       	mov	r18, r24
 264:	39 2f       	mov	r19, r25
 266:	21 15       	cp	r18, r1
 268:	31 05       	cpc	r19, r1
 26a:	59 f0       	breq	.+22     	; 0x282 <DIO_vwrite+0x38>
 26c:	c8 01       	movw	r24, r16
 26e:	6f e8       	ldi	r22, 0x8F	; 143
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
 276:	28 2f       	mov	r18, r24
 278:	39 2f       	mov	r19, r25
 27a:	21 15       	cp	r18, r1
 27c:	31 05       	cpc	r19, r1
 27e:	09 f0       	breq	.+2      	; 0x282 <DIO_vwrite+0x38>
 280:	4b c0       	rjmp	.+150    	; 0x318 <DIO_vwrite+0xce>
	{
		switch (port)
 282:	c4 34       	cpi	r28, 0x44	; 68
 284:	09 f4       	brne	.+2      	; 0x288 <DIO_vwrite+0x3e>
 286:	3c c0       	rjmp	.+120    	; 0x300 <DIO_vwrite+0xb6>
 288:	c5 34       	cpi	r28, 0x45	; 69
 28a:	40 f4       	brcc	.+16     	; 0x29c <DIO_vwrite+0x52>
 28c:	c2 34       	cpi	r28, 0x42	; 66
 28e:	01 f1       	breq	.+64     	; 0x2d0 <DIO_vwrite+0x86>
 290:	c3 34       	cpi	r28, 0x43	; 67
 292:	50 f5       	brcc	.+84     	; 0x2e8 <DIO_vwrite+0x9e>
 294:	c1 34       	cpi	r28, 0x41	; 65
 296:	09 f0       	breq	.+2      	; 0x29a <DIO_vwrite+0x50>
 298:	a0 c0       	rjmp	.+320    	; 0x3da <DIO_vwrite+0x190>
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <DIO_vwrite+0x6e>
 29c:	c2 36       	cpi	r28, 0x62	; 98
 29e:	c1 f0       	breq	.+48     	; 0x2d0 <DIO_vwrite+0x86>
 2a0:	c3 36       	cpi	r28, 0x63	; 99
 2a2:	20 f4       	brcc	.+8      	; 0x2ac <DIO_vwrite+0x62>
 2a4:	c1 36       	cpi	r28, 0x61	; 97
 2a6:	09 f0       	breq	.+2      	; 0x2aa <DIO_vwrite+0x60>
 2a8:	98 c0       	rjmp	.+304    	; 0x3da <DIO_vwrite+0x190>
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <DIO_vwrite+0x6e>
 2ac:	c3 36       	cpi	r28, 0x63	; 99
 2ae:	e1 f0       	breq	.+56     	; 0x2e8 <DIO_vwrite+0x9e>
 2b0:	c4 36       	cpi	r28, 0x64	; 100
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <DIO_vwrite+0x6c>
 2b4:	92 c0       	rjmp	.+292    	; 0x3da <DIO_vwrite+0x190>
 2b6:	24 c0       	rjmp	.+72     	; 0x300 <DIO_vwrite+0xb6>
		{
			case 'A':
			case 'a':
			SET_BIT(PORTA_, reg_numb);
 2b8:	4b b3       	in	r20, 0x1b	; 27
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	c9 01       	movw	r24, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vwrite+0x7c>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	da 95       	dec	r29
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vwrite+0x78>
 2ca:	84 2b       	or	r24, r20
 2cc:	8b bb       	out	0x1b, r24	; 27
			break;
 2ce:	85 c0       	rjmp	.+266    	; 0x3da <DIO_vwrite+0x190>
			case 'B':
			case 'b':
			SET_BIT(PORTB_, reg_numb);
 2d0:	48 b3       	in	r20, 0x18	; 24
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	c9 01       	movw	r24, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_vwrite+0x94>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	da 95       	dec	r29
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_vwrite+0x90>
 2e2:	84 2b       	or	r24, r20
 2e4:	88 bb       	out	0x18, r24	; 24
			break;
 2e6:	79 c0       	rjmp	.+242    	; 0x3da <DIO_vwrite+0x190>
			case 'C':
			case 'c':
			SET_BIT(PORTC_, reg_numb);
 2e8:	45 b3       	in	r20, 0x15	; 21
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	c9 01       	movw	r24, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_vwrite+0xac>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	da 95       	dec	r29
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_vwrite+0xa8>
 2fa:	84 2b       	or	r24, r20
 2fc:	85 bb       	out	0x15, r24	; 21
			break;
 2fe:	6d c0       	rjmp	.+218    	; 0x3da <DIO_vwrite+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			SET_BIT(PORTD_, reg_numb);
 300:	42 b3       	in	r20, 0x12	; 18
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	c9 01       	movw	r24, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_vwrite+0xc4>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	da 95       	dec	r29
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_vwrite+0xc0>
 312:	84 2b       	or	r24, r20
 314:	82 bb       	out	0x12, r24	; 18
			break;
 316:	61 c0       	rjmp	.+194    	; 0x3da <DIO_vwrite+0x190>
			default:
			break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(val, "LOW")) == 0) || ((strcmp(val, "low")) == 0))
 318:	c8 01       	movw	r24, r16
 31a:	64 e9       	ldi	r22, 0x94	; 148
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
 322:	28 2f       	mov	r18, r24
 324:	39 2f       	mov	r19, r25
 326:	21 15       	cp	r18, r1
 328:	31 05       	cpc	r19, r1
 32a:	59 f0       	breq	.+22     	; 0x342 <DIO_vwrite+0xf8>
 32c:	c8 01       	movw	r24, r16
 32e:	68 e9       	ldi	r22, 0x98	; 152
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	0e 94 47 03 	call	0x68e	; 0x68e <strcmp>
 336:	28 2f       	mov	r18, r24
 338:	39 2f       	mov	r19, r25
 33a:	21 15       	cp	r18, r1
 33c:	31 05       	cpc	r19, r1
 33e:	09 f0       	breq	.+2      	; 0x342 <DIO_vwrite+0xf8>
 340:	4c c0       	rjmp	.+152    	; 0x3da <DIO_vwrite+0x190>
	{
		switch (port)
 342:	c4 34       	cpi	r28, 0x44	; 68
 344:	09 f4       	brne	.+2      	; 0x348 <DIO_vwrite+0xfe>
 346:	3d c0       	rjmp	.+122    	; 0x3c2 <DIO_vwrite+0x178>
 348:	c5 34       	cpi	r28, 0x45	; 69
 34a:	40 f4       	brcc	.+16     	; 0x35c <DIO_vwrite+0x112>
 34c:	c2 34       	cpi	r28, 0x42	; 66
 34e:	f9 f0       	breq	.+62     	; 0x38e <DIO_vwrite+0x144>
 350:	c3 34       	cpi	r28, 0x43	; 67
 352:	50 f5       	brcc	.+84     	; 0x3a8 <DIO_vwrite+0x15e>
 354:	c1 34       	cpi	r28, 0x41	; 65
 356:	09 f0       	breq	.+2      	; 0x35a <DIO_vwrite+0x110>
 358:	40 c0       	rjmp	.+128    	; 0x3da <DIO_vwrite+0x190>
 35a:	0c c0       	rjmp	.+24     	; 0x374 <DIO_vwrite+0x12a>
 35c:	c2 36       	cpi	r28, 0x62	; 98
 35e:	b9 f0       	breq	.+46     	; 0x38e <DIO_vwrite+0x144>
 360:	c3 36       	cpi	r28, 0x63	; 99
 362:	18 f4       	brcc	.+6      	; 0x36a <DIO_vwrite+0x120>
 364:	c1 36       	cpi	r28, 0x61	; 97
 366:	c9 f5       	brne	.+114    	; 0x3da <DIO_vwrite+0x190>
 368:	05 c0       	rjmp	.+10     	; 0x374 <DIO_vwrite+0x12a>
 36a:	c3 36       	cpi	r28, 0x63	; 99
 36c:	e9 f0       	breq	.+58     	; 0x3a8 <DIO_vwrite+0x15e>
 36e:	c4 36       	cpi	r28, 0x64	; 100
 370:	a1 f5       	brne	.+104    	; 0x3da <DIO_vwrite+0x190>
 372:	27 c0       	rjmp	.+78     	; 0x3c2 <DIO_vwrite+0x178>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(PORTA_, reg_numb);
 374:	4b b3       	in	r20, 0x1b	; 27
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	c9 01       	movw	r24, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_vwrite+0x138>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	da 95       	dec	r29
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_vwrite+0x134>
 386:	80 95       	com	r24
 388:	84 23       	and	r24, r20
 38a:	8b bb       	out	0x1b, r24	; 27
			break;
 38c:	26 c0       	rjmp	.+76     	; 0x3da <DIO_vwrite+0x190>
			case 'B':
			case 'b':
			CLEAR_BIT(PORTB_, reg_numb);
 38e:	48 b3       	in	r20, 0x18	; 24
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	c9 01       	movw	r24, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_vwrite+0x152>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	da 95       	dec	r29
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_vwrite+0x14e>
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	88 bb       	out	0x18, r24	; 24
			break;
 3a6:	19 c0       	rjmp	.+50     	; 0x3da <DIO_vwrite+0x190>
			case 'C':
			case 'c':
			CLEAR_BIT(PORTC_, reg_numb);
 3a8:	45 b3       	in	r20, 0x15	; 21
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	c9 01       	movw	r24, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_vwrite+0x16c>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	da 95       	dec	r29
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_vwrite+0x168>
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	85 bb       	out	0x15, r24	; 21
			break;
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <DIO_vwrite+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(PORTD_, reg_numb);
 3c2:	42 b3       	in	r20, 0x12	; 18
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	c9 01       	movw	r24, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_vwrite+0x186>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	da 95       	dec	r29
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_vwrite+0x182>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	82 bb       	out	0x12, r24	; 18
			default:
			break;  // Handle unexpected port values
		}
	}
	
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	08 95       	ret

000003e4 <DIO_vToggle>:

void DIO_vToggle(unsigned char port , unsigned char reg_numb)
{
	switch (port)
 3e4:	84 34       	cpi	r24, 0x44	; 68
 3e6:	09 f4       	brne	.+2      	; 0x3ea <DIO_vToggle+0x6>
 3e8:	3d c0       	rjmp	.+122    	; 0x464 <DIO_vToggle+0x80>
 3ea:	85 34       	cpi	r24, 0x45	; 69
 3ec:	40 f4       	brcc	.+16     	; 0x3fe <DIO_vToggle+0x1a>
 3ee:	82 34       	cpi	r24, 0x42	; 66
 3f0:	f9 f0       	breq	.+62     	; 0x430 <DIO_vToggle+0x4c>
 3f2:	83 34       	cpi	r24, 0x43	; 67
 3f4:	50 f5       	brcc	.+84     	; 0x44a <DIO_vToggle+0x66>
 3f6:	81 34       	cpi	r24, 0x41	; 65
 3f8:	09 f0       	breq	.+2      	; 0x3fc <DIO_vToggle+0x18>
 3fa:	40 c0       	rjmp	.+128    	; 0x47c <DIO_vToggle+0x98>
 3fc:	0c c0       	rjmp	.+24     	; 0x416 <DIO_vToggle+0x32>
 3fe:	82 36       	cpi	r24, 0x62	; 98
 400:	b9 f0       	breq	.+46     	; 0x430 <DIO_vToggle+0x4c>
 402:	83 36       	cpi	r24, 0x63	; 99
 404:	18 f4       	brcc	.+6      	; 0x40c <DIO_vToggle+0x28>
 406:	81 36       	cpi	r24, 0x61	; 97
 408:	c9 f5       	brne	.+114    	; 0x47c <DIO_vToggle+0x98>
 40a:	05 c0       	rjmp	.+10     	; 0x416 <DIO_vToggle+0x32>
 40c:	83 36       	cpi	r24, 0x63	; 99
 40e:	e9 f0       	breq	.+58     	; 0x44a <DIO_vToggle+0x66>
 410:	84 36       	cpi	r24, 0x64	; 100
 412:	a1 f5       	brne	.+104    	; 0x47c <DIO_vToggle+0x98>
 414:	27 c0       	rjmp	.+78     	; 0x464 <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA_, reg_numb);
 416:	2b b3       	in	r18, 0x1b	; 27
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	ac 01       	movw	r20, r24
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_vToggle+0x40>
 420:	44 0f       	add	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_vToggle+0x3c>
 428:	ba 01       	movw	r22, r20
 42a:	62 27       	eor	r22, r18
 42c:	6b bb       	out	0x1b, r22	; 27
		break;
 42e:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB_, reg_numb);
 430:	28 b3       	in	r18, 0x18	; 24
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	ac 01       	movw	r20, r24
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_vToggle+0x5a>
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_vToggle+0x56>
 442:	ba 01       	movw	r22, r20
 444:	62 27       	eor	r22, r18
 446:	68 bb       	out	0x18, r22	; 24
		break;
 448:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC_, reg_numb);
 44a:	25 b3       	in	r18, 0x15	; 21
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	ac 01       	movw	r20, r24
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_vToggle+0x74>
 454:	44 0f       	add	r20, r20
 456:	55 1f       	adc	r21, r21
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_vToggle+0x70>
 45c:	ba 01       	movw	r22, r20
 45e:	62 27       	eor	r22, r18
 460:	65 bb       	out	0x15, r22	; 21
		break;
 462:	08 95       	ret
		case 'D':   // Fixed inconsistency
		case 'd':
		TOG_BIT(PORTD_, reg_numb);
 464:	22 b3       	in	r18, 0x12	; 18
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	ac 01       	movw	r20, r24
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_vToggle+0x8e>
 46e:	44 0f       	add	r20, r20
 470:	55 1f       	adc	r21, r21
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_vToggle+0x8a>
 476:	ba 01       	movw	r22, r20
 478:	62 27       	eor	r22, r18
 47a:	62 bb       	out	0x12, r22	; 18
 47c:	08 95       	ret

0000047e <DIO_u8Read_pin>:
}

unsigned char DIO_u8Read_pin(unsigned char port , unsigned char reg_numb)
{
	
	switch (port)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	09 f4       	brne	.+2      	; 0x484 <DIO_u8Read_pin+0x6>
 482:	4e c0       	rjmp	.+156    	; 0x520 <DIO_u8Read_pin+0xa2>
 484:	85 34       	cpi	r24, 0x45	; 69
 486:	40 f4       	brcc	.+16     	; 0x498 <DIO_u8Read_pin+0x1a>
 488:	82 34       	cpi	r24, 0x42	; 66
 48a:	31 f1       	breq	.+76     	; 0x4d8 <DIO_u8Read_pin+0x5a>
 48c:	83 34       	cpi	r24, 0x43	; 67
 48e:	b0 f5       	brcc	.+108    	; 0x4fc <DIO_u8Read_pin+0x7e>
 490:	81 34       	cpi	r24, 0x41	; 65
 492:	09 f0       	breq	.+2      	; 0x496 <DIO_u8Read_pin+0x18>
 494:	57 c0       	rjmp	.+174    	; 0x544 <DIO_u8Read_pin+0xc6>
 496:	0e c0       	rjmp	.+28     	; 0x4b4 <DIO_u8Read_pin+0x36>
 498:	82 36       	cpi	r24, 0x62	; 98
 49a:	f1 f0       	breq	.+60     	; 0x4d8 <DIO_u8Read_pin+0x5a>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	20 f4       	brcc	.+8      	; 0x4a8 <DIO_u8Read_pin+0x2a>
 4a0:	81 36       	cpi	r24, 0x61	; 97
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <DIO_u8Read_pin+0x28>
 4a4:	4f c0       	rjmp	.+158    	; 0x544 <DIO_u8Read_pin+0xc6>
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <DIO_u8Read_pin+0x36>
 4a8:	83 36       	cpi	r24, 0x63	; 99
 4aa:	41 f1       	breq	.+80     	; 0x4fc <DIO_u8Read_pin+0x7e>
 4ac:	84 36       	cpi	r24, 0x64	; 100
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <DIO_u8Read_pin+0x34>
 4b0:	49 c0       	rjmp	.+146    	; 0x544 <DIO_u8Read_pin+0xc6>
 4b2:	36 c0       	rjmp	.+108    	; 0x520 <DIO_u8Read_pin+0xa2>
	{
		case 'A':
		case 'a':
		return READ_BIT(PINA_, reg_numb);
 4b4:	29 b3       	in	r18, 0x19	; 25
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	06 2e       	mov	r0, r22
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8Read_pin+0x44>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8Read_pin+0x40>
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	82 23       	and	r24, r18
 4ca:	93 23       	and	r25, r19
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_u8Read_pin+0x54>
 4ce:	95 95       	asr	r25
 4d0:	87 95       	ror	r24
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_u8Read_pin+0x50>
 4d6:	08 95       	ret
		break;
		case 'B':
		case 'b':
		return READ_BIT(PINB_, reg_numb);
 4d8:	26 b3       	in	r18, 0x16	; 22
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	06 2e       	mov	r0, r22
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_u8Read_pin+0x68>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_u8Read_pin+0x64>
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	82 23       	and	r24, r18
 4ee:	93 23       	and	r25, r19
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_u8Read_pin+0x78>
 4f2:	95 95       	asr	r25
 4f4:	87 95       	ror	r24
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_u8Read_pin+0x74>
 4fa:	08 95       	ret
		break;
		case 'C':
		case 'c':
		return READ_BIT(PINC_, reg_numb);
 4fc:	23 b3       	in	r18, 0x13	; 19
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	06 2e       	mov	r0, r22
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_u8Read_pin+0x8c>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_u8Read_pin+0x88>
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	82 23       	and	r24, r18
 512:	93 23       	and	r25, r19
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_u8Read_pin+0x9c>
 516:	95 95       	asr	r25
 518:	87 95       	ror	r24
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_u8Read_pin+0x98>
 51e:	08 95       	ret
		break;
		case 'D':   // Fixed inconsistency
		case 'd':
		return READ_BIT(PIND_, reg_numb);
 520:	20 b3       	in	r18, 0x10	; 16
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	06 2e       	mov	r0, r22
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_u8Read_pin+0xb0>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	0a 94       	dec	r0
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_u8Read_pin+0xac>
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	82 23       	and	r24, r18
 536:	93 23       	and	r25, r19
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_u8Read_pin+0xc0>
 53a:	95 95       	asr	r25
 53c:	87 95       	ror	r24
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_u8Read_pin+0xbc>
 542:	08 95       	ret
		break;
		default:
		break;  // Handle unexpected port values
	}
}
 544:	08 95       	ret

00000546 <DIO_VSet_port_Direction>:


void DIO_VSet_port_Direction(unsigned char port , unsigned char dir)
{
	switch(port)
 546:	84 34       	cpi	r24, 0x44	; 68
 548:	d9 f0       	breq	.+54     	; 0x580 <DIO_VSet_port_Direction+0x3a>
 54a:	85 34       	cpi	r24, 0x45	; 69
 54c:	38 f4       	brcc	.+14     	; 0x55c <DIO_VSet_port_Direction+0x16>
 54e:	82 34       	cpi	r24, 0x42	; 66
 550:	99 f0       	breq	.+38     	; 0x578 <DIO_VSet_port_Direction+0x32>
 552:	83 34       	cpi	r24, 0x43	; 67
 554:	98 f4       	brcc	.+38     	; 0x57c <DIO_VSet_port_Direction+0x36>
 556:	81 34       	cpi	r24, 0x41	; 65
 558:	a1 f4       	brne	.+40     	; 0x582 <DIO_VSet_port_Direction+0x3c>
 55a:	0c c0       	rjmp	.+24     	; 0x574 <DIO_VSet_port_Direction+0x2e>
 55c:	82 36       	cpi	r24, 0x62	; 98
 55e:	61 f0       	breq	.+24     	; 0x578 <DIO_VSet_port_Direction+0x32>
 560:	83 36       	cpi	r24, 0x63	; 99
 562:	18 f4       	brcc	.+6      	; 0x56a <DIO_VSet_port_Direction+0x24>
 564:	81 36       	cpi	r24, 0x61	; 97
 566:	69 f4       	brne	.+26     	; 0x582 <DIO_VSet_port_Direction+0x3c>
 568:	05 c0       	rjmp	.+10     	; 0x574 <DIO_VSet_port_Direction+0x2e>
 56a:	83 36       	cpi	r24, 0x63	; 99
 56c:	39 f0       	breq	.+14     	; 0x57c <DIO_VSet_port_Direction+0x36>
 56e:	84 36       	cpi	r24, 0x64	; 100
 570:	41 f4       	brne	.+16     	; 0x582 <DIO_VSet_port_Direction+0x3c>
 572:	06 c0       	rjmp	.+12     	; 0x580 <DIO_VSet_port_Direction+0x3a>
	{
		case'a':
		case'A':
			DDRA_ = dir;
 574:	6a bb       	out	0x1a, r22	; 26
		break;
 576:	08 95       	ret
		case 'b':
		case 'B':
			DDRB_ = dir;
 578:	67 bb       	out	0x17, r22	; 23
			break;
 57a:	08 95       	ret
		case 'C':
		case 'c':
			DDRC_ = dir;
 57c:	64 bb       	out	0x14, r22	; 20
			break;
 57e:	08 95       	ret
		case 'd':
		case 'D':
			DDRD_ = dir;
 580:	61 bb       	out	0x11, r22	; 17
 582:	08 95       	ret

00000584 <DIO_VWrite_port>:
	}
}

void DIO_VWrite_port(unsigned char port , unsigned char val)
{
	switch(port)
 584:	84 34       	cpi	r24, 0x44	; 68
 586:	d9 f0       	breq	.+54     	; 0x5be <DIO_VWrite_port+0x3a>
 588:	85 34       	cpi	r24, 0x45	; 69
 58a:	38 f4       	brcc	.+14     	; 0x59a <DIO_VWrite_port+0x16>
 58c:	82 34       	cpi	r24, 0x42	; 66
 58e:	99 f0       	breq	.+38     	; 0x5b6 <DIO_VWrite_port+0x32>
 590:	83 34       	cpi	r24, 0x43	; 67
 592:	98 f4       	brcc	.+38     	; 0x5ba <DIO_VWrite_port+0x36>
 594:	81 34       	cpi	r24, 0x41	; 65
 596:	a1 f4       	brne	.+40     	; 0x5c0 <DIO_VWrite_port+0x3c>
 598:	0c c0       	rjmp	.+24     	; 0x5b2 <DIO_VWrite_port+0x2e>
 59a:	82 36       	cpi	r24, 0x62	; 98
 59c:	61 f0       	breq	.+24     	; 0x5b6 <DIO_VWrite_port+0x32>
 59e:	83 36       	cpi	r24, 0x63	; 99
 5a0:	18 f4       	brcc	.+6      	; 0x5a8 <DIO_VWrite_port+0x24>
 5a2:	81 36       	cpi	r24, 0x61	; 97
 5a4:	69 f4       	brne	.+26     	; 0x5c0 <DIO_VWrite_port+0x3c>
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <DIO_VWrite_port+0x2e>
 5a8:	83 36       	cpi	r24, 0x63	; 99
 5aa:	39 f0       	breq	.+14     	; 0x5ba <DIO_VWrite_port+0x36>
 5ac:	84 36       	cpi	r24, 0x64	; 100
 5ae:	41 f4       	brne	.+16     	; 0x5c0 <DIO_VWrite_port+0x3c>
 5b0:	06 c0       	rjmp	.+12     	; 0x5be <DIO_VWrite_port+0x3a>
	{
		case'a':
		case'A':
			PORTA_ = val;
 5b2:	6b bb       	out	0x1b, r22	; 27
			break;
 5b4:	08 95       	ret
		case 'b':
		case 'B':
			PORTB_ = val;
 5b6:	68 bb       	out	0x18, r22	; 24
			break;
 5b8:	08 95       	ret
		case 'C':
		case 'c':
			PORTC_ = val;
 5ba:	65 bb       	out	0x15, r22	; 21
			break;
 5bc:	08 95       	ret
		case 'd':
		case 'D':
			PORTD_ = val;
 5be:	62 bb       	out	0x12, r22	; 18
 5c0:	08 95       	ret

000005c2 <DIO_U8Read_port>:
	}
}

unsigned char DIO_U8Read_port(unsigned char port)
{
	switch(port)
 5c2:	84 34       	cpi	r24, 0x44	; 68
 5c4:	d9 f0       	breq	.+54     	; 0x5fc <DIO_U8Read_port+0x3a>
 5c6:	85 34       	cpi	r24, 0x45	; 69
 5c8:	38 f4       	brcc	.+14     	; 0x5d8 <DIO_U8Read_port+0x16>
 5ca:	82 34       	cpi	r24, 0x42	; 66
 5cc:	99 f0       	breq	.+38     	; 0x5f4 <DIO_U8Read_port+0x32>
 5ce:	83 34       	cpi	r24, 0x43	; 67
 5d0:	98 f4       	brcc	.+38     	; 0x5f8 <DIO_U8Read_port+0x36>
 5d2:	81 34       	cpi	r24, 0x41	; 65
 5d4:	a9 f4       	brne	.+42     	; 0x600 <DIO_U8Read_port+0x3e>
 5d6:	0c c0       	rjmp	.+24     	; 0x5f0 <DIO_U8Read_port+0x2e>
 5d8:	82 36       	cpi	r24, 0x62	; 98
 5da:	61 f0       	breq	.+24     	; 0x5f4 <DIO_U8Read_port+0x32>
 5dc:	83 36       	cpi	r24, 0x63	; 99
 5de:	18 f4       	brcc	.+6      	; 0x5e6 <DIO_U8Read_port+0x24>
 5e0:	81 36       	cpi	r24, 0x61	; 97
 5e2:	71 f4       	brne	.+28     	; 0x600 <DIO_U8Read_port+0x3e>
 5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <DIO_U8Read_port+0x2e>
 5e6:	83 36       	cpi	r24, 0x63	; 99
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <DIO_U8Read_port+0x36>
 5ea:	84 36       	cpi	r24, 0x64	; 100
 5ec:	49 f4       	brne	.+18     	; 0x600 <DIO_U8Read_port+0x3e>
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <DIO_U8Read_port+0x3a>
	{
		case'a':
		case'A':
			return PINA_ ;
 5f0:	89 b3       	in	r24, 0x19	; 25
 5f2:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PINB_;
 5f4:	86 b3       	in	r24, 0x16	; 22
 5f6:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PINC_;
 5f8:	83 b3       	in	r24, 0x13	; 19
 5fa:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PIND_;
 5fc:	80 b3       	in	r24, 0x10	; 16
 5fe:	08 95       	ret
			break;
	}
}
 600:	08 95       	ret

00000602 <DIO_VToggle_port>:


void DIO_VToggle_port(unsigned char port)

{
	switch(port)
 602:	84 34       	cpi	r24, 0x44	; 68
 604:	09 f1       	breq	.+66     	; 0x648 <DIO_VToggle_port+0x46>
 606:	85 34       	cpi	r24, 0x45	; 69
 608:	38 f4       	brcc	.+14     	; 0x618 <DIO_VToggle_port+0x16>
 60a:	82 34       	cpi	r24, 0x42	; 66
 60c:	a9 f0       	breq	.+42     	; 0x638 <DIO_VToggle_port+0x36>
 60e:	83 34       	cpi	r24, 0x43	; 67
 610:	b8 f4       	brcc	.+46     	; 0x640 <DIO_VToggle_port+0x3e>
 612:	81 34       	cpi	r24, 0x41	; 65
 614:	e1 f4       	brne	.+56     	; 0x64e <DIO_VToggle_port+0x4c>
 616:	0c c0       	rjmp	.+24     	; 0x630 <DIO_VToggle_port+0x2e>
 618:	82 36       	cpi	r24, 0x62	; 98
 61a:	71 f0       	breq	.+28     	; 0x638 <DIO_VToggle_port+0x36>
 61c:	83 36       	cpi	r24, 0x63	; 99
 61e:	18 f4       	brcc	.+6      	; 0x626 <DIO_VToggle_port+0x24>
 620:	81 36       	cpi	r24, 0x61	; 97
 622:	a9 f4       	brne	.+42     	; 0x64e <DIO_VToggle_port+0x4c>
 624:	05 c0       	rjmp	.+10     	; 0x630 <DIO_VToggle_port+0x2e>
 626:	83 36       	cpi	r24, 0x63	; 99
 628:	59 f0       	breq	.+22     	; 0x640 <DIO_VToggle_port+0x3e>
 62a:	84 36       	cpi	r24, 0x64	; 100
 62c:	81 f4       	brne	.+32     	; 0x64e <DIO_VToggle_port+0x4c>
 62e:	0c c0       	rjmp	.+24     	; 0x648 <DIO_VToggle_port+0x46>
	{
		case'a':
		case'A':
			PORTA_ ^= (0xff);
 630:	8b b3       	in	r24, 0x1b	; 27
 632:	80 95       	com	r24
 634:	8b bb       	out	0x1b, r24	; 27
			break;
 636:	08 95       	ret
		case 'b':
		case 'B':
			PORTB_ ^= (0xff);
 638:	88 b3       	in	r24, 0x18	; 24
 63a:	80 95       	com	r24
 63c:	88 bb       	out	0x18, r24	; 24
			break;
 63e:	08 95       	ret
		case 'C':
		case 'c':
			PORTC_ ^= (0xff);
 640:	85 b3       	in	r24, 0x15	; 21
 642:	80 95       	com	r24
 644:	85 bb       	out	0x15, r24	; 21
			break;
 646:	08 95       	ret
		case 'd':
		case 'D':
			return PORTD_ ^= (0xff);
 648:	82 b3       	in	r24, 0x12	; 18
 64a:	80 95       	com	r24
 64c:	82 bb       	out	0x12, r24	; 18
 64e:	08 95       	ret

00000650 <main>:
#define F_CPU 8000000UL
#include "LED.h"

int main(void)
{	
	led_initialize('A',0);
 650:	81 e4       	ldi	r24, 0x41	; 65
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	0e 94 49 00 	call	0x92	; 0x92 <led_initialize>
    while(1)
    {
		
		led_on('a',0);
 658:	81 e6       	ldi	r24, 0x61	; 97
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	0e 94 4e 00 	call	0x9c	; 0x9c <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 660:	8f e9       	ldi	r24, 0x9F	; 159
 662:	96 e8       	ldi	r25, 0x86	; 134
 664:	a1 e0       	ldi	r26, 0x01	; 1
 666:	81 50       	subi	r24, 0x01	; 1
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	a0 40       	sbci	r26, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <main+0x16>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x20>
 670:	00 00       	nop
		_delay_ms(500);
		led_off('a',0);
 672:	81 e6       	ldi	r24, 0x61	; 97
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	0e 94 53 00 	call	0xa6	; 0xa6 <led_off>
 67a:	8f e9       	ldi	r24, 0x9F	; 159
 67c:	96 e8       	ldi	r25, 0x86	; 134
 67e:	a1 e0       	ldi	r26, 0x01	; 1
 680:	81 50       	subi	r24, 0x01	; 1
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	a0 40       	sbci	r26, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <main+0x30>
 688:	00 c0       	rjmp	.+0      	; 0x68a <main+0x3a>
 68a:	00 00       	nop
 68c:	e5 cf       	rjmp	.-54     	; 0x658 <main+0x8>

0000068e <strcmp>:
 68e:	fb 01       	movw	r30, r22
 690:	dc 01       	movw	r26, r24
 692:	8d 91       	ld	r24, X+
 694:	01 90       	ld	r0, Z+
 696:	80 19       	sub	r24, r0
 698:	01 10       	cpse	r0, r1
 69a:	d9 f3       	breq	.-10     	; 0x692 <strcmp+0x4>
 69c:	99 0b       	sbc	r25, r25
 69e:	08 95       	ret

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
