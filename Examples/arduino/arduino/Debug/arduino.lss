
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  0000107e  000010f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000750  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00001990  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f35  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055d  00000000  00000000  000029a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000861  00000000  00000000  00002f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00003764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c3d  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e7       	ldi	r30, 0x7E	; 126
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 36       	cpi	r26, 0x66	; 102
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e6       	ldi	r26, 0x66	; 102
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 36       	cpi	r26, 0x66	; 102
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 3d 08 	jmp	0x107a	; 0x107a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include "std_macros.h"

#include "lcd.h"
int main(void)
{	CLEAR_BIT(MCUCR,4);
      a6:	85 b7       	in	r24, 0x35	; 53
      a8:	8f 7e       	andi	r24, 0xEF	; 239
      aa:	85 bf       	out	0x35, r24	; 53
	
	Lcd_Initialize();
      ac:	0e 94 be 07 	call	0xf7c	; 0xf7c <Lcd_Initialize>
	keypad_intialize('D');
      b0:	84 e4       	ldi	r24, 0x44	; 68
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	0e 94 a9 05 	call	0xb52	; 0xb52 <keypad_intialize>
	char x = 0;
	unsigned char counter=0;
	while(1)
	{
		x=keypad_u8check_press();
      b8:	0e 94 91 06 	call	0xd22	; 0xd22 <keypad_u8check_press>
      bc:	c8 2f       	mov	r28, r24
		if (x != 0 && x != 0xFF)  // Check for both possible "no key" values
      be:	81 50       	subi	r24, 0x01	; 1
      c0:	8e 3f       	cpi	r24, 0xFE	; 254
      c2:	38 f4       	brcc	.+14     	; 0xd2 <main+0x2c>
		{
			Lcd_Set_cursor(1,1);
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	61 e0       	ldi	r22, 0x01	; 1
      c8:	0e 94 1e 08 	call	0x103c	; 0x103c <Lcd_Set_cursor>
			Lcd_Send_char(x);  // Changed from Lcd_send_string
      cc:	8c 2f       	mov	r24, r28
      ce:	0e 94 9c 07 	call	0xf38	; 0xf38 <Lcd_Send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d2:	8f ef       	ldi	r24, 0xFF	; 255
      d4:	93 ec       	ldi	r25, 0xC3	; 195
      d6:	a9 e0       	ldi	r26, 0x09	; 9
      d8:	81 50       	subi	r24, 0x01	; 1
      da:	90 40       	sbci	r25, 0x00	; 0
      dc:	a0 40       	sbci	r26, 0x00	; 0
      de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x32>
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x3c>
      e2:	00 00       	nop
      e4:	e9 cf       	rjmp	.-46     	; 0xb8 <main+0x12>

000000e6 <Dio_VSet_pin_Dir>:
 */ 
#include "std_macros.h"
#include <string.h>

void Dio_VSet_pin_Dir(unsigned char port, unsigned char reg_numb, const char *dir)
{
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	c8 2f       	mov	r28, r24
      f0:	d6 2f       	mov	r29, r22
      f2:	8a 01       	movw	r16, r20
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
      f4:	ca 01       	movw	r24, r20
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	71 e0       	ldi	r23, 0x01	; 1
      fa:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
      fe:	28 2f       	mov	r18, r24
     100:	39 2f       	mov	r19, r25
     102:	21 15       	cp	r18, r1
     104:	31 05       	cpc	r19, r1
     106:	59 f0       	breq	.+22     	; 0x11e <Dio_VSet_pin_Dir+0x38>
     108:	c8 01       	movw	r24, r16
     10a:	67 e0       	ldi	r22, 0x07	; 7
     10c:	71 e0       	ldi	r23, 0x01	; 1
     10e:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     112:	28 2f       	mov	r18, r24
     114:	39 2f       	mov	r19, r25
     116:	21 15       	cp	r18, r1
     118:	31 05       	cpc	r19, r1
     11a:	09 f0       	breq	.+2      	; 0x11e <Dio_VSet_pin_Dir+0x38>
     11c:	4b c0       	rjmp	.+150    	; 0x1b4 <Dio_VSet_pin_Dir+0xce>
	{
		switch (port)
     11e:	c4 34       	cpi	r28, 0x44	; 68
     120:	09 f4       	brne	.+2      	; 0x124 <Dio_VSet_pin_Dir+0x3e>
     122:	3c c0       	rjmp	.+120    	; 0x19c <Dio_VSet_pin_Dir+0xb6>
     124:	c5 34       	cpi	r28, 0x45	; 69
     126:	40 f4       	brcc	.+16     	; 0x138 <Dio_VSet_pin_Dir+0x52>
     128:	c2 34       	cpi	r28, 0x42	; 66
     12a:	01 f1       	breq	.+64     	; 0x16c <Dio_VSet_pin_Dir+0x86>
     12c:	c3 34       	cpi	r28, 0x43	; 67
     12e:	50 f5       	brcc	.+84     	; 0x184 <Dio_VSet_pin_Dir+0x9e>
     130:	c1 34       	cpi	r28, 0x41	; 65
     132:	09 f0       	breq	.+2      	; 0x136 <Dio_VSet_pin_Dir+0x50>
     134:	a0 c0       	rjmp	.+320    	; 0x276 <Dio_VSet_pin_Dir+0x190>
     136:	0e c0       	rjmp	.+28     	; 0x154 <Dio_VSet_pin_Dir+0x6e>
     138:	c2 36       	cpi	r28, 0x62	; 98
     13a:	c1 f0       	breq	.+48     	; 0x16c <Dio_VSet_pin_Dir+0x86>
     13c:	c3 36       	cpi	r28, 0x63	; 99
     13e:	20 f4       	brcc	.+8      	; 0x148 <Dio_VSet_pin_Dir+0x62>
     140:	c1 36       	cpi	r28, 0x61	; 97
     142:	09 f0       	breq	.+2      	; 0x146 <Dio_VSet_pin_Dir+0x60>
     144:	98 c0       	rjmp	.+304    	; 0x276 <Dio_VSet_pin_Dir+0x190>
     146:	06 c0       	rjmp	.+12     	; 0x154 <Dio_VSet_pin_Dir+0x6e>
     148:	c3 36       	cpi	r28, 0x63	; 99
     14a:	e1 f0       	breq	.+56     	; 0x184 <Dio_VSet_pin_Dir+0x9e>
     14c:	c4 36       	cpi	r28, 0x64	; 100
     14e:	09 f0       	breq	.+2      	; 0x152 <Dio_VSet_pin_Dir+0x6c>
     150:	92 c0       	rjmp	.+292    	; 0x276 <Dio_VSet_pin_Dir+0x190>
     152:	24 c0       	rjmp	.+72     	; 0x19c <Dio_VSet_pin_Dir+0xb6>
		{
			case 'A':
			case 'a':
				SET_BIT(DDRA_, reg_numb);
     154:	44 b1       	in	r20, 0x04	; 4
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	c9 01       	movw	r24, r18
     15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_VSet_pin_Dir+0x7c>
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	da 95       	dec	r29
     164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_VSet_pin_Dir+0x78>
     166:	84 2b       	or	r24, r20
     168:	84 b9       	out	0x04, r24	; 4
				break;
     16a:	85 c0       	rjmp	.+266    	; 0x276 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
				SET_BIT(DDRB_, reg_numb);
     16c:	44 b1       	in	r20, 0x04	; 4
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	c9 01       	movw	r24, r18
     174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_VSet_pin_Dir+0x94>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	da 95       	dec	r29
     17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_VSet_pin_Dir+0x90>
     17e:	84 2b       	or	r24, r20
     180:	84 b9       	out	0x04, r24	; 4
				break;
     182:	79 c0       	rjmp	.+242    	; 0x276 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
				SET_BIT(DDRC_, reg_numb);
     184:	47 b1       	in	r20, 0x07	; 7
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	c9 01       	movw	r24, r18
     18c:	02 c0       	rjmp	.+4      	; 0x192 <Dio_VSet_pin_Dir+0xac>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	da 95       	dec	r29
     194:	e2 f7       	brpl	.-8      	; 0x18e <Dio_VSet_pin_Dir+0xa8>
     196:	84 2b       	or	r24, r20
     198:	87 b9       	out	0x07, r24	; 7
				break;
     19a:	6d c0       	rjmp	.+218    	; 0x276 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
				SET_BIT(DDRD_, reg_numb);
     19c:	4a b1       	in	r20, 0x0a	; 10
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	c9 01       	movw	r24, r18
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_VSet_pin_Dir+0xc4>
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	da 95       	dec	r29
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Dio_VSet_pin_Dir+0xc0>
     1ae:	84 2b       	or	r24, r20
     1b0:	8a b9       	out	0x0a, r24	; 10
				break;
     1b2:	61 c0       	rjmp	.+194    	; 0x276 <Dio_VSet_pin_Dir+0x190>
			default:
				break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
     1b4:	c8 01       	movw	r24, r16
     1b6:	6e e0       	ldi	r22, 0x0E	; 14
     1b8:	71 e0       	ldi	r23, 0x01	; 1
     1ba:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     1be:	28 2f       	mov	r18, r24
     1c0:	39 2f       	mov	r19, r25
     1c2:	21 15       	cp	r18, r1
     1c4:	31 05       	cpc	r19, r1
     1c6:	59 f0       	breq	.+22     	; 0x1de <Dio_VSet_pin_Dir+0xf8>
     1c8:	c8 01       	movw	r24, r16
     1ca:	64 e1       	ldi	r22, 0x14	; 20
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     1d2:	28 2f       	mov	r18, r24
     1d4:	39 2f       	mov	r19, r25
     1d6:	21 15       	cp	r18, r1
     1d8:	31 05       	cpc	r19, r1
     1da:	09 f0       	breq	.+2      	; 0x1de <Dio_VSet_pin_Dir+0xf8>
     1dc:	4c c0       	rjmp	.+152    	; 0x276 <Dio_VSet_pin_Dir+0x190>
	{
		switch (port)
     1de:	c4 34       	cpi	r28, 0x44	; 68
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <Dio_VSet_pin_Dir+0xfe>
     1e2:	3d c0       	rjmp	.+122    	; 0x25e <Dio_VSet_pin_Dir+0x178>
     1e4:	c5 34       	cpi	r28, 0x45	; 69
     1e6:	40 f4       	brcc	.+16     	; 0x1f8 <Dio_VSet_pin_Dir+0x112>
     1e8:	c2 34       	cpi	r28, 0x42	; 66
     1ea:	f9 f0       	breq	.+62     	; 0x22a <Dio_VSet_pin_Dir+0x144>
     1ec:	c3 34       	cpi	r28, 0x43	; 67
     1ee:	50 f5       	brcc	.+84     	; 0x244 <Dio_VSet_pin_Dir+0x15e>
     1f0:	c1 34       	cpi	r28, 0x41	; 65
     1f2:	09 f0       	breq	.+2      	; 0x1f6 <Dio_VSet_pin_Dir+0x110>
     1f4:	40 c0       	rjmp	.+128    	; 0x276 <Dio_VSet_pin_Dir+0x190>
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <Dio_VSet_pin_Dir+0x12a>
     1f8:	c2 36       	cpi	r28, 0x62	; 98
     1fa:	b9 f0       	breq	.+46     	; 0x22a <Dio_VSet_pin_Dir+0x144>
     1fc:	c3 36       	cpi	r28, 0x63	; 99
     1fe:	18 f4       	brcc	.+6      	; 0x206 <Dio_VSet_pin_Dir+0x120>
     200:	c1 36       	cpi	r28, 0x61	; 97
     202:	c9 f5       	brne	.+114    	; 0x276 <Dio_VSet_pin_Dir+0x190>
     204:	05 c0       	rjmp	.+10     	; 0x210 <Dio_VSet_pin_Dir+0x12a>
     206:	c3 36       	cpi	r28, 0x63	; 99
     208:	e9 f0       	breq	.+58     	; 0x244 <Dio_VSet_pin_Dir+0x15e>
     20a:	c4 36       	cpi	r28, 0x64	; 100
     20c:	a1 f5       	brne	.+104    	; 0x276 <Dio_VSet_pin_Dir+0x190>
     20e:	27 c0       	rjmp	.+78     	; 0x25e <Dio_VSet_pin_Dir+0x178>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(DDRA_, reg_numb);
     210:	44 b1       	in	r20, 0x04	; 4
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	c9 01       	movw	r24, r18
     218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_VSet_pin_Dir+0x138>
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	da 95       	dec	r29
     220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_VSet_pin_Dir+0x134>
     222:	80 95       	com	r24
     224:	84 23       	and	r24, r20
     226:	84 b9       	out	0x04, r24	; 4
			break;
     228:	26 c0       	rjmp	.+76     	; 0x276 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
			CLEAR_BIT(DDRB_, reg_numb);
     22a:	44 b1       	in	r20, 0x04	; 4
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	c9 01       	movw	r24, r18
     232:	02 c0       	rjmp	.+4      	; 0x238 <Dio_VSet_pin_Dir+0x152>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	da 95       	dec	r29
     23a:	e2 f7       	brpl	.-8      	; 0x234 <Dio_VSet_pin_Dir+0x14e>
     23c:	80 95       	com	r24
     23e:	84 23       	and	r24, r20
     240:	84 b9       	out	0x04, r24	; 4
			break;
     242:	19 c0       	rjmp	.+50     	; 0x276 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
			CLEAR_BIT(DDRC_, reg_numb);
     244:	47 b1       	in	r20, 0x07	; 7
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	c9 01       	movw	r24, r18
     24c:	02 c0       	rjmp	.+4      	; 0x252 <Dio_VSet_pin_Dir+0x16c>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	da 95       	dec	r29
     254:	e2 f7       	brpl	.-8      	; 0x24e <Dio_VSet_pin_Dir+0x168>
     256:	80 95       	com	r24
     258:	84 23       	and	r24, r20
     25a:	87 b9       	out	0x07, r24	; 7
			break;
     25c:	0c c0       	rjmp	.+24     	; 0x276 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(DDRD_, reg_numb);
     25e:	4a b1       	in	r20, 0x0a	; 10
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	c9 01       	movw	r24, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <Dio_VSet_pin_Dir+0x186>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	da 95       	dec	r29
     26e:	e2 f7       	brpl	.-8      	; 0x268 <Dio_VSet_pin_Dir+0x182>
     270:	80 95       	com	r24
     272:	84 23       	and	r24, r20
     274:	8a b9       	out	0x0a, r24	; 10
			break;
			default:
			break;  // Handle unexpected port values
		}
	}
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <DIO_vwrite>:

void DIO_vwrite(unsigned char port , unsigned char reg_numb, const char *val)
{
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	c8 2f       	mov	r28, r24
     28a:	d6 2f       	mov	r29, r22
     28c:	8a 01       	movw	r16, r20
	if (((strcmp(val, "HIGH")) == 0) || ((strcmp(val, "high")) == 0) || ((strcmp(val, "1")) == 0) )
     28e:	ca 01       	movw	r24, r20
     290:	6a e1       	ldi	r22, 0x1A	; 26
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     298:	28 2f       	mov	r18, r24
     29a:	39 2f       	mov	r19, r25
     29c:	21 15       	cp	r18, r1
     29e:	31 05       	cpc	r19, r1
     2a0:	a9 f0       	breq	.+42     	; 0x2cc <DIO_vwrite+0x4c>
     2a2:	c8 01       	movw	r24, r16
     2a4:	6f e1       	ldi	r22, 0x1F	; 31
     2a6:	71 e0       	ldi	r23, 0x01	; 1
     2a8:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     2ac:	28 2f       	mov	r18, r24
     2ae:	39 2f       	mov	r19, r25
     2b0:	21 15       	cp	r18, r1
     2b2:	31 05       	cpc	r19, r1
     2b4:	59 f0       	breq	.+22     	; 0x2cc <DIO_vwrite+0x4c>
     2b6:	c8 01       	movw	r24, r16
     2b8:	64 e2       	ldi	r22, 0x24	; 36
     2ba:	71 e0       	ldi	r23, 0x01	; 1
     2bc:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     2c0:	28 2f       	mov	r18, r24
     2c2:	39 2f       	mov	r19, r25
     2c4:	21 15       	cp	r18, r1
     2c6:	31 05       	cpc	r19, r1
     2c8:	09 f0       	breq	.+2      	; 0x2cc <DIO_vwrite+0x4c>
     2ca:	4b c0       	rjmp	.+150    	; 0x362 <DIO_vwrite+0xe2>
	{
		switch (port)
     2cc:	c4 34       	cpi	r28, 0x44	; 68
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_vwrite+0x52>
     2d0:	3c c0       	rjmp	.+120    	; 0x34a <DIO_vwrite+0xca>
     2d2:	c5 34       	cpi	r28, 0x45	; 69
     2d4:	40 f4       	brcc	.+16     	; 0x2e6 <DIO_vwrite+0x66>
     2d6:	c2 34       	cpi	r28, 0x42	; 66
     2d8:	01 f1       	breq	.+64     	; 0x31a <DIO_vwrite+0x9a>
     2da:	c3 34       	cpi	r28, 0x43	; 67
     2dc:	50 f5       	brcc	.+84     	; 0x332 <DIO_vwrite+0xb2>
     2de:	c1 34       	cpi	r28, 0x41	; 65
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <DIO_vwrite+0x64>
     2e2:	aa c0       	rjmp	.+340    	; 0x438 <DIO_vwrite+0x1b8>
     2e4:	0e c0       	rjmp	.+28     	; 0x302 <DIO_vwrite+0x82>
     2e6:	c2 36       	cpi	r28, 0x62	; 98
     2e8:	c1 f0       	breq	.+48     	; 0x31a <DIO_vwrite+0x9a>
     2ea:	c3 36       	cpi	r28, 0x63	; 99
     2ec:	20 f4       	brcc	.+8      	; 0x2f6 <DIO_vwrite+0x76>
     2ee:	c1 36       	cpi	r28, 0x61	; 97
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <DIO_vwrite+0x74>
     2f2:	a2 c0       	rjmp	.+324    	; 0x438 <DIO_vwrite+0x1b8>
     2f4:	06 c0       	rjmp	.+12     	; 0x302 <DIO_vwrite+0x82>
     2f6:	c3 36       	cpi	r28, 0x63	; 99
     2f8:	e1 f0       	breq	.+56     	; 0x332 <DIO_vwrite+0xb2>
     2fa:	c4 36       	cpi	r28, 0x64	; 100
     2fc:	09 f0       	breq	.+2      	; 0x300 <DIO_vwrite+0x80>
     2fe:	9c c0       	rjmp	.+312    	; 0x438 <DIO_vwrite+0x1b8>
     300:	24 c0       	rjmp	.+72     	; 0x34a <DIO_vwrite+0xca>
		{
			case 'A':
			case 'a':
			SET_BIT(PORTA_, reg_numb);
     302:	45 b1       	in	r20, 0x05	; 5
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	c9 01       	movw	r24, r18
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_vwrite+0x90>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	da 95       	dec	r29
     312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_vwrite+0x8c>
     314:	84 2b       	or	r24, r20
     316:	85 b9       	out	0x05, r24	; 5
			break;
     318:	8f c0       	rjmp	.+286    	; 0x438 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			SET_BIT(PORTB_, reg_numb);
     31a:	45 b1       	in	r20, 0x05	; 5
     31c:	21 e0       	ldi	r18, 0x01	; 1
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	c9 01       	movw	r24, r18
     322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_vwrite+0xa8>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	da 95       	dec	r29
     32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_vwrite+0xa4>
     32c:	84 2b       	or	r24, r20
     32e:	85 b9       	out	0x05, r24	; 5
			break;
     330:	83 c0       	rjmp	.+262    	; 0x438 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			SET_BIT(PORTC_, reg_numb);
     332:	48 b1       	in	r20, 0x08	; 8
     334:	21 e0       	ldi	r18, 0x01	; 1
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	c9 01       	movw	r24, r18
     33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_vwrite+0xc0>
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	da 95       	dec	r29
     342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_vwrite+0xbc>
     344:	84 2b       	or	r24, r20
     346:	88 b9       	out	0x08, r24	; 8
			break;
     348:	77 c0       	rjmp	.+238    	; 0x438 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			SET_BIT(PORTD_, reg_numb);
     34a:	4b b1       	in	r20, 0x0b	; 11
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	c9 01       	movw	r24, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_vwrite+0xd8>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	da 95       	dec	r29
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_vwrite+0xd4>
     35c:	84 2b       	or	r24, r20
     35e:	8b b9       	out	0x0b, r24	; 11
			break;
     360:	6b c0       	rjmp	.+214    	; 0x438 <DIO_vwrite+0x1b8>
			default:
			break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(val, "LOW")) == 0) || ((strcmp(val, "low")) == 0) || ((strcmp(val, "0")) == 0))
     362:	c8 01       	movw	r24, r16
     364:	66 e2       	ldi	r22, 0x26	; 38
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     36c:	28 2f       	mov	r18, r24
     36e:	39 2f       	mov	r19, r25
     370:	21 15       	cp	r18, r1
     372:	31 05       	cpc	r19, r1
     374:	a9 f0       	breq	.+42     	; 0x3a0 <DIO_vwrite+0x120>
     376:	c8 01       	movw	r24, r16
     378:	6a e2       	ldi	r22, 0x2A	; 42
     37a:	71 e0       	ldi	r23, 0x01	; 1
     37c:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     380:	28 2f       	mov	r18, r24
     382:	39 2f       	mov	r19, r25
     384:	21 15       	cp	r18, r1
     386:	31 05       	cpc	r19, r1
     388:	59 f0       	breq	.+22     	; 0x3a0 <DIO_vwrite+0x120>
     38a:	c8 01       	movw	r24, r16
     38c:	6e e2       	ldi	r22, 0x2E	; 46
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     394:	28 2f       	mov	r18, r24
     396:	39 2f       	mov	r19, r25
     398:	21 15       	cp	r18, r1
     39a:	31 05       	cpc	r19, r1
     39c:	09 f0       	breq	.+2      	; 0x3a0 <DIO_vwrite+0x120>
     39e:	4c c0       	rjmp	.+152    	; 0x438 <DIO_vwrite+0x1b8>
	{
		switch (port)
     3a0:	c4 34       	cpi	r28, 0x44	; 68
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <DIO_vwrite+0x126>
     3a4:	3d c0       	rjmp	.+122    	; 0x420 <DIO_vwrite+0x1a0>
     3a6:	c5 34       	cpi	r28, 0x45	; 69
     3a8:	40 f4       	brcc	.+16     	; 0x3ba <DIO_vwrite+0x13a>
     3aa:	c2 34       	cpi	r28, 0x42	; 66
     3ac:	f9 f0       	breq	.+62     	; 0x3ec <DIO_vwrite+0x16c>
     3ae:	c3 34       	cpi	r28, 0x43	; 67
     3b0:	50 f5       	brcc	.+84     	; 0x406 <DIO_vwrite+0x186>
     3b2:	c1 34       	cpi	r28, 0x41	; 65
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_vwrite+0x138>
     3b6:	40 c0       	rjmp	.+128    	; 0x438 <DIO_vwrite+0x1b8>
     3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <DIO_vwrite+0x152>
     3ba:	c2 36       	cpi	r28, 0x62	; 98
     3bc:	b9 f0       	breq	.+46     	; 0x3ec <DIO_vwrite+0x16c>
     3be:	c3 36       	cpi	r28, 0x63	; 99
     3c0:	18 f4       	brcc	.+6      	; 0x3c8 <DIO_vwrite+0x148>
     3c2:	c1 36       	cpi	r28, 0x61	; 97
     3c4:	c9 f5       	brne	.+114    	; 0x438 <DIO_vwrite+0x1b8>
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <DIO_vwrite+0x152>
     3c8:	c3 36       	cpi	r28, 0x63	; 99
     3ca:	e9 f0       	breq	.+58     	; 0x406 <DIO_vwrite+0x186>
     3cc:	c4 36       	cpi	r28, 0x64	; 100
     3ce:	a1 f5       	brne	.+104    	; 0x438 <DIO_vwrite+0x1b8>
     3d0:	27 c0       	rjmp	.+78     	; 0x420 <DIO_vwrite+0x1a0>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(PORTA_, reg_numb);
     3d2:	45 b1       	in	r20, 0x05	; 5
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	c9 01       	movw	r24, r18
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_vwrite+0x160>
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	da 95       	dec	r29
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_vwrite+0x15c>
     3e4:	80 95       	com	r24
     3e6:	84 23       	and	r24, r20
     3e8:	85 b9       	out	0x05, r24	; 5
			break;
     3ea:	26 c0       	rjmp	.+76     	; 0x438 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			CLEAR_BIT(PORTB_, reg_numb);
     3ec:	45 b1       	in	r20, 0x05	; 5
     3ee:	21 e0       	ldi	r18, 0x01	; 1
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_vwrite+0x17a>
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	da 95       	dec	r29
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_vwrite+0x176>
     3fe:	80 95       	com	r24
     400:	84 23       	and	r24, r20
     402:	85 b9       	out	0x05, r24	; 5
			break;
     404:	19 c0       	rjmp	.+50     	; 0x438 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			CLEAR_BIT(PORTC_, reg_numb);
     406:	48 b1       	in	r20, 0x08	; 8
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	c9 01       	movw	r24, r18
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_vwrite+0x194>
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	da 95       	dec	r29
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_vwrite+0x190>
     418:	80 95       	com	r24
     41a:	84 23       	and	r24, r20
     41c:	88 b9       	out	0x08, r24	; 8
			break;
     41e:	0c c0       	rjmp	.+24     	; 0x438 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(PORTD_, reg_numb);
     420:	4b b1       	in	r20, 0x0b	; 11
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	c9 01       	movw	r24, r18
     428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_vwrite+0x1ae>
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	da 95       	dec	r29
     430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_vwrite+0x1aa>
     432:	80 95       	com	r24
     434:	84 23       	and	r24, r20
     436:	8b b9       	out	0x0b, r24	; 11
			default:
			break;  // Handle unexpected port values
		}
	}
	
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	08 95       	ret

00000442 <DIO_vToggle>:

void DIO_vToggle(unsigned char port , unsigned char reg_numb)
{
	switch (port)
     442:	84 34       	cpi	r24, 0x44	; 68
     444:	09 f4       	brne	.+2      	; 0x448 <DIO_vToggle+0x6>
     446:	3d c0       	rjmp	.+122    	; 0x4c2 <DIO_vToggle+0x80>
     448:	85 34       	cpi	r24, 0x45	; 69
     44a:	40 f4       	brcc	.+16     	; 0x45c <DIO_vToggle+0x1a>
     44c:	82 34       	cpi	r24, 0x42	; 66
     44e:	f9 f0       	breq	.+62     	; 0x48e <DIO_vToggle+0x4c>
     450:	83 34       	cpi	r24, 0x43	; 67
     452:	50 f5       	brcc	.+84     	; 0x4a8 <DIO_vToggle+0x66>
     454:	81 34       	cpi	r24, 0x41	; 65
     456:	09 f0       	breq	.+2      	; 0x45a <DIO_vToggle+0x18>
     458:	40 c0       	rjmp	.+128    	; 0x4da <DIO_vToggle+0x98>
     45a:	0c c0       	rjmp	.+24     	; 0x474 <DIO_vToggle+0x32>
     45c:	82 36       	cpi	r24, 0x62	; 98
     45e:	b9 f0       	breq	.+46     	; 0x48e <DIO_vToggle+0x4c>
     460:	83 36       	cpi	r24, 0x63	; 99
     462:	18 f4       	brcc	.+6      	; 0x46a <DIO_vToggle+0x28>
     464:	81 36       	cpi	r24, 0x61	; 97
     466:	c9 f5       	brne	.+114    	; 0x4da <DIO_vToggle+0x98>
     468:	05 c0       	rjmp	.+10     	; 0x474 <DIO_vToggle+0x32>
     46a:	83 36       	cpi	r24, 0x63	; 99
     46c:	e9 f0       	breq	.+58     	; 0x4a8 <DIO_vToggle+0x66>
     46e:	84 36       	cpi	r24, 0x64	; 100
     470:	a1 f5       	brne	.+104    	; 0x4da <DIO_vToggle+0x98>
     472:	27 c0       	rjmp	.+78     	; 0x4c2 <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA_, reg_numb);
     474:	25 b1       	in	r18, 0x05	; 5
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	ac 01       	movw	r20, r24
     47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_vToggle+0x40>
     47e:	44 0f       	add	r20, r20
     480:	55 1f       	adc	r21, r21
     482:	6a 95       	dec	r22
     484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_vToggle+0x3c>
     486:	ba 01       	movw	r22, r20
     488:	62 27       	eor	r22, r18
     48a:	65 b9       	out	0x05, r22	; 5
		break;
     48c:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB_, reg_numb);
     48e:	25 b1       	in	r18, 0x05	; 5
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	ac 01       	movw	r20, r24
     496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_vToggle+0x5a>
     498:	44 0f       	add	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	6a 95       	dec	r22
     49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_vToggle+0x56>
     4a0:	ba 01       	movw	r22, r20
     4a2:	62 27       	eor	r22, r18
     4a4:	65 b9       	out	0x05, r22	; 5
		break;
     4a6:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC_, reg_numb);
     4a8:	28 b1       	in	r18, 0x08	; 8
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	ac 01       	movw	r20, r24
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_vToggle+0x74>
     4b2:	44 0f       	add	r20, r20
     4b4:	55 1f       	adc	r21, r21
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_vToggle+0x70>
     4ba:	ba 01       	movw	r22, r20
     4bc:	62 27       	eor	r22, r18
     4be:	68 b9       	out	0x08, r22	; 8
		break;
     4c0:	08 95       	ret
		case 'D':   // Fixed inconsistency
		case 'd':
		TOG_BIT(PORTD_, reg_numb);
     4c2:	2b b1       	in	r18, 0x0b	; 11
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	ac 01       	movw	r20, r24
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_vToggle+0x8e>
     4cc:	44 0f       	add	r20, r20
     4ce:	55 1f       	adc	r21, r21
     4d0:	6a 95       	dec	r22
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_vToggle+0x8a>
     4d4:	ba 01       	movw	r22, r20
     4d6:	62 27       	eor	r22, r18
     4d8:	6b b9       	out	0x0b, r22	; 11
     4da:	08 95       	ret

000004dc <DIO_u8Read_pin>:
}

unsigned char DIO_u8Read_pin(unsigned char port , unsigned char reg_numb)
{
	
	switch (port)
     4dc:	84 34       	cpi	r24, 0x44	; 68
     4de:	09 f4       	brne	.+2      	; 0x4e2 <DIO_u8Read_pin+0x6>
     4e0:	4e c0       	rjmp	.+156    	; 0x57e <DIO_u8Read_pin+0xa2>
     4e2:	85 34       	cpi	r24, 0x45	; 69
     4e4:	40 f4       	brcc	.+16     	; 0x4f6 <DIO_u8Read_pin+0x1a>
     4e6:	82 34       	cpi	r24, 0x42	; 66
     4e8:	31 f1       	breq	.+76     	; 0x536 <DIO_u8Read_pin+0x5a>
     4ea:	83 34       	cpi	r24, 0x43	; 67
     4ec:	b0 f5       	brcc	.+108    	; 0x55a <DIO_u8Read_pin+0x7e>
     4ee:	81 34       	cpi	r24, 0x41	; 65
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <DIO_u8Read_pin+0x18>
     4f2:	57 c0       	rjmp	.+174    	; 0x5a2 <DIO_u8Read_pin+0xc6>
     4f4:	0e c0       	rjmp	.+28     	; 0x512 <DIO_u8Read_pin+0x36>
     4f6:	82 36       	cpi	r24, 0x62	; 98
     4f8:	f1 f0       	breq	.+60     	; 0x536 <DIO_u8Read_pin+0x5a>
     4fa:	83 36       	cpi	r24, 0x63	; 99
     4fc:	20 f4       	brcc	.+8      	; 0x506 <DIO_u8Read_pin+0x2a>
     4fe:	81 36       	cpi	r24, 0x61	; 97
     500:	09 f0       	breq	.+2      	; 0x504 <DIO_u8Read_pin+0x28>
     502:	4f c0       	rjmp	.+158    	; 0x5a2 <DIO_u8Read_pin+0xc6>
     504:	06 c0       	rjmp	.+12     	; 0x512 <DIO_u8Read_pin+0x36>
     506:	83 36       	cpi	r24, 0x63	; 99
     508:	41 f1       	breq	.+80     	; 0x55a <DIO_u8Read_pin+0x7e>
     50a:	84 36       	cpi	r24, 0x64	; 100
     50c:	09 f0       	breq	.+2      	; 0x510 <DIO_u8Read_pin+0x34>
     50e:	49 c0       	rjmp	.+146    	; 0x5a2 <DIO_u8Read_pin+0xc6>
     510:	36 c0       	rjmp	.+108    	; 0x57e <DIO_u8Read_pin+0xa2>
	{
		case 'A':
		case 'a':
		return READ_BIT(PINA_, reg_numb);
     512:	23 b1       	in	r18, 0x03	; 3
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	06 2e       	mov	r0, r22
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8Read_pin+0x44>
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	0a 94       	dec	r0
     522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8Read_pin+0x40>
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	82 23       	and	r24, r18
     528:	93 23       	and	r25, r19
     52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_u8Read_pin+0x54>
     52c:	95 95       	asr	r25
     52e:	87 95       	ror	r24
     530:	6a 95       	dec	r22
     532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_u8Read_pin+0x50>
     534:	08 95       	ret
		break;
		case 'B':
		case 'b':
		return READ_BIT(PINB_, reg_numb);
     536:	23 b1       	in	r18, 0x03	; 3
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	06 2e       	mov	r0, r22
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8Read_pin+0x68>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8Read_pin+0x64>
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	82 23       	and	r24, r18
     54c:	93 23       	and	r25, r19
     54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_u8Read_pin+0x78>
     550:	95 95       	asr	r25
     552:	87 95       	ror	r24
     554:	6a 95       	dec	r22
     556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_u8Read_pin+0x74>
     558:	08 95       	ret
		break;
		case 'C':
		case 'c':
		return READ_BIT(PINC_, reg_numb);
     55a:	26 b1       	in	r18, 0x06	; 6
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	06 2e       	mov	r0, r22
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_u8Read_pin+0x8c>
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_u8Read_pin+0x88>
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	82 23       	and	r24, r18
     570:	93 23       	and	r25, r19
     572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_u8Read_pin+0x9c>
     574:	95 95       	asr	r25
     576:	87 95       	ror	r24
     578:	6a 95       	dec	r22
     57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_u8Read_pin+0x98>
     57c:	08 95       	ret
		break;
		case 'D':   // Fixed inconsistency
		case 'd':
		return READ_BIT(PIND_, reg_numb);
     57e:	29 b1       	in	r18, 0x09	; 9
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	06 2e       	mov	r0, r22
     586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_u8Read_pin+0xb0>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_u8Read_pin+0xac>
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	82 23       	and	r24, r18
     594:	93 23       	and	r25, r19
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_u8Read_pin+0xc0>
     598:	95 95       	asr	r25
     59a:	87 95       	ror	r24
     59c:	6a 95       	dec	r22
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_u8Read_pin+0xbc>
     5a0:	08 95       	ret
		break;
		default:
		break;  // Handle unexpected port values
	}
}
     5a2:	08 95       	ret

000005a4 <DIO_VSet_port_Direction>:


void DIO_VSet_port_Direction(unsigned char port , unsigned char *dir)
{
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	c8 2f       	mov	r28, r24
     5ac:	8b 01       	movw	r16, r22
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
     5ae:	cb 01       	movw	r24, r22
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     5b8:	28 2f       	mov	r18, r24
     5ba:	39 2f       	mov	r19, r25
     5bc:	21 15       	cp	r18, r1
     5be:	31 05       	cpc	r19, r1
     5c0:	51 f0       	breq	.+20     	; 0x5d6 <DIO_VSet_port_Direction+0x32>
     5c2:	c8 01       	movw	r24, r16
     5c4:	67 e0       	ldi	r22, 0x07	; 7
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     5cc:	28 2f       	mov	r18, r24
     5ce:	39 2f       	mov	r19, r25
     5d0:	21 15       	cp	r18, r1
     5d2:	31 05       	cpc	r19, r1
     5d4:	31 f5       	brne	.+76     	; 0x622 <DIO_VSet_port_Direction+0x7e>
		{
			switch(port)
     5d6:	c4 34       	cpi	r28, 0x44	; 68
     5d8:	09 f1       	breq	.+66     	; 0x61c <DIO_VSet_port_Direction+0x78>
     5da:	c5 34       	cpi	r28, 0x45	; 69
     5dc:	40 f4       	brcc	.+16     	; 0x5ee <DIO_VSet_port_Direction+0x4a>
     5de:	c2 34       	cpi	r28, 0x42	; 66
     5e0:	b9 f0       	breq	.+46     	; 0x610 <DIO_VSet_port_Direction+0x6c>
     5e2:	c3 34       	cpi	r28, 0x43	; 67
     5e4:	c0 f4       	brcc	.+48     	; 0x616 <DIO_VSet_port_Direction+0x72>
     5e6:	c1 34       	cpi	r28, 0x41	; 65
     5e8:	09 f0       	breq	.+2      	; 0x5ec <DIO_VSet_port_Direction+0x48>
     5ea:	4d c0       	rjmp	.+154    	; 0x686 <DIO_VSet_port_Direction+0xe2>
     5ec:	0e c0       	rjmp	.+28     	; 0x60a <DIO_VSet_port_Direction+0x66>
     5ee:	c2 36       	cpi	r28, 0x62	; 98
     5f0:	79 f0       	breq	.+30     	; 0x610 <DIO_VSet_port_Direction+0x6c>
     5f2:	c3 36       	cpi	r28, 0x63	; 99
     5f4:	20 f4       	brcc	.+8      	; 0x5fe <DIO_VSet_port_Direction+0x5a>
     5f6:	c1 36       	cpi	r28, 0x61	; 97
     5f8:	09 f0       	breq	.+2      	; 0x5fc <DIO_VSet_port_Direction+0x58>
     5fa:	45 c0       	rjmp	.+138    	; 0x686 <DIO_VSet_port_Direction+0xe2>
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <DIO_VSet_port_Direction+0x66>
     5fe:	c3 36       	cpi	r28, 0x63	; 99
     600:	51 f0       	breq	.+20     	; 0x616 <DIO_VSet_port_Direction+0x72>
     602:	c4 36       	cpi	r28, 0x64	; 100
     604:	09 f0       	breq	.+2      	; 0x608 <DIO_VSet_port_Direction+0x64>
     606:	3f c0       	rjmp	.+126    	; 0x686 <DIO_VSet_port_Direction+0xe2>
     608:	09 c0       	rjmp	.+18     	; 0x61c <DIO_VSet_port_Direction+0x78>
			{
				case'a':
				case'A':
				DDRA_ = 0xff;
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	84 b9       	out	0x04, r24	; 4
				break;
     60e:	3b c0       	rjmp	.+118    	; 0x686 <DIO_VSet_port_Direction+0xe2>
				case 'b':
				case 'B':
				DDRB_ = 0xff;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	84 b9       	out	0x04, r24	; 4
				break;
     614:	38 c0       	rjmp	.+112    	; 0x686 <DIO_VSet_port_Direction+0xe2>
				case 'C':
				case 'c':
				DDRC_ = 0xff;
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	87 b9       	out	0x07, r24	; 7
				break;
     61a:	35 c0       	rjmp	.+106    	; 0x686 <DIO_VSet_port_Direction+0xe2>
				case 'd':
				case 'D':
				DDRD_ = 0xff;
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	8a b9       	out	0x0a, r24	; 10
				break;
     620:	32 c0       	rjmp	.+100    	; 0x686 <DIO_VSet_port_Direction+0xe2>
			}
		}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
     622:	c8 01       	movw	r24, r16
     624:	6e e0       	ldi	r22, 0x0E	; 14
     626:	71 e0       	ldi	r23, 0x01	; 1
     628:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     62c:	28 2f       	mov	r18, r24
     62e:	39 2f       	mov	r19, r25
     630:	21 15       	cp	r18, r1
     632:	31 05       	cpc	r19, r1
     634:	51 f0       	breq	.+20     	; 0x64a <DIO_VSet_port_Direction+0xa6>
     636:	c8 01       	movw	r24, r16
     638:	64 e1       	ldi	r22, 0x14	; 20
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	0e 94 34 08 	call	0x1068	; 0x1068 <strcmp>
     640:	28 2f       	mov	r18, r24
     642:	39 2f       	mov	r19, r25
     644:	21 15       	cp	r18, r1
     646:	31 05       	cpc	r19, r1
     648:	f1 f4       	brne	.+60     	; 0x686 <DIO_VSet_port_Direction+0xe2>
	{
		switch(port)
     64a:	c4 34       	cpi	r28, 0x44	; 68
     64c:	d9 f0       	breq	.+54     	; 0x684 <DIO_VSet_port_Direction+0xe0>
     64e:	c5 34       	cpi	r28, 0x45	; 69
     650:	38 f4       	brcc	.+14     	; 0x660 <DIO_VSet_port_Direction+0xbc>
     652:	c2 34       	cpi	r28, 0x42	; 66
     654:	99 f0       	breq	.+38     	; 0x67c <DIO_VSet_port_Direction+0xd8>
     656:	c3 34       	cpi	r28, 0x43	; 67
     658:	98 f4       	brcc	.+38     	; 0x680 <DIO_VSet_port_Direction+0xdc>
     65a:	c1 34       	cpi	r28, 0x41	; 65
     65c:	a1 f4       	brne	.+40     	; 0x686 <DIO_VSet_port_Direction+0xe2>
     65e:	0c c0       	rjmp	.+24     	; 0x678 <DIO_VSet_port_Direction+0xd4>
     660:	c2 36       	cpi	r28, 0x62	; 98
     662:	61 f0       	breq	.+24     	; 0x67c <DIO_VSet_port_Direction+0xd8>
     664:	c3 36       	cpi	r28, 0x63	; 99
     666:	18 f4       	brcc	.+6      	; 0x66e <DIO_VSet_port_Direction+0xca>
     668:	c1 36       	cpi	r28, 0x61	; 97
     66a:	69 f4       	brne	.+26     	; 0x686 <DIO_VSet_port_Direction+0xe2>
     66c:	05 c0       	rjmp	.+10     	; 0x678 <DIO_VSet_port_Direction+0xd4>
     66e:	c3 36       	cpi	r28, 0x63	; 99
     670:	39 f0       	breq	.+14     	; 0x680 <DIO_VSet_port_Direction+0xdc>
     672:	c4 36       	cpi	r28, 0x64	; 100
     674:	41 f4       	brne	.+16     	; 0x686 <DIO_VSet_port_Direction+0xe2>
     676:	06 c0       	rjmp	.+12     	; 0x684 <DIO_VSet_port_Direction+0xe0>
		{
			case'a':
			case'A':
			DDRA_ = 0;
     678:	14 b8       	out	0x04, r1	; 4
			break;
     67a:	05 c0       	rjmp	.+10     	; 0x686 <DIO_VSet_port_Direction+0xe2>
			case 'b':
			case 'B':
			DDRB_ = 0;
     67c:	14 b8       	out	0x04, r1	; 4
			break;
     67e:	03 c0       	rjmp	.+6      	; 0x686 <DIO_VSet_port_Direction+0xe2>
			case 'C':
			case 'c':
			DDRC_ = 0;
     680:	17 b8       	out	0x07, r1	; 7
			break;
     682:	01 c0       	rjmp	.+2      	; 0x686 <DIO_VSet_port_Direction+0xe2>
			case 'd':
			case 'D':
			DDRD_ = 0;
     684:	1a b8       	out	0x0a, r1	; 10
			break;
		}
	}
}
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <DIO_VWrite_port>:

void DIO_VWrite_port(unsigned char port , unsigned char val)
{
		switch(port)
     68e:	84 34       	cpi	r24, 0x44	; 68
     690:	d9 f0       	breq	.+54     	; 0x6c8 <DIO_VWrite_port+0x3a>
     692:	85 34       	cpi	r24, 0x45	; 69
     694:	38 f4       	brcc	.+14     	; 0x6a4 <DIO_VWrite_port+0x16>
     696:	82 34       	cpi	r24, 0x42	; 66
     698:	99 f0       	breq	.+38     	; 0x6c0 <DIO_VWrite_port+0x32>
     69a:	83 34       	cpi	r24, 0x43	; 67
     69c:	98 f4       	brcc	.+38     	; 0x6c4 <DIO_VWrite_port+0x36>
     69e:	81 34       	cpi	r24, 0x41	; 65
     6a0:	a1 f4       	brne	.+40     	; 0x6ca <DIO_VWrite_port+0x3c>
     6a2:	0c c0       	rjmp	.+24     	; 0x6bc <DIO_VWrite_port+0x2e>
     6a4:	82 36       	cpi	r24, 0x62	; 98
     6a6:	61 f0       	breq	.+24     	; 0x6c0 <DIO_VWrite_port+0x32>
     6a8:	83 36       	cpi	r24, 0x63	; 99
     6aa:	18 f4       	brcc	.+6      	; 0x6b2 <DIO_VWrite_port+0x24>
     6ac:	81 36       	cpi	r24, 0x61	; 97
     6ae:	69 f4       	brne	.+26     	; 0x6ca <DIO_VWrite_port+0x3c>
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <DIO_VWrite_port+0x2e>
     6b2:	83 36       	cpi	r24, 0x63	; 99
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <DIO_VWrite_port+0x36>
     6b6:	84 36       	cpi	r24, 0x64	; 100
     6b8:	41 f4       	brne	.+16     	; 0x6ca <DIO_VWrite_port+0x3c>
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <DIO_VWrite_port+0x3a>
		{
			case'a':
			case'A':
			PORTA_ = val;
     6bc:	65 b9       	out	0x05, r22	; 5
			break;
     6be:	08 95       	ret
			case 'b':
			case 'B':
			PORTB_ = val;
     6c0:	65 b9       	out	0x05, r22	; 5
			break;
     6c2:	08 95       	ret
			case 'C':
			case 'c':
			PORTC_ = val;
     6c4:	68 b9       	out	0x08, r22	; 8
			break;
     6c6:	08 95       	ret
			case 'd':
			case 'D':
			PORTD_ = val;
     6c8:	6b b9       	out	0x0b, r22	; 11
     6ca:	08 95       	ret

000006cc <DIO_U8Read_port>:
}


unsigned char DIO_U8Read_port(unsigned char port)
{
	switch(port)
     6cc:	84 34       	cpi	r24, 0x44	; 68
     6ce:	d9 f0       	breq	.+54     	; 0x706 <DIO_U8Read_port+0x3a>
     6d0:	85 34       	cpi	r24, 0x45	; 69
     6d2:	38 f4       	brcc	.+14     	; 0x6e2 <DIO_U8Read_port+0x16>
     6d4:	82 34       	cpi	r24, 0x42	; 66
     6d6:	99 f0       	breq	.+38     	; 0x6fe <DIO_U8Read_port+0x32>
     6d8:	83 34       	cpi	r24, 0x43	; 67
     6da:	98 f4       	brcc	.+38     	; 0x702 <DIO_U8Read_port+0x36>
     6dc:	81 34       	cpi	r24, 0x41	; 65
     6de:	a9 f4       	brne	.+42     	; 0x70a <DIO_U8Read_port+0x3e>
     6e0:	0c c0       	rjmp	.+24     	; 0x6fa <DIO_U8Read_port+0x2e>
     6e2:	82 36       	cpi	r24, 0x62	; 98
     6e4:	61 f0       	breq	.+24     	; 0x6fe <DIO_U8Read_port+0x32>
     6e6:	83 36       	cpi	r24, 0x63	; 99
     6e8:	18 f4       	brcc	.+6      	; 0x6f0 <DIO_U8Read_port+0x24>
     6ea:	81 36       	cpi	r24, 0x61	; 97
     6ec:	71 f4       	brne	.+28     	; 0x70a <DIO_U8Read_port+0x3e>
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <DIO_U8Read_port+0x2e>
     6f0:	83 36       	cpi	r24, 0x63	; 99
     6f2:	39 f0       	breq	.+14     	; 0x702 <DIO_U8Read_port+0x36>
     6f4:	84 36       	cpi	r24, 0x64	; 100
     6f6:	49 f4       	brne	.+18     	; 0x70a <DIO_U8Read_port+0x3e>
     6f8:	06 c0       	rjmp	.+12     	; 0x706 <DIO_U8Read_port+0x3a>
	{
		case'a':
		case'A':
			return PINA_ ;
     6fa:	83 b1       	in	r24, 0x03	; 3
     6fc:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PINB_;
     6fe:	83 b1       	in	r24, 0x03	; 3
     700:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PINC_;
     702:	86 b1       	in	r24, 0x06	; 6
     704:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PIND_;
     706:	89 b1       	in	r24, 0x09	; 9
     708:	08 95       	ret
			break;
	}
}
     70a:	08 95       	ret

0000070c <DIO_VToggle_port>:


void DIO_VToggle_port(unsigned char port)

{
	switch(port)
     70c:	84 34       	cpi	r24, 0x44	; 68
     70e:	09 f1       	breq	.+66     	; 0x752 <DIO_VToggle_port+0x46>
     710:	85 34       	cpi	r24, 0x45	; 69
     712:	38 f4       	brcc	.+14     	; 0x722 <DIO_VToggle_port+0x16>
     714:	82 34       	cpi	r24, 0x42	; 66
     716:	a9 f0       	breq	.+42     	; 0x742 <DIO_VToggle_port+0x36>
     718:	83 34       	cpi	r24, 0x43	; 67
     71a:	b8 f4       	brcc	.+46     	; 0x74a <DIO_VToggle_port+0x3e>
     71c:	81 34       	cpi	r24, 0x41	; 65
     71e:	e1 f4       	brne	.+56     	; 0x758 <DIO_VToggle_port+0x4c>
     720:	0c c0       	rjmp	.+24     	; 0x73a <DIO_VToggle_port+0x2e>
     722:	82 36       	cpi	r24, 0x62	; 98
     724:	71 f0       	breq	.+28     	; 0x742 <DIO_VToggle_port+0x36>
     726:	83 36       	cpi	r24, 0x63	; 99
     728:	18 f4       	brcc	.+6      	; 0x730 <DIO_VToggle_port+0x24>
     72a:	81 36       	cpi	r24, 0x61	; 97
     72c:	a9 f4       	brne	.+42     	; 0x758 <DIO_VToggle_port+0x4c>
     72e:	05 c0       	rjmp	.+10     	; 0x73a <DIO_VToggle_port+0x2e>
     730:	83 36       	cpi	r24, 0x63	; 99
     732:	59 f0       	breq	.+22     	; 0x74a <DIO_VToggle_port+0x3e>
     734:	84 36       	cpi	r24, 0x64	; 100
     736:	81 f4       	brne	.+32     	; 0x758 <DIO_VToggle_port+0x4c>
     738:	0c c0       	rjmp	.+24     	; 0x752 <DIO_VToggle_port+0x46>
	{
		case'a':
		case'A':
			return PORTA_ ^= (0xff);
     73a:	85 b1       	in	r24, 0x05	; 5
     73c:	80 95       	com	r24
     73e:	85 b9       	out	0x05, r24	; 5
     740:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PORTB_ ^= (0xff);
     742:	85 b1       	in	r24, 0x05	; 5
     744:	80 95       	com	r24
     746:	85 b9       	out	0x05, r24	; 5
     748:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PORTC_ ^= (0xff);
     74a:	88 b1       	in	r24, 0x08	; 8
     74c:	80 95       	com	r24
     74e:	88 b9       	out	0x08, r24	; 8
     750:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PORTD_ ^= (0xff);
     752:	8b b1       	in	r24, 0x0b	; 11
     754:	80 95       	com	r24
     756:	8b b9       	out	0x0b, r24	; 11
     758:	08 95       	ret

0000075a <Dio_connect_pullup>:
}


void Dio_connect_pullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     75a:	82 34       	cpi	r24, 0x42	; 66
     75c:	51 f1       	breq	.+84     	; 0x7b2 <Dio_connect_pullup+0x58>
     75e:	83 34       	cpi	r24, 0x43	; 67
     760:	20 f4       	brcc	.+8      	; 0x76a <Dio_connect_pullup+0x10>
     762:	81 34       	cpi	r24, 0x41	; 65
     764:	09 f0       	breq	.+2      	; 0x768 <Dio_connect_pullup+0xe>
     766:	7b c0       	rjmp	.+246    	; 0x85e <Dio_connect_pullup+0x104>
     768:	07 c0       	rjmp	.+14     	; 0x778 <Dio_connect_pullup+0x1e>
     76a:	83 34       	cpi	r24, 0x43	; 67
     76c:	09 f4       	brne	.+2      	; 0x770 <Dio_connect_pullup+0x16>
     76e:	3e c0       	rjmp	.+124    	; 0x7ec <Dio_connect_pullup+0x92>
     770:	84 34       	cpi	r24, 0x44	; 68
     772:	09 f0       	breq	.+2      	; 0x776 <Dio_connect_pullup+0x1c>
     774:	74 c0       	rjmp	.+232    	; 0x85e <Dio_connect_pullup+0x104>
     776:	57 c0       	rjmp	.+174    	; 0x826 <Dio_connect_pullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     778:	41 30       	cpi	r20, 0x01	; 1
     77a:	69 f4       	brne	.+26     	; 0x796 <Dio_connect_pullup+0x3c>
		{
			SET_BIT(PORTA_,pinnumber);
     77c:	25 b1       	in	r18, 0x05	; 5
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	ac 01       	movw	r20, r24
     784:	02 c0       	rjmp	.+4      	; 0x78a <Dio_connect_pullup+0x30>
     786:	44 0f       	add	r20, r20
     788:	55 1f       	adc	r21, r21
     78a:	6a 95       	dec	r22
     78c:	e2 f7       	brpl	.-8      	; 0x786 <Dio_connect_pullup+0x2c>
     78e:	ba 01       	movw	r22, r20
     790:	62 2b       	or	r22, r18
     792:	65 b9       	out	0x05, r22	; 5
     794:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA_,pinnumber);
     796:	25 b1       	in	r18, 0x05	; 5
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	ac 01       	movw	r20, r24
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <Dio_connect_pullup+0x4a>
     7a0:	44 0f       	add	r20, r20
     7a2:	55 1f       	adc	r21, r21
     7a4:	6a 95       	dec	r22
     7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <Dio_connect_pullup+0x46>
     7a8:	ba 01       	movw	r22, r20
     7aa:	60 95       	com	r22
     7ac:	62 23       	and	r22, r18
     7ae:	65 b9       	out	0x05, r22	; 5
     7b0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
     7b2:	41 30       	cpi	r20, 0x01	; 1
     7b4:	69 f4       	brne	.+26     	; 0x7d0 <Dio_connect_pullup+0x76>
		{
			SET_BIT(PORTB_,pinnumber);
     7b6:	25 b1       	in	r18, 0x05	; 5
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	ac 01       	movw	r20, r24
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <Dio_connect_pullup+0x6a>
     7c0:	44 0f       	add	r20, r20
     7c2:	55 1f       	adc	r21, r21
     7c4:	6a 95       	dec	r22
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <Dio_connect_pullup+0x66>
     7c8:	ba 01       	movw	r22, r20
     7ca:	62 2b       	or	r22, r18
     7cc:	65 b9       	out	0x05, r22	; 5
     7ce:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB_,pinnumber);
     7d0:	25 b1       	in	r18, 0x05	; 5
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ac 01       	movw	r20, r24
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <Dio_connect_pullup+0x84>
     7da:	44 0f       	add	r20, r20
     7dc:	55 1f       	adc	r21, r21
     7de:	6a 95       	dec	r22
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <Dio_connect_pullup+0x80>
     7e2:	ba 01       	movw	r22, r20
     7e4:	60 95       	com	r22
     7e6:	62 23       	and	r22, r18
     7e8:	65 b9       	out	0x05, r22	; 5
     7ea:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
     7ec:	41 30       	cpi	r20, 0x01	; 1
     7ee:	69 f4       	brne	.+26     	; 0x80a <Dio_connect_pullup+0xb0>
		{
			SET_BIT(PORTC_,pinnumber);
     7f0:	28 b1       	in	r18, 0x08	; 8
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	ac 01       	movw	r20, r24
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <Dio_connect_pullup+0xa4>
     7fa:	44 0f       	add	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	6a 95       	dec	r22
     800:	e2 f7       	brpl	.-8      	; 0x7fa <Dio_connect_pullup+0xa0>
     802:	ba 01       	movw	r22, r20
     804:	62 2b       	or	r22, r18
     806:	68 b9       	out	0x08, r22	; 8
     808:	08 95       	ret
			
		}
		else
		{
			CLEAR_BIT(PORTC_,pinnumber);
     80a:	28 b1       	in	r18, 0x08	; 8
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	ac 01       	movw	r20, r24
     812:	02 c0       	rjmp	.+4      	; 0x818 <Dio_connect_pullup+0xbe>
     814:	44 0f       	add	r20, r20
     816:	55 1f       	adc	r21, r21
     818:	6a 95       	dec	r22
     81a:	e2 f7       	brpl	.-8      	; 0x814 <Dio_connect_pullup+0xba>
     81c:	ba 01       	movw	r22, r20
     81e:	60 95       	com	r22
     820:	62 23       	and	r22, r18
     822:	68 b9       	out	0x08, r22	; 8
     824:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
     826:	41 30       	cpi	r20, 0x01	; 1
     828:	69 f4       	brne	.+26     	; 0x844 <Dio_connect_pullup+0xea>
		{
			SET_BIT(PORTD_,pinnumber);
     82a:	2b b1       	in	r18, 0x0b	; 11
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	ac 01       	movw	r20, r24
     832:	02 c0       	rjmp	.+4      	; 0x838 <Dio_connect_pullup+0xde>
     834:	44 0f       	add	r20, r20
     836:	55 1f       	adc	r21, r21
     838:	6a 95       	dec	r22
     83a:	e2 f7       	brpl	.-8      	; 0x834 <Dio_connect_pullup+0xda>
     83c:	ba 01       	movw	r22, r20
     83e:	62 2b       	or	r22, r18
     840:	6b b9       	out	0x0b, r22	; 11
     842:	08 95       	ret
			
		}
		else
		{
			CLEAR_BIT(PORTD_,pinnumber);
     844:	2b b1       	in	r18, 0x0b	; 11
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	ac 01       	movw	r20, r24
     84c:	02 c0       	rjmp	.+4      	; 0x852 <Dio_connect_pullup+0xf8>
     84e:	44 0f       	add	r20, r20
     850:	55 1f       	adc	r21, r21
     852:	6a 95       	dec	r22
     854:	e2 f7       	brpl	.-8      	; 0x84e <Dio_connect_pullup+0xf4>
     856:	ba 01       	movw	r22, r20
     858:	60 95       	com	r22
     85a:	62 23       	and	r22, r18
     85c:	6b b9       	out	0x0b, r22	; 11
     85e:	08 95       	ret

00000860 <Dio_Write_lowNibble2>:
	}
}


void Dio_Write_lowNibble2(unsigned char port , unsigned char val )
{
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	00 d0       	rcall	.+0      	; 0x86c <Dio_Write_lowNibble2+0xc>
     86c:	00 d0       	rcall	.+0      	; 0x86e <Dio_Write_lowNibble2+0xe>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	18 2f       	mov	r17, r24
	const char *bit_as_string[] = {"0", "1"};
     874:	8e e2       	ldi	r24, 0x2E	; 46
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	84 e2       	ldi	r24, 0x24	; 36
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vwrite(port , 0 , bit_as_string[READ_BIT(val,0)]);
     884:	e6 2e       	mov	r14, r22
     886:	ff 24       	eor	r15, r15
     888:	f7 01       	movw	r30, r14
     88a:	e1 70       	andi	r30, 0x01	; 1
     88c:	f0 70       	andi	r31, 0x00	; 0
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	8c 0f       	add	r24, r28
     898:	9d 1f       	adc	r25, r29
     89a:	e8 0f       	add	r30, r24
     89c:	f9 1f       	adc	r31, r25
     89e:	40 81       	ld	r20, Z
     8a0:	51 81       	ldd	r21, Z+1	; 0x01
     8a2:	81 2f       	mov	r24, r17
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(port , 1 , bit_as_string[READ_BIT(val,1)]);
     8aa:	f7 01       	movw	r30, r14
     8ac:	e2 70       	andi	r30, 0x02	; 2
     8ae:	f0 70       	andi	r31, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	8c 0f       	add	r24, r28
     8b6:	9d 1f       	adc	r25, r29
     8b8:	e8 0f       	add	r30, r24
     8ba:	f9 1f       	adc	r31, r25
     8bc:	40 81       	ld	r20, Z
     8be:	51 81       	ldd	r21, Z+1	; 0x01
     8c0:	81 2f       	mov	r24, r17
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(port , 2 , bit_as_string[READ_BIT(val,2)]);
     8c8:	f7 01       	movw	r30, r14
     8ca:	e4 70       	andi	r30, 0x04	; 4
     8cc:	f0 70       	andi	r31, 0x00	; 0
     8ce:	f5 95       	asr	r31
     8d0:	e7 95       	ror	r30
     8d2:	f5 95       	asr	r31
     8d4:	e7 95       	ror	r30
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	8c 0f       	add	r24, r28
     8e0:	9d 1f       	adc	r25, r29
     8e2:	e8 0f       	add	r30, r24
     8e4:	f9 1f       	adc	r31, r25
     8e6:	40 81       	ld	r20, Z
     8e8:	51 81       	ldd	r21, Z+1	; 0x01
     8ea:	81 2f       	mov	r24, r17
     8ec:	62 e0       	ldi	r22, 0x02	; 2
     8ee:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(port , 3 , bit_as_string[READ_BIT(val,3)]);
     8f2:	98 e0       	ldi	r25, 0x08	; 8
     8f4:	e9 22       	and	r14, r25
     8f6:	ff 24       	eor	r15, r15
     8f8:	f7 01       	movw	r30, r14
     8fa:	f5 95       	asr	r31
     8fc:	e7 95       	ror	r30
     8fe:	f5 95       	asr	r31
     900:	e7 95       	ror	r30
     902:	f5 95       	asr	r31
     904:	e7 95       	ror	r30
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	8c 0f       	add	r24, r28
     910:	9d 1f       	adc	r25, r29
     912:	e8 0f       	add	r30, r24
     914:	f9 1f       	adc	r31, r25
     916:	40 81       	ld	r20, Z
     918:	51 81       	ldd	r21, Z+1	; 0x01
     91a:	81 2f       	mov	r24, r17
     91c:	63 e0       	ldi	r22, 0x03	; 3
     91e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	08 95       	ret

00000936 <Dio_Write_highNibble2>:

void Dio_Write_highNibble2(unsigned char port , unsigned char val )
{
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	00 d0       	rcall	.+0      	; 0x942 <Dio_Write_highNibble2+0xc>
     942:	00 d0       	rcall	.+0      	; 0x944 <Dio_Write_highNibble2+0xe>
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	18 2f       	mov	r17, r24
	const char *bit_as_string[] = {"0", "1"};
     94a:	8e e2       	ldi	r24, 0x2E	; 46
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	9a 83       	std	Y+2, r25	; 0x02
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	84 e2       	ldi	r24, 0x24	; 36
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vwrite(port , 4 , bit_as_string[READ_BIT(val,0)]);
     95a:	e6 2e       	mov	r14, r22
     95c:	ff 24       	eor	r15, r15
     95e:	f7 01       	movw	r30, r14
     960:	e1 70       	andi	r30, 0x01	; 1
     962:	f0 70       	andi	r31, 0x00	; 0
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8c 0f       	add	r24, r28
     96e:	9d 1f       	adc	r25, r29
     970:	e8 0f       	add	r30, r24
     972:	f9 1f       	adc	r31, r25
     974:	40 81       	ld	r20, Z
     976:	51 81       	ldd	r21, Z+1	; 0x01
     978:	81 2f       	mov	r24, r17
     97a:	64 e0       	ldi	r22, 0x04	; 4
     97c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(port , 5 , bit_as_string[READ_BIT(val,1)]);
     980:	f7 01       	movw	r30, r14
     982:	e2 70       	andi	r30, 0x02	; 2
     984:	f0 70       	andi	r31, 0x00	; 0
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	8c 0f       	add	r24, r28
     98c:	9d 1f       	adc	r25, r29
     98e:	e8 0f       	add	r30, r24
     990:	f9 1f       	adc	r31, r25
     992:	40 81       	ld	r20, Z
     994:	51 81       	ldd	r21, Z+1	; 0x01
     996:	81 2f       	mov	r24, r17
     998:	65 e0       	ldi	r22, 0x05	; 5
     99a:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(port , 6 , bit_as_string[READ_BIT(val,2)]);
     99e:	f7 01       	movw	r30, r14
     9a0:	e4 70       	andi	r30, 0x04	; 4
     9a2:	f0 70       	andi	r31, 0x00	; 0
     9a4:	f5 95       	asr	r31
     9a6:	e7 95       	ror	r30
     9a8:	f5 95       	asr	r31
     9aa:	e7 95       	ror	r30
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	8c 0f       	add	r24, r28
     9b6:	9d 1f       	adc	r25, r29
     9b8:	e8 0f       	add	r30, r24
     9ba:	f9 1f       	adc	r31, r25
     9bc:	40 81       	ld	r20, Z
     9be:	51 81       	ldd	r21, Z+1	; 0x01
     9c0:	81 2f       	mov	r24, r17
     9c2:	66 e0       	ldi	r22, 0x06	; 6
     9c4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(port , 7 , bit_as_string[READ_BIT(val,3)]);
     9c8:	98 e0       	ldi	r25, 0x08	; 8
     9ca:	e9 22       	and	r14, r25
     9cc:	ff 24       	eor	r15, r15
     9ce:	f7 01       	movw	r30, r14
     9d0:	f5 95       	asr	r31
     9d2:	e7 95       	ror	r30
     9d4:	f5 95       	asr	r31
     9d6:	e7 95       	ror	r30
     9d8:	f5 95       	asr	r31
     9da:	e7 95       	ror	r30
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	8c 0f       	add	r24, r28
     9e6:	9d 1f       	adc	r25, r29
     9e8:	e8 0f       	add	r30, r24
     9ea:	f9 1f       	adc	r31, r25
     9ec:	40 81       	ld	r20, Z
     9ee:	51 81       	ldd	r21, Z+1	; 0x01
     9f0:	81 2f       	mov	r24, r17
     9f2:	67 e0       	ldi	r22, 0x07	; 7
     9f4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
}
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	08 95       	ret

00000a0c <Dio_Write_lowNibble>:

void Dio_Write_lowNibble(unsigned char port , unsigned char val )
{
	val &=0x0f;
     a0c:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     a0e:	84 34       	cpi	r24, 0x44	; 68
     a10:	51 f1       	breq	.+84     	; 0xa66 <Dio_Write_lowNibble+0x5a>
     a12:	85 34       	cpi	r24, 0x45	; 69
     a14:	38 f4       	brcc	.+14     	; 0xa24 <Dio_Write_lowNibble+0x18>
     a16:	82 34       	cpi	r24, 0x42	; 66
     a18:	c1 f0       	breq	.+48     	; 0xa4a <Dio_Write_lowNibble+0x3e>
     a1a:	83 34       	cpi	r24, 0x43	; 67
     a1c:	e8 f4       	brcc	.+58     	; 0xa58 <Dio_Write_lowNibble+0x4c>
     a1e:	81 34       	cpi	r24, 0x41	; 65
     a20:	41 f5       	brne	.+80     	; 0xa72 <Dio_Write_lowNibble+0x66>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <Dio_Write_lowNibble+0x30>
     a24:	82 36       	cpi	r24, 0x62	; 98
     a26:	89 f0       	breq	.+34     	; 0xa4a <Dio_Write_lowNibble+0x3e>
     a28:	83 36       	cpi	r24, 0x63	; 99
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <Dio_Write_lowNibble+0x26>
     a2c:	81 36       	cpi	r24, 0x61	; 97
     a2e:	09 f5       	brne	.+66     	; 0xa72 <Dio_Write_lowNibble+0x66>
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <Dio_Write_lowNibble+0x30>
     a32:	83 36       	cpi	r24, 0x63	; 99
     a34:	89 f0       	breq	.+34     	; 0xa58 <Dio_Write_lowNibble+0x4c>
     a36:	84 36       	cpi	r24, 0x64	; 100
     a38:	e1 f4       	brne	.+56     	; 0xa72 <Dio_Write_lowNibble+0x66>
     a3a:	15 c0       	rjmp	.+42     	; 0xa66 <Dio_Write_lowNibble+0x5a>
	{
		case'A':
		case'a':
			PORTA_&=0xf0;
     a3c:	85 b1       	in	r24, 0x05	; 5
     a3e:	80 7f       	andi	r24, 0xF0	; 240
     a40:	85 b9       	out	0x05, r24	; 5
			PORTA_|=val;
     a42:	85 b1       	in	r24, 0x05	; 5
     a44:	68 2b       	or	r22, r24
     a46:	65 b9       	out	0x05, r22	; 5
			break;
     a48:	08 95       	ret
		case'b':
		case'B':
			PORTB_&=0xf0;
     a4a:	85 b1       	in	r24, 0x05	; 5
     a4c:	80 7f       	andi	r24, 0xF0	; 240
     a4e:	85 b9       	out	0x05, r24	; 5
			PORTB_|=val;
     a50:	85 b1       	in	r24, 0x05	; 5
     a52:	68 2b       	or	r22, r24
     a54:	65 b9       	out	0x05, r22	; 5
			break;
     a56:	08 95       	ret
		case'C':
		case'c':
			PORTC_&=0xf0;
     a58:	88 b1       	in	r24, 0x08	; 8
     a5a:	80 7f       	andi	r24, 0xF0	; 240
     a5c:	88 b9       	out	0x08, r24	; 8
			PORTC_|=val;
     a5e:	88 b1       	in	r24, 0x08	; 8
     a60:	68 2b       	or	r22, r24
     a62:	68 b9       	out	0x08, r22	; 8
			break;
     a64:	08 95       	ret
		case'D':
		case'd':
			PORTD_&=0xf0;
     a66:	8b b1       	in	r24, 0x0b	; 11
     a68:	80 7f       	andi	r24, 0xF0	; 240
     a6a:	8b b9       	out	0x0b, r24	; 11
			PORTD_|=val;
     a6c:	8b b1       	in	r24, 0x0b	; 11
     a6e:	68 2b       	or	r22, r24
     a70:	6b b9       	out	0x0b, r22	; 11
     a72:	08 95       	ret

00000a74 <Dio_Write_highNibble>:



void Dio_Write_highNibble(unsigned char port , unsigned char val )
{
	val<<=4;
     a74:	62 95       	swap	r22
     a76:	60 7f       	andi	r22, 0xF0	; 240
	switch(port) 
     a78:	84 34       	cpi	r24, 0x44	; 68
     a7a:	51 f1       	breq	.+84     	; 0xad0 <Dio_Write_highNibble+0x5c>
     a7c:	85 34       	cpi	r24, 0x45	; 69
     a7e:	38 f4       	brcc	.+14     	; 0xa8e <Dio_Write_highNibble+0x1a>
     a80:	82 34       	cpi	r24, 0x42	; 66
     a82:	c1 f0       	breq	.+48     	; 0xab4 <Dio_Write_highNibble+0x40>
     a84:	83 34       	cpi	r24, 0x43	; 67
     a86:	e8 f4       	brcc	.+58     	; 0xac2 <Dio_Write_highNibble+0x4e>
     a88:	81 34       	cpi	r24, 0x41	; 65
     a8a:	41 f5       	brne	.+80     	; 0xadc <Dio_Write_highNibble+0x68>
     a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <Dio_Write_highNibble+0x32>
     a8e:	82 36       	cpi	r24, 0x62	; 98
     a90:	89 f0       	breq	.+34     	; 0xab4 <Dio_Write_highNibble+0x40>
     a92:	83 36       	cpi	r24, 0x63	; 99
     a94:	18 f4       	brcc	.+6      	; 0xa9c <Dio_Write_highNibble+0x28>
     a96:	81 36       	cpi	r24, 0x61	; 97
     a98:	09 f5       	brne	.+66     	; 0xadc <Dio_Write_highNibble+0x68>
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <Dio_Write_highNibble+0x32>
     a9c:	83 36       	cpi	r24, 0x63	; 99
     a9e:	89 f0       	breq	.+34     	; 0xac2 <Dio_Write_highNibble+0x4e>
     aa0:	84 36       	cpi	r24, 0x64	; 100
     aa2:	e1 f4       	brne	.+56     	; 0xadc <Dio_Write_highNibble+0x68>
     aa4:	15 c0       	rjmp	.+42     	; 0xad0 <Dio_Write_highNibble+0x5c>
	{
		case'A':
		case'a':
			PORTA_&=0xf0;
     aa6:	85 b1       	in	r24, 0x05	; 5
     aa8:	80 7f       	andi	r24, 0xF0	; 240
     aaa:	85 b9       	out	0x05, r24	; 5
			PORTA_|=val;
     aac:	85 b1       	in	r24, 0x05	; 5
     aae:	68 2b       	or	r22, r24
     ab0:	65 b9       	out	0x05, r22	; 5
			break;
     ab2:	08 95       	ret
		case'b':
		case'B':
			PORTB_&=0xf0;
     ab4:	85 b1       	in	r24, 0x05	; 5
     ab6:	80 7f       	andi	r24, 0xF0	; 240
     ab8:	85 b9       	out	0x05, r24	; 5
			PORTB_|=val;
     aba:	85 b1       	in	r24, 0x05	; 5
     abc:	68 2b       	or	r22, r24
     abe:	65 b9       	out	0x05, r22	; 5
			break;
     ac0:	08 95       	ret
		case'C':
		case'c':
			PORTC_&=0xf0;
     ac2:	88 b1       	in	r24, 0x08	; 8
     ac4:	80 7f       	andi	r24, 0xF0	; 240
     ac6:	88 b9       	out	0x08, r24	; 8
			PORTC_|=val;
     ac8:	88 b1       	in	r24, 0x08	; 8
     aca:	68 2b       	or	r22, r24
     acc:	68 b9       	out	0x08, r22	; 8
			break;
     ace:	08 95       	ret
		case'D':
		case'd':
			PORTD_&=0xf0;
     ad0:	8b b1       	in	r24, 0x0b	; 11
     ad2:	80 7f       	andi	r24, 0xF0	; 240
     ad4:	8b b9       	out	0x0b, r24	; 11
			PORTD_|=val;
     ad6:	8b b1       	in	r24, 0x0b	; 11
     ad8:	68 2b       	or	r22, r24
     ada:	6b b9       	out	0x0b, r22	; 11
     adc:	08 95       	ret

00000ade <Dio_Set_lowNibble>:
		
	}
}

Dio_Set_lowNibble(unsigned char port)
{
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	18 2f       	mov	r17, r24
	Dio_VSet_pin_Dir(port , 0,"OUTPUT");
     ae6:	c0 e0       	ldi	r28, 0x00	; 0
     ae8:	d1 e0       	ldi	r29, 0x01	; 1
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	ae 01       	movw	r20, r28
     aee:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 1,"OUTPUT");
     af2:	81 2f       	mov	r24, r17
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	ae 01       	movw	r20, r28
     af8:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 2,"OUTPUT");
     afc:	81 2f       	mov	r24, r17
     afe:	62 e0       	ldi	r22, 0x02	; 2
     b00:	ae 01       	movw	r20, r28
     b02:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 3,"OUTPUT");
     b06:	81 2f       	mov	r24, r17
     b08:	63 e0       	ldi	r22, 0x03	; 3
     b0a:	ae 01       	movw	r20, r28
     b0c:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	08 95       	ret

00000b18 <Dio_Set_highNibble>:

Dio_Set_highNibble(unsigned char port)
{
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	18 2f       	mov	r17, r24
	Dio_VSet_pin_Dir(port , 4,"OUTPUT");
     b20:	c0 e0       	ldi	r28, 0x00	; 0
     b22:	d1 e0       	ldi	r29, 0x01	; 1
     b24:	64 e0       	ldi	r22, 0x04	; 4
     b26:	ae 01       	movw	r20, r28
     b28:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 5,"OUTPUT");
     b2c:	81 2f       	mov	r24, r17
     b2e:	65 e0       	ldi	r22, 0x05	; 5
     b30:	ae 01       	movw	r20, r28
     b32:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 6,"OUTPUT");
     b36:	81 2f       	mov	r24, r17
     b38:	66 e0       	ldi	r22, 0x06	; 6
     b3a:	ae 01       	movw	r20, r28
     b3c:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port , 7,"OUTPUT");
     b40:	81 2f       	mov	r24, r17
     b42:	67 e0       	ldi	r22, 0x07	; 7
     b44:	ae 01       	movw	r20, r28
     b46:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	08 95       	ret

00000b52 <keypad_intialize>:
#define LOW "LOW"
#define NOTPRESSED 0xff


void keypad_intialize(unsigned char port)
{
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	c8 2f       	mov	r28, r24
	Dio_VSet_pin_Dir(port ,0,"OUTPUT");
     b5a:	00 e3       	ldi	r16, 0x30	; 48
     b5c:	11 e0       	ldi	r17, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	a8 01       	movw	r20, r16
     b62:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 1,"OUTPUT");
     b66:	8c 2f       	mov	r24, r28
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	a8 01       	movw	r20, r16
     b6c:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 2,"OUTPUT");
     b70:	8c 2f       	mov	r24, r28
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	a8 01       	movw	r20, r16
     b76:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 3,"OUTPUT");
     b7a:	8c 2f       	mov	r24, r28
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	a8 01       	movw	r20, r16
     b80:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 4,"INPUT");
     b84:	07 e3       	ldi	r16, 0x37	; 55
     b86:	11 e0       	ldi	r17, 0x01	; 1
     b88:	8c 2f       	mov	r24, r28
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	a8 01       	movw	r20, r16
     b8e:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 5,"INPUT");
     b92:	8c 2f       	mov	r24, r28
     b94:	65 e0       	ldi	r22, 0x05	; 5
     b96:	a8 01       	movw	r20, r16
     b98:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 6,"INPUT");
     b9c:	8c 2f       	mov	r24, r28
     b9e:	66 e0       	ldi	r22, 0x06	; 6
     ba0:	a8 01       	movw	r20, r16
     ba2:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(port, 7,"INPUT");
     ba6:	8c 2f       	mov	r24, r28
     ba8:	67 e0       	ldi	r22, 0x07	; 7
     baa:	a8 01       	movw	r20, r16
     bac:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	
	Dio_connect_pullup(port, 4 , 1);
     bb0:	8c 2f       	mov	r24, r28
     bb2:	64 e0       	ldi	r22, 0x04	; 4
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_connect_pullup>
	Dio_connect_pullup(port, 5 , 1);
     bba:	8c 2f       	mov	r24, r28
     bbc:	65 e0       	ldi	r22, 0x05	; 5
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_connect_pullup>
	Dio_connect_pullup(port, 6 , 1);
     bc4:	8c 2f       	mov	r24, r28
     bc6:	66 e0       	ldi	r22, 0x06	; 6
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_connect_pullup>
	Dio_connect_pullup(port, 7 , 1);
     bce:	8c 2f       	mov	r24, r28
     bd0:	67 e0       	ldi	r22, 0x07	; 7
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_connect_pullup>
}
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <Keypad_Pressed_value8u>:



unsigned char Keypad_Pressed_value8u(void)
{	unsigned char x = 0;
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
	// First row
	DIO_vwrite(Keypad_port,0,LOW);
     be8:	84 e6       	ldi	r24, 0x64	; 100
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	4d e3       	ldi	r20, 0x3D	; 61
     bee:	51 e0       	ldi	r21, 0x01	; 1
     bf0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,HIGH);
     bf4:	c1 e4       	ldi	r28, 0x41	; 65
     bf6:	d1 e0       	ldi	r29, 0x01	; 1
     bf8:	84 e6       	ldi	r24, 0x64	; 100
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	ae 01       	movw	r20, r28
     bfe:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,HIGH);
     c02:	84 e6       	ldi	r24, 0x64	; 100
     c04:	62 e0       	ldi	r22, 0x02	; 2
     c06:	ae 01       	movw	r20, r28
     c08:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,HIGH);
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	63 e0       	ldi	r22, 0x03	; 3
     c10:	ae 01       	movw	r20, r28
     c12:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
     c16:	83 ec       	ldi	r24, 0xC3	; 195
     c18:	99 e0       	ldi	r25, 0x09	; 9
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <Keypad_Pressed_value8u+0x3a>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <Keypad_Pressed_value8u+0x40>
     c20:	00 00       	nop
	_delay_ms(10);  // small delay for settling
	if (!READ_BIT(Keypad_pin,4)) x= '1';
     c22:	4c 9b       	sbis	0x09, 4	; 9
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <Keypad_Pressed_value8u+0x4a>
}



unsigned char Keypad_Pressed_value8u(void)
{	unsigned char x = 0;
     c26:	c0 e0       	ldi	r28, 0x00	; 0
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <Keypad_Pressed_value8u+0x4c>
	DIO_vwrite(Keypad_port,0,LOW);
	DIO_vwrite(Keypad_port,1,HIGH);
	DIO_vwrite(Keypad_port,2,HIGH);
	DIO_vwrite(Keypad_port,3,HIGH);
	_delay_ms(10);  // small delay for settling
	if (!READ_BIT(Keypad_pin,4)) x= '1';
     c2a:	c1 e3       	ldi	r28, 0x31	; 49
	if (!READ_BIT(Keypad_pin,5)) x= '2';
     c2c:	4d 9b       	sbis	0x09, 5	; 9
     c2e:	c2 e3       	ldi	r28, 0x32	; 50
	if (!READ_BIT(Keypad_pin,6)) x= '3';
     c30:	4e 9b       	sbis	0x09, 6	; 9
     c32:	c3 e3       	ldi	r28, 0x33	; 51
	if (!READ_BIT(Keypad_pin,7)) x= 'A';
     c34:	4f 9b       	sbis	0x09, 7	; 9
     c36:	c1 e4       	ldi	r28, 0x41	; 65
	
	// Second row
	DIO_vwrite(Keypad_port,0,HIGH);
     c38:	01 e4       	ldi	r16, 0x41	; 65
     c3a:	11 e0       	ldi	r17, 0x01	; 1
     c3c:	84 e6       	ldi	r24, 0x64	; 100
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	a8 01       	movw	r20, r16
     c42:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,LOW);
     c46:	84 e6       	ldi	r24, 0x64	; 100
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	4d e3       	ldi	r20, 0x3D	; 61
     c4c:	51 e0       	ldi	r21, 0x01	; 1
     c4e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,HIGH);
     c52:	84 e6       	ldi	r24, 0x64	; 100
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	a8 01       	movw	r20, r16
     c58:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,HIGH);
     c5c:	84 e6       	ldi	r24, 0x64	; 100
     c5e:	63 e0       	ldi	r22, 0x03	; 3
     c60:	a8 01       	movw	r20, r16
     c62:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
     c66:	83 ec       	ldi	r24, 0xC3	; 195
     c68:	99 e0       	ldi	r25, 0x09	; 9
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <Keypad_Pressed_value8u+0x8a>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <Keypad_Pressed_value8u+0x90>
     c70:	00 00       	nop
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) x= '4';
     c72:	4c 9b       	sbis	0x09, 4	; 9
     c74:	c4 e3       	ldi	r28, 0x34	; 52
	if (!READ_BIT(Keypad_pin,5)) x= '5';
     c76:	4d 9b       	sbis	0x09, 5	; 9
     c78:	c5 e3       	ldi	r28, 0x35	; 53
	if (!READ_BIT(Keypad_pin,6)) x= '6';
     c7a:	4e 9b       	sbis	0x09, 6	; 9
     c7c:	c6 e3       	ldi	r28, 0x36	; 54
	if (!READ_BIT(Keypad_pin,7)) x= 'B';
     c7e:	4f 9b       	sbis	0x09, 7	; 9
     c80:	c2 e4       	ldi	r28, 0x42	; 66
	
	// Third row
	DIO_vwrite(Keypad_port,0,HIGH);
     c82:	01 e4       	ldi	r16, 0x41	; 65
     c84:	11 e0       	ldi	r17, 0x01	; 1
     c86:	84 e6       	ldi	r24, 0x64	; 100
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	a8 01       	movw	r20, r16
     c8c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,HIGH);
     c90:	84 e6       	ldi	r24, 0x64	; 100
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	a8 01       	movw	r20, r16
     c96:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,LOW);
     c9a:	84 e6       	ldi	r24, 0x64	; 100
     c9c:	62 e0       	ldi	r22, 0x02	; 2
     c9e:	4d e3       	ldi	r20, 0x3D	; 61
     ca0:	51 e0       	ldi	r21, 0x01	; 1
     ca2:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,HIGH);
     ca6:	84 e6       	ldi	r24, 0x64	; 100
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	a8 01       	movw	r20, r16
     cac:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
     cb0:	83 ec       	ldi	r24, 0xC3	; 195
     cb2:	99 e0       	ldi	r25, 0x09	; 9
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <Keypad_Pressed_value8u+0xd4>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <Keypad_Pressed_value8u+0xda>
     cba:	00 00       	nop
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) x= '7';
     cbc:	4c 9b       	sbis	0x09, 4	; 9
     cbe:	c7 e3       	ldi	r28, 0x37	; 55
	if (!READ_BIT(Keypad_pin,5)) x= '8';
     cc0:	4d 9b       	sbis	0x09, 5	; 9
     cc2:	c8 e3       	ldi	r28, 0x38	; 56
	if (!READ_BIT(Keypad_pin,6)) x= '9';
     cc4:	4e 9b       	sbis	0x09, 6	; 9
     cc6:	c9 e3       	ldi	r28, 0x39	; 57
	if (!READ_BIT(Keypad_pin,7)) x= 'c';
     cc8:	4f 9b       	sbis	0x09, 7	; 9
     cca:	c3 e6       	ldi	r28, 0x63	; 99
	
	// Fourth row
	DIO_vwrite(Keypad_port,0,HIGH);
     ccc:	01 e4       	ldi	r16, 0x41	; 65
     cce:	11 e0       	ldi	r17, 0x01	; 1
     cd0:	84 e6       	ldi	r24, 0x64	; 100
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	a8 01       	movw	r20, r16
     cd6:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,1,HIGH);
     cda:	84 e6       	ldi	r24, 0x64	; 100
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	a8 01       	movw	r20, r16
     ce0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,2,HIGH);
     ce4:	84 e6       	ldi	r24, 0x64	; 100
     ce6:	62 e0       	ldi	r22, 0x02	; 2
     ce8:	a8 01       	movw	r20, r16
     cea:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	DIO_vwrite(Keypad_port,3,LOW);
     cee:	84 e6       	ldi	r24, 0x64	; 100
     cf0:	63 e0       	ldi	r22, 0x03	; 3
     cf2:	4d e3       	ldi	r20, 0x3D	; 61
     cf4:	51 e0       	ldi	r21, 0x01	; 1
     cf6:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
     cfa:	83 ec       	ldi	r24, 0xC3	; 195
     cfc:	99 e0       	ldi	r25, 0x09	; 9
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <Keypad_Pressed_value8u+0x11e>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <Keypad_Pressed_value8u+0x124>
     d04:	00 00       	nop
	_delay_ms(10);
	if (!READ_BIT(Keypad_pin,4)) x= '*';
     d06:	4c 9b       	sbis	0x09, 4	; 9
     d08:	ca e2       	ldi	r28, 0x2A	; 42
	if (!READ_BIT(Keypad_pin,5)) x= '0';
     d0a:	4d 9b       	sbis	0x09, 5	; 9
     d0c:	c0 e3       	ldi	r28, 0x30	; 48
	if (!READ_BIT(Keypad_pin,6)) x= '#';
     d0e:	4e 9b       	sbis	0x09, 6	; 9
     d10:	c3 e2       	ldi	r28, 0x23	; 35
	if (!READ_BIT(Keypad_pin,7)) x= 'D';
     d12:	4f 9b       	sbis	0x09, 7	; 9
     d14:	c4 e4       	ldi	r28, 0x44	; 68
	
	return x;  // No key pressed
}
     d16:	8c 2f       	mov	r24, r28
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <keypad_u8check_press>:


 unsigned char keypad_u8check_press()
 {
     d22:	2f 92       	push	r2
     d24:	3f 92       	push	r3
     d26:	4f 92       	push	r4
     d28:	5f 92       	push	r5
     d2a:	6f 92       	push	r6
     d2c:	7f 92       	push	r7
     d2e:	8f 92       	push	r8
     d30:	9f 92       	push	r9
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	60 97       	sbiw	r28, 0x10	; 16
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
 unsigned char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'A','0','=','+'}};
     d54:	de 01       	movw	r26, r28
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	e6 e4       	ldi	r30, 0x46	; 70
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	80 e1       	ldi	r24, 0x10	; 16
     d5e:	01 90       	ld	r0, Z+
     d60:	0d 92       	st	X+, r0
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	e1 f7       	brne	.-8      	; 0xd5e <keypad_u8check_press+0x3c>
     d66:	ee 24       	eor	r14, r14
     d68:	ff 24       	eor	r15, r15
 unsigned char row = 0;
 unsigned char coloumn=0;
 unsigned char x;
 unsigned char returnval=NOTPRESSED;
     d6a:	bb 24       	eor	r11, r11
     d6c:	ba 94       	dec	r11
 for(row=0;row<4;row++)
 {
	 DIO_vwrite('D',0,HIGH);
     d6e:	01 e4       	ldi	r16, 0x41	; 65
     d70:	11 e0       	ldi	r17, 0x01	; 1
	 DIO_vwrite('D',1,HIGH);
	 DIO_vwrite('D',2,HIGH);
	 DIO_vwrite('D',3,HIGH);
	 DIO_vwrite('D',row,LOW);
     d72:	0f 2e       	mov	r0, r31
     d74:	fd e3       	ldi	r31, 0x3D	; 61
     d76:	cf 2e       	mov	r12, r31
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	df 2e       	mov	r13, r31
     d7c:	f0 2d       	mov	r31, r0
	 
	 for(coloumn=0;coloumn<4;coloumn++)
	 {
		 x=READ_BIT(Keypad_pin,(coloumn+4));
     d7e:	88 24       	eor	r8, r8
     d80:	99 24       	eor	r9, r9
     d82:	66 24       	eor	r6, r6
     d84:	77 24       	eor	r7, r7
     d86:	63 94       	inc	r6
     d88:	44 24       	eor	r4, r4
     d8a:	55 24       	eor	r5, r5
     d8c:	68 94       	set
     d8e:	41 f8       	bld	r4, 1
     d90:	0f 2e       	mov	r0, r31
     d92:	f3 e0       	ldi	r31, 0x03	; 3
     d94:	2f 2e       	mov	r2, r31
     d96:	33 24       	eor	r3, r3
     d98:	f0 2d       	mov	r31, r0
 unsigned char coloumn=0;
 unsigned char x;
 unsigned char returnval=NOTPRESSED;
 for(row=0;row<4;row++)
 {
	 DIO_vwrite('D',0,HIGH);
     d9a:	84 e4       	ldi	r24, 0x44	; 68
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	a8 01       	movw	r20, r16
     da0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	 DIO_vwrite('D',1,HIGH);
     da4:	84 e4       	ldi	r24, 0x44	; 68
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	a8 01       	movw	r20, r16
     daa:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	 DIO_vwrite('D',2,HIGH);
     dae:	84 e4       	ldi	r24, 0x44	; 68
     db0:	62 e0       	ldi	r22, 0x02	; 2
     db2:	a8 01       	movw	r20, r16
     db4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	 DIO_vwrite('D',3,HIGH);
     db8:	84 e4       	ldi	r24, 0x44	; 68
     dba:	63 e0       	ldi	r22, 0x03	; 3
     dbc:	a8 01       	movw	r20, r16
     dbe:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	 DIO_vwrite('D',row,LOW);
     dc2:	84 e4       	ldi	r24, 0x44	; 68
     dc4:	6e 2d       	mov	r22, r14
     dc6:	a6 01       	movw	r20, r12
     dc8:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	 
	 for(coloumn=0;coloumn<4;coloumn++)
	 {
		 x=READ_BIT(Keypad_pin,(coloumn+4));
     dcc:	89 b1       	in	r24, 0x09	; 9
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	80 71       	andi	r24, 0x10	; 16
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	95 95       	asr	r25
     dd6:	87 95       	ror	r24
     dd8:	95 95       	asr	r25
     dda:	87 95       	ror	r24
     ddc:	95 95       	asr	r25
     dde:	87 95       	ror	r24
     de0:	95 95       	asr	r25
     de2:	87 95       	ror	r24
     de4:	48 2f       	mov	r20, r24
		 if(x==0)
     de6:	88 23       	and	r24, r24
     de8:	59 f1       	breq	.+86     	; 0xe40 <keypad_u8check_press+0x11e>
	 DIO_vwrite('D',3,HIGH);
	 DIO_vwrite('D',row,LOW);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
	 {
		 x=READ_BIT(Keypad_pin,(coloumn+4));
     dea:	89 b1       	in	r24, 0x09	; 9
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	80 72       	andi	r24, 0x20	; 32
     df0:	90 70       	andi	r25, 0x00	; 0
     df2:	95 95       	asr	r25
     df4:	87 95       	ror	r24
     df6:	95 95       	asr	r25
     df8:	87 95       	ror	r24
     dfa:	95 95       	asr	r25
     dfc:	87 95       	ror	r24
     dfe:	95 95       	asr	r25
     e00:	87 95       	ror	r24
     e02:	95 95       	asr	r25
     e04:	87 95       	ror	r24
     e06:	48 2f       	mov	r20, r24
		 if(x==0)
     e08:	88 23       	and	r24, r24
     e0a:	b1 f0       	breq	.+44     	; 0xe38 <keypad_u8check_press+0x116>
	 DIO_vwrite('D',3,HIGH);
	 DIO_vwrite('D',row,LOW);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
	 {
		 x=READ_BIT(Keypad_pin,(coloumn+4));
     e0c:	89 b1       	in	r24, 0x09	; 9
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	80 74       	andi	r24, 0x40	; 64
     e12:	90 70       	andi	r25, 0x00	; 0
     e14:	08 2e       	mov	r0, r24
     e16:	89 2f       	mov	r24, r25
     e18:	00 0c       	add	r0, r0
     e1a:	88 1f       	adc	r24, r24
     e1c:	99 0b       	sbc	r25, r25
     e1e:	00 0c       	add	r0, r0
     e20:	88 1f       	adc	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	48 2f       	mov	r20, r24
		 if(x==0)
     e26:	88 23       	and	r24, r24
     e28:	49 f0       	breq	.+18     	; 0xe3c <keypad_u8check_press+0x11a>
	 DIO_vwrite('D',3,HIGH);
	 DIO_vwrite('D',row,LOW);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
	 {
		 x=READ_BIT(Keypad_pin,(coloumn+4));
     e2a:	49 b1       	in	r20, 0x09	; 9
     e2c:	44 1f       	adc	r20, r20
     e2e:	44 27       	eor	r20, r20
     e30:	44 1f       	adc	r20, r20
		 if(x==0)
     e32:	c1 f4       	brne	.+48     	; 0xe64 <keypad_u8check_press+0x142>
	 DIO_vwrite('D',3,HIGH);
	 DIO_vwrite('D',row,LOW);
	 
	 for(coloumn=0;coloumn<4;coloumn++)
	 {
		 x=READ_BIT(Keypad_pin,(coloumn+4));
     e34:	91 01       	movw	r18, r2
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <keypad_u8check_press+0x120>
     e38:	93 01       	movw	r18, r6
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <keypad_u8check_press+0x120>
     e3c:	92 01       	movw	r18, r4
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <keypad_u8check_press+0x120>
     e40:	94 01       	movw	r18, r8
		 if(x==0)
		 {
			 returnval=arr[row][coloumn];
     e42:	c7 01       	movw	r24, r14
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	2c 0f       	add	r18, r28
     e56:	3d 1f       	adc	r19, r29
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	fc 01       	movw	r30, r24
     e5e:	b0 80       	ld	r11, Z
			 break;
		 }
	 }
	 if(x==0)
     e60:	44 23       	and	r20, r20
     e62:	41 f0       	breq	.+16     	; 0xe74 <keypad_u8check_press+0x152>
     e64:	08 94       	sec
     e66:	e1 1c       	adc	r14, r1
     e68:	f1 1c       	adc	r15, r1
 unsigned char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'A','0','=','+'}};
 unsigned char row = 0;
 unsigned char coloumn=0;
 unsigned char x;
 unsigned char returnval=NOTPRESSED;
 for(row=0;row<4;row++)
     e6a:	f4 e0       	ldi	r31, 0x04	; 4
     e6c:	ef 16       	cp	r14, r31
     e6e:	f1 04       	cpc	r15, r1
     e70:	09 f0       	breq	.+2      	; 0xe74 <keypad_u8check_press+0x152>
     e72:	93 cf       	rjmp	.-218    	; 0xd9a <keypad_u8check_press+0x78>
	 {
		 break;
	 }
 }
 return returnval ;
     e74:	8b 2d       	mov	r24, r11
     e76:	60 96       	adiw	r28, 0x10	; 16
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	7f 90       	pop	r7
     e9a:	6f 90       	pop	r6
     e9c:	5f 90       	pop	r5
     e9e:	4f 90       	pop	r4
     ea0:	3f 90       	pop	r3
     ea2:	2f 90       	pop	r2
     ea4:	08 95       	ret

00000ea6 <enable>:
// Private function prototype
static void enable(void);

void enable(void)
{
    DIO_vwrite(LCD_control_port, En, "HIGH");
     ea6:	82 e4       	ldi	r24, 0x42	; 66
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	46 e5       	ldi	r20, 0x56	; 86
     eac:	51 e0       	ldi	r21, 0x01	; 1
     eae:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
     eb2:	89 ef       	ldi	r24, 0xF9	; 249
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <enable+0x10>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <enable+0x16>
     ebc:	00 00       	nop
    _delay_ms(1);       // Enable pulse width (typically >450ns)
    DIO_vwrite(LCD_control_port, En, "LOW");
     ebe:	82 e4       	ldi	r24, 0x42	; 66
     ec0:	64 e0       	ldi	r22, 0x04	; 4
     ec2:	4b e5       	ldi	r20, 0x5B	; 91
     ec4:	51 e0       	ldi	r21, 0x01	; 1
     ec6:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
     eca:	89 ef       	ldi	r24, 0xF9	; 249
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <enable+0x28>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <enable+0x2e>
     ed4:	00 00       	nop
    _delay_ms(1);     // Command/data execution time
}
     ed6:	08 95       	ret

00000ed8 <Lcd_Send_cmd>:

void Lcd_Send_cmd(uint8_t cmd)
{
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	18 2f       	mov	r17, r24
	#if defined Eight_bit_mode
    DIO_VWrite_port(LCD_Data_port, cmd);
    DIO_vwrite(LCD_control_port, RS, "LOW");
    enable();
	#else
	DIO_vwrite(LCD_control_port, RS, "LOW");
     ee0:	cb e5       	ldi	r28, 0x5B	; 91
     ee2:	d1 e0       	ldi	r29, 0x01	; 1
     ee4:	82 e4       	ldi	r24, 0x42	; 66
     ee6:	65 e0       	ldi	r22, 0x05	; 5
     ee8:	ae 01       	movw	r20, r28
     eea:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,(cmd >> 4)); // Send the most 4 bits
     eee:	61 2f       	mov	r22, r17
     ef0:	62 95       	swap	r22
     ef2:	6f 70       	andi	r22, 0x0F	; 15
     ef4:	82 e4       	ldi	r24, 0x42	; 66
     ef6:	0e 94 06 05 	call	0xa0c	; 0xa0c <Dio_Write_lowNibble>
	enable();
     efa:	0e 94 53 07 	call	0xea6	; 0xea6 <enable>
	DIO_vwrite(LCD_control_port, RS, "LOW");
     efe:	82 e4       	ldi	r24, 0x42	; 66
     f00:	65 e0       	ldi	r22, 0x05	; 5
     f02:	ae 01       	movw	r20, r28
     f04:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,cmd); // send the least 4 bits
     f08:	82 e4       	ldi	r24, 0x42	; 66
     f0a:	61 2f       	mov	r22, r17
     f0c:	0e 94 06 05 	call	0xa0c	; 0xa0c <Dio_Write_lowNibble>
	enable();
     f10:	0e 94 53 07 	call	0xea6	; 0xea6 <enable>
	#endif
	
    // Most commands need 1-2ms except clear and home
    if(cmd == LCD_CLEAR_DISPLAY || cmd == LCD_RETURN_HOME) {
     f14:	11 50       	subi	r17, 0x01	; 1
     f16:	12 30       	cpi	r17, 0x02	; 2
     f18:	38 f4       	brcc	.+14     	; 0xf28 <Lcd_Send_cmd+0x50>
     f1a:	83 ef       	ldi	r24, 0xF3	; 243
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <Lcd_Send_cmd+0x46>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <Lcd_Send_cmd+0x4c>
     f24:	00 00       	nop
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <Lcd_Send_cmd+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f28:	91 e2       	ldi	r25, 0x21	; 33
     f2a:	9a 95       	dec	r25
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <Lcd_Send_cmd+0x52>
     f2e:	00 00       	nop
        _delay_ms(2);
    } else {
        _delay_us(100);
    }
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	08 95       	ret

00000f38 <Lcd_Send_char>:

void Lcd_Send_char(uint8_t data)
{	
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	18 2f       	mov	r17, r24
    DIO_VWrite_port(LCD_Data_port, data);
    DIO_vwrite(LCD_control_port, RS, "HIGH");
    enable();
    _delay_us(100);     // Character write time
	#else
	DIO_vwrite(LCD_control_port, RS, "HIGH");
     f40:	c6 e5       	ldi	r28, 0x56	; 86
     f42:	d1 e0       	ldi	r29, 0x01	; 1
     f44:	82 e4       	ldi	r24, 0x42	; 66
     f46:	65 e0       	ldi	r22, 0x05	; 5
     f48:	ae 01       	movw	r20, r28
     f4a:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,(data >> 4)); // Send the most 4 bits
     f4e:	61 2f       	mov	r22, r17
     f50:	62 95       	swap	r22
     f52:	6f 70       	andi	r22, 0x0F	; 15
     f54:	82 e4       	ldi	r24, 0x42	; 66
     f56:	0e 94 06 05 	call	0xa0c	; 0xa0c <Dio_Write_lowNibble>
	enable();
     f5a:	0e 94 53 07 	call	0xea6	; 0xea6 <enable>
	DIO_vwrite(LCD_control_port, RS, "HIGH");
     f5e:	82 e4       	ldi	r24, 0x42	; 66
     f60:	65 e0       	ldi	r22, 0x05	; 5
     f62:	ae 01       	movw	r20, r28
     f64:	0e 94 40 01 	call	0x280	; 0x280 <DIO_vwrite>
	Dio_Write_lowNibble(LCD_Data_port,data); // send the least 4 bits
     f68:	82 e4       	ldi	r24, 0x42	; 66
     f6a:	61 2f       	mov	r22, r17
     f6c:	0e 94 06 05 	call	0xa0c	; 0xa0c <Dio_Write_lowNibble>
	enable();
     f70:	0e 94 53 07 	call	0xea6	; 0xea6 <enable>
	#endif
	
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	08 95       	ret

00000f7c <Lcd_Initialize>:

void Lcd_Initialize(void)
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
    DIO_VSet_port_Direction(LCD_Data_port, "OUTPUT");
    Dio_VSet_pin_Dir(LCD_control_port, RS, "OUTPUT");
    Dio_VSet_pin_Dir(LCD_control_port, En, "OUTPUT");
	
	#else
	Dio_Set_lowNibble(LCD_Data_port);
     f80:	82 e4       	ldi	r24, 0x42	; 66
     f82:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Set_lowNibble>
	Dio_VSet_pin_Dir(LCD_control_port, RS, "OUTPUT");
     f86:	cf e5       	ldi	r28, 0x5F	; 95
     f88:	d1 e0       	ldi	r29, 0x01	; 1
     f8a:	82 e4       	ldi	r24, 0x42	; 66
     f8c:	65 e0       	ldi	r22, 0x05	; 5
     f8e:	ae 01       	movw	r20, r28
     f90:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	Dio_VSet_pin_Dir(LCD_control_port, En, "OUTPUT");
     f94:	82 e4       	ldi	r24, 0x42	; 66
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	ae 01       	movw	r20, r28
     f9a:	0e 94 73 00 	call	0xe6	; 0xe6 <Dio_VSet_pin_Dir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9e:	8b e4       	ldi	r24, 0x4B	; 75
     fa0:	9d e1       	ldi	r25, 0x1D	; 29
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <Lcd_Initialize+0x26>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <Lcd_Initialize+0x2c>
     fa8:	00 00       	nop
	#endif
    _delay_ms(30);
    
    // Initialization sequence
	Lcd_Send_cmd(LCD_RETURN_HOME); //return home
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
     fb0:	83 ec       	ldi	r24, 0xC3	; 195
     fb2:	99 e0       	ldi	r25, 0x09	; 9
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <Lcd_Initialize+0x38>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <Lcd_Initialize+0x3e>
     fba:	00 00       	nop
	_delay_ms(10);
	Lcd_Send_cmd(LCD_FUNCTION_SET); //4bit mode
     fbc:	88 e2       	ldi	r24, 0x28	; 40
     fbe:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
     fc2:	89 ef       	ldi	r24, 0xF9	; 249
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <Lcd_Initialize+0x4a>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <Lcd_Initialize+0x50>
     fcc:	00 00       	nop
	_delay_ms(1);
	Lcd_Send_cmd(LCD_CURSOR_ON);//display on cursor on
     fce:	8e e0       	ldi	r24, 0x0E	; 14
     fd0:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
     fd4:	89 ef       	ldi	r24, 0xF9	; 249
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <Lcd_Initialize+0x5c>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <Lcd_Initialize+0x62>
     fde:	00 00       	nop
	_delay_ms(1);
	Lcd_Send_cmd(LCD_CLEAR_DISPLAY);//clear the screen
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
     fe6:	83 ec       	ldi	r24, 0xC3	; 195
     fe8:	99 e0       	ldi	r25, 0x09	; 9
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <Lcd_Initialize+0x6e>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <Lcd_Initialize+0x74>
     ff0:	00 00       	nop
	_delay_ms(10);
	Lcd_Send_cmd(LCD_ENTRY_MODE_SET); //entry mode
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
     ff8:	89 ef       	ldi	r24, 0xF9	; 249
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <Lcd_Initialize+0x80>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <Lcd_Initialize+0x86>
    1002:	00 00       	nop
	_delay_ms(1);


}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <Lcd_Clear_Screen>:

void Lcd_Clear_Screen(void)
{
    Lcd_Send_cmd(LCD_CLEAR_DISPLAY);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
    1010:	83 ef       	ldi	r24, 0xF3	; 243
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <Lcd_Clear_Screen+0xa>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <Lcd_Clear_Screen+0x10>
    101a:	00 00       	nop
    _delay_ms(2);       // Clear display needs extra time
}
    101c:	08 95       	ret

0000101e <Lcd_send_string>:

void Lcd_send_string(const uint8_t *data)
{
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
    while (*data != '\0') {
    1024:	88 81       	ld	r24, Y
    1026:	88 23       	and	r24, r24
    1028:	31 f0       	breq	.+12     	; 0x1036 <Lcd_send_string+0x18>
{
    Lcd_Send_cmd(LCD_CLEAR_DISPLAY);
    _delay_ms(2);       // Clear display needs extra time
}

void Lcd_send_string(const uint8_t *data)
    102a:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\0') {
        Lcd_Send_char(*data++);
    102c:	0e 94 9c 07 	call	0xf38	; 0xf38 <Lcd_Send_char>
    _delay_ms(2);       // Clear display needs extra time
}

void Lcd_send_string(const uint8_t *data)
{
    while (*data != '\0') {
    1030:	89 91       	ld	r24, Y+
    1032:	88 23       	and	r24, r24
    1034:	d9 f7       	brne	.-10     	; 0x102c <Lcd_send_string+0xe>
        Lcd_Send_char(*data++);
    }
}	
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <Lcd_Set_cursor>:

void Lcd_Set_cursor(unsigned char row , unsigned char column)
{	unsigned char address_line = 0;
	if (row == 1 && column >= 0 && column <= 16)
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	29 f4       	brne	.+10     	; 0x104a <Lcd_Set_cursor+0xe>
    1040:	61 31       	cpi	r22, 0x11	; 17
    1042:	50 f4       	brcc	.+20     	; 0x1058 <Lcd_Set_cursor+0x1c>
	{
		address_line = 0x80 + column -1;
    1044:	86 2f       	mov	r24, r22
    1046:	81 58       	subi	r24, 0x81	; 129
    1048:	0c c0       	rjmp	.+24     	; 0x1062 <Lcd_Set_cursor+0x26>
	}
	else if(row == 2 && column >= 0 && column <= 16)
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	39 f4       	brne	.+14     	; 0x105c <Lcd_Set_cursor+0x20>
    104e:	61 31       	cpi	r22, 0x11	; 17
    1050:	38 f4       	brcc	.+14     	; 0x1060 <Lcd_Set_cursor+0x24>
	{
		address_line = 0xC0 + column -1 ;
    1052:	86 2f       	mov	r24, r22
    1054:	81 54       	subi	r24, 0x41	; 65
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <Lcd_Set_cursor+0x26>
	}
	else 
	{
		address_line = 0x80;
    1058:	80 e8       	ldi	r24, 0x80	; 128
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <Lcd_Set_cursor+0x26>
    105c:	80 e8       	ldi	r24, 0x80	; 128
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <Lcd_Set_cursor+0x26>
    1060:	80 e8       	ldi	r24, 0x80	; 128
	}
	Lcd_Send_cmd(address_line);
    1062:	0e 94 6c 07 	call	0xed8	; 0xed8 <Lcd_Send_cmd>
    1066:	08 95       	ret

00001068 <strcmp>:
    1068:	fb 01       	movw	r30, r22
    106a:	dc 01       	movw	r26, r24
    106c:	8d 91       	ld	r24, X+
    106e:	01 90       	ld	r0, Z+
    1070:	80 19       	sub	r24, r0
    1072:	01 10       	cpse	r0, r1
    1074:	d9 f3       	breq	.-10     	; 0x106c <strcmp+0x4>
    1076:	99 0b       	sbc	r25, r25
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
