
lab 1 (led blink synchro).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000081e  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00001110  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000752  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024f  00000000  00000000  00001942  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000387  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f8  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cc  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 03 	call	0x77c	; 0x77c <main>
  8a:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_VSet_pin_Dir>:
 */ 
#include "std_macros.h"
#include <string.h>

void Dio_VSet_pin_Dir(unsigned char port, unsigned char reg_numb, const char *dir)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	c8 2f       	mov	r28, r24
  9c:	d6 2f       	mov	r29, r22
  9e:	8a 01       	movw	r16, r20
	if (((strcmp(dir, "OUTPUT")) == 0) || ((strcmp(dir, "output")) == 0))
  a0:	ca 01       	movw	r24, r20
  a2:	60 e6       	ldi	r22, 0x60	; 96
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
  aa:	28 2f       	mov	r18, r24
  ac:	39 2f       	mov	r19, r25
  ae:	21 15       	cp	r18, r1
  b0:	31 05       	cpc	r19, r1
  b2:	59 f0       	breq	.+22     	; 0xca <Dio_VSet_pin_Dir+0x38>
  b4:	c8 01       	movw	r24, r16
  b6:	67 e6       	ldi	r22, 0x67	; 103
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
  be:	28 2f       	mov	r18, r24
  c0:	39 2f       	mov	r19, r25
  c2:	21 15       	cp	r18, r1
  c4:	31 05       	cpc	r19, r1
  c6:	09 f0       	breq	.+2      	; 0xca <Dio_VSet_pin_Dir+0x38>
  c8:	4b c0       	rjmp	.+150    	; 0x160 <Dio_VSet_pin_Dir+0xce>
	{
		switch (port)
  ca:	c4 34       	cpi	r28, 0x44	; 68
  cc:	09 f4       	brne	.+2      	; 0xd0 <Dio_VSet_pin_Dir+0x3e>
  ce:	3c c0       	rjmp	.+120    	; 0x148 <Dio_VSet_pin_Dir+0xb6>
  d0:	c5 34       	cpi	r28, 0x45	; 69
  d2:	40 f4       	brcc	.+16     	; 0xe4 <Dio_VSet_pin_Dir+0x52>
  d4:	c2 34       	cpi	r28, 0x42	; 66
  d6:	01 f1       	breq	.+64     	; 0x118 <Dio_VSet_pin_Dir+0x86>
  d8:	c3 34       	cpi	r28, 0x43	; 67
  da:	50 f5       	brcc	.+84     	; 0x130 <Dio_VSet_pin_Dir+0x9e>
  dc:	c1 34       	cpi	r28, 0x41	; 65
  de:	09 f0       	breq	.+2      	; 0xe2 <Dio_VSet_pin_Dir+0x50>
  e0:	a0 c0       	rjmp	.+320    	; 0x222 <Dio_VSet_pin_Dir+0x190>
  e2:	0e c0       	rjmp	.+28     	; 0x100 <Dio_VSet_pin_Dir+0x6e>
  e4:	c2 36       	cpi	r28, 0x62	; 98
  e6:	c1 f0       	breq	.+48     	; 0x118 <Dio_VSet_pin_Dir+0x86>
  e8:	c3 36       	cpi	r28, 0x63	; 99
  ea:	20 f4       	brcc	.+8      	; 0xf4 <Dio_VSet_pin_Dir+0x62>
  ec:	c1 36       	cpi	r28, 0x61	; 97
  ee:	09 f0       	breq	.+2      	; 0xf2 <Dio_VSet_pin_Dir+0x60>
  f0:	98 c0       	rjmp	.+304    	; 0x222 <Dio_VSet_pin_Dir+0x190>
  f2:	06 c0       	rjmp	.+12     	; 0x100 <Dio_VSet_pin_Dir+0x6e>
  f4:	c3 36       	cpi	r28, 0x63	; 99
  f6:	e1 f0       	breq	.+56     	; 0x130 <Dio_VSet_pin_Dir+0x9e>
  f8:	c4 36       	cpi	r28, 0x64	; 100
  fa:	09 f0       	breq	.+2      	; 0xfe <Dio_VSet_pin_Dir+0x6c>
  fc:	92 c0       	rjmp	.+292    	; 0x222 <Dio_VSet_pin_Dir+0x190>
  fe:	24 c0       	rjmp	.+72     	; 0x148 <Dio_VSet_pin_Dir+0xb6>
		{
			case 'A':
			case 'a':
				SET_BIT(DDRA_, reg_numb);
 100:	4a b3       	in	r20, 0x1a	; 26
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	c9 01       	movw	r24, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <Dio_VSet_pin_Dir+0x7c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	da 95       	dec	r29
 110:	e2 f7       	brpl	.-8      	; 0x10a <Dio_VSet_pin_Dir+0x78>
 112:	84 2b       	or	r24, r20
 114:	8a bb       	out	0x1a, r24	; 26
				break;
 116:	85 c0       	rjmp	.+266    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
				SET_BIT(DDRB_, reg_numb);
 118:	47 b3       	in	r20, 0x17	; 23
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	c9 01       	movw	r24, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <Dio_VSet_pin_Dir+0x94>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	da 95       	dec	r29
 128:	e2 f7       	brpl	.-8      	; 0x122 <Dio_VSet_pin_Dir+0x90>
 12a:	84 2b       	or	r24, r20
 12c:	87 bb       	out	0x17, r24	; 23
				break;
 12e:	79 c0       	rjmp	.+242    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
				SET_BIT(DDRC_, reg_numb);
 130:	44 b3       	in	r20, 0x14	; 20
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	c9 01       	movw	r24, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_VSet_pin_Dir+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	da 95       	dec	r29
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_VSet_pin_Dir+0xa8>
 142:	84 2b       	or	r24, r20
 144:	84 bb       	out	0x14, r24	; 20
				break;
 146:	6d c0       	rjmp	.+218    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
				SET_BIT(DDRD_, reg_numb);
 148:	41 b3       	in	r20, 0x11	; 17
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	c9 01       	movw	r24, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <Dio_VSet_pin_Dir+0xc4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	da 95       	dec	r29
 158:	e2 f7       	brpl	.-8      	; 0x152 <Dio_VSet_pin_Dir+0xc0>
 15a:	84 2b       	or	r24, r20
 15c:	81 bb       	out	0x11, r24	; 17
				break;
 15e:	61 c0       	rjmp	.+194    	; 0x222 <Dio_VSet_pin_Dir+0x190>
			default:
				break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(dir, "INPUT")) == 0) || ((strcmp(dir, "input")) == 0))
 160:	c8 01       	movw	r24, r16
 162:	6e e6       	ldi	r22, 0x6E	; 110
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 16a:	28 2f       	mov	r18, r24
 16c:	39 2f       	mov	r19, r25
 16e:	21 15       	cp	r18, r1
 170:	31 05       	cpc	r19, r1
 172:	59 f0       	breq	.+22     	; 0x18a <Dio_VSet_pin_Dir+0xf8>
 174:	c8 01       	movw	r24, r16
 176:	64 e7       	ldi	r22, 0x74	; 116
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 17e:	28 2f       	mov	r18, r24
 180:	39 2f       	mov	r19, r25
 182:	21 15       	cp	r18, r1
 184:	31 05       	cpc	r19, r1
 186:	09 f0       	breq	.+2      	; 0x18a <Dio_VSet_pin_Dir+0xf8>
 188:	4c c0       	rjmp	.+152    	; 0x222 <Dio_VSet_pin_Dir+0x190>
	{
		switch (port)
 18a:	c4 34       	cpi	r28, 0x44	; 68
 18c:	09 f4       	brne	.+2      	; 0x190 <Dio_VSet_pin_Dir+0xfe>
 18e:	3d c0       	rjmp	.+122    	; 0x20a <Dio_VSet_pin_Dir+0x178>
 190:	c5 34       	cpi	r28, 0x45	; 69
 192:	40 f4       	brcc	.+16     	; 0x1a4 <Dio_VSet_pin_Dir+0x112>
 194:	c2 34       	cpi	r28, 0x42	; 66
 196:	f9 f0       	breq	.+62     	; 0x1d6 <Dio_VSet_pin_Dir+0x144>
 198:	c3 34       	cpi	r28, 0x43	; 67
 19a:	50 f5       	brcc	.+84     	; 0x1f0 <Dio_VSet_pin_Dir+0x15e>
 19c:	c1 34       	cpi	r28, 0x41	; 65
 19e:	09 f0       	breq	.+2      	; 0x1a2 <Dio_VSet_pin_Dir+0x110>
 1a0:	40 c0       	rjmp	.+128    	; 0x222 <Dio_VSet_pin_Dir+0x190>
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <Dio_VSet_pin_Dir+0x12a>
 1a4:	c2 36       	cpi	r28, 0x62	; 98
 1a6:	b9 f0       	breq	.+46     	; 0x1d6 <Dio_VSet_pin_Dir+0x144>
 1a8:	c3 36       	cpi	r28, 0x63	; 99
 1aa:	18 f4       	brcc	.+6      	; 0x1b2 <Dio_VSet_pin_Dir+0x120>
 1ac:	c1 36       	cpi	r28, 0x61	; 97
 1ae:	c9 f5       	brne	.+114    	; 0x222 <Dio_VSet_pin_Dir+0x190>
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <Dio_VSet_pin_Dir+0x12a>
 1b2:	c3 36       	cpi	r28, 0x63	; 99
 1b4:	e9 f0       	breq	.+58     	; 0x1f0 <Dio_VSet_pin_Dir+0x15e>
 1b6:	c4 36       	cpi	r28, 0x64	; 100
 1b8:	a1 f5       	brne	.+104    	; 0x222 <Dio_VSet_pin_Dir+0x190>
 1ba:	27 c0       	rjmp	.+78     	; 0x20a <Dio_VSet_pin_Dir+0x178>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(DDRA_, reg_numb);
 1bc:	4a b3       	in	r20, 0x1a	; 26
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	c9 01       	movw	r24, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Dio_VSet_pin_Dir+0x138>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	da 95       	dec	r29
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Dio_VSet_pin_Dir+0x134>
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8a bb       	out	0x1a, r24	; 26
			break;
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'B':
			case 'b':
			CLEAR_BIT(DDRB_, reg_numb);
 1d6:	47 b3       	in	r20, 0x17	; 23
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	c9 01       	movw	r24, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Dio_VSet_pin_Dir+0x152>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	da 95       	dec	r29
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <Dio_VSet_pin_Dir+0x14e>
 1e8:	80 95       	com	r24
 1ea:	84 23       	and	r24, r20
 1ec:	87 bb       	out	0x17, r24	; 23
			break;
 1ee:	19 c0       	rjmp	.+50     	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'C':
			case 'c':
			CLEAR_BIT(DDRC_, reg_numb);
 1f0:	44 b3       	in	r20, 0x14	; 20
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	c9 01       	movw	r24, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_VSet_pin_Dir+0x16c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	da 95       	dec	r29
 200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_VSet_pin_Dir+0x168>
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	84 bb       	out	0x14, r24	; 20
			break;
 208:	0c c0       	rjmp	.+24     	; 0x222 <Dio_VSet_pin_Dir+0x190>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(DDRD_, reg_numb);
 20a:	41 b3       	in	r20, 0x11	; 17
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	c9 01       	movw	r24, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <Dio_VSet_pin_Dir+0x186>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	da 95       	dec	r29
 21a:	e2 f7       	brpl	.-8      	; 0x214 <Dio_VSet_pin_Dir+0x182>
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			break;  // Handle unexpected port values
		}
	}
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <DIO_vwrite>:

void DIO_vwrite(unsigned char port , unsigned char reg_numb, const char *val)
{
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	c8 2f       	mov	r28, r24
 236:	d6 2f       	mov	r29, r22
 238:	8a 01       	movw	r16, r20
	if (((strcmp(val, "HIGH")) == 0) || ((strcmp(val, "high")) == 0) || ((strcmp(val, "1")) == 0) )
 23a:	ca 01       	movw	r24, r20
 23c:	6a e7       	ldi	r22, 0x7A	; 122
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 244:	28 2f       	mov	r18, r24
 246:	39 2f       	mov	r19, r25
 248:	21 15       	cp	r18, r1
 24a:	31 05       	cpc	r19, r1
 24c:	a9 f0       	breq	.+42     	; 0x278 <DIO_vwrite+0x4c>
 24e:	c8 01       	movw	r24, r16
 250:	6f e7       	ldi	r22, 0x7F	; 127
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 258:	28 2f       	mov	r18, r24
 25a:	39 2f       	mov	r19, r25
 25c:	21 15       	cp	r18, r1
 25e:	31 05       	cpc	r19, r1
 260:	59 f0       	breq	.+22     	; 0x278 <DIO_vwrite+0x4c>
 262:	c8 01       	movw	r24, r16
 264:	64 e8       	ldi	r22, 0x84	; 132
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 26c:	28 2f       	mov	r18, r24
 26e:	39 2f       	mov	r19, r25
 270:	21 15       	cp	r18, r1
 272:	31 05       	cpc	r19, r1
 274:	09 f0       	breq	.+2      	; 0x278 <DIO_vwrite+0x4c>
 276:	4b c0       	rjmp	.+150    	; 0x30e <DIO_vwrite+0xe2>
	{
		switch (port)
 278:	c4 34       	cpi	r28, 0x44	; 68
 27a:	09 f4       	brne	.+2      	; 0x27e <DIO_vwrite+0x52>
 27c:	3c c0       	rjmp	.+120    	; 0x2f6 <DIO_vwrite+0xca>
 27e:	c5 34       	cpi	r28, 0x45	; 69
 280:	40 f4       	brcc	.+16     	; 0x292 <DIO_vwrite+0x66>
 282:	c2 34       	cpi	r28, 0x42	; 66
 284:	01 f1       	breq	.+64     	; 0x2c6 <DIO_vwrite+0x9a>
 286:	c3 34       	cpi	r28, 0x43	; 67
 288:	50 f5       	brcc	.+84     	; 0x2de <DIO_vwrite+0xb2>
 28a:	c1 34       	cpi	r28, 0x41	; 65
 28c:	09 f0       	breq	.+2      	; 0x290 <DIO_vwrite+0x64>
 28e:	aa c0       	rjmp	.+340    	; 0x3e4 <DIO_vwrite+0x1b8>
 290:	0e c0       	rjmp	.+28     	; 0x2ae <DIO_vwrite+0x82>
 292:	c2 36       	cpi	r28, 0x62	; 98
 294:	c1 f0       	breq	.+48     	; 0x2c6 <DIO_vwrite+0x9a>
 296:	c3 36       	cpi	r28, 0x63	; 99
 298:	20 f4       	brcc	.+8      	; 0x2a2 <DIO_vwrite+0x76>
 29a:	c1 36       	cpi	r28, 0x61	; 97
 29c:	09 f0       	breq	.+2      	; 0x2a0 <DIO_vwrite+0x74>
 29e:	a2 c0       	rjmp	.+324    	; 0x3e4 <DIO_vwrite+0x1b8>
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <DIO_vwrite+0x82>
 2a2:	c3 36       	cpi	r28, 0x63	; 99
 2a4:	e1 f0       	breq	.+56     	; 0x2de <DIO_vwrite+0xb2>
 2a6:	c4 36       	cpi	r28, 0x64	; 100
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_vwrite+0x80>
 2aa:	9c c0       	rjmp	.+312    	; 0x3e4 <DIO_vwrite+0x1b8>
 2ac:	24 c0       	rjmp	.+72     	; 0x2f6 <DIO_vwrite+0xca>
		{
			case 'A':
			case 'a':
			SET_BIT(PORTA_, reg_numb);
 2ae:	4b b3       	in	r20, 0x1b	; 27
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	c9 01       	movw	r24, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_vwrite+0x90>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	da 95       	dec	r29
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_vwrite+0x8c>
 2c0:	84 2b       	or	r24, r20
 2c2:	8b bb       	out	0x1b, r24	; 27
			break;
 2c4:	8f c0       	rjmp	.+286    	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			SET_BIT(PORTB_, reg_numb);
 2c6:	48 b3       	in	r20, 0x18	; 24
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	c9 01       	movw	r24, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vwrite+0xa8>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	da 95       	dec	r29
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vwrite+0xa4>
 2d8:	84 2b       	or	r24, r20
 2da:	88 bb       	out	0x18, r24	; 24
			break;
 2dc:	83 c0       	rjmp	.+262    	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			SET_BIT(PORTC_, reg_numb);
 2de:	45 b3       	in	r20, 0x15	; 21
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	c9 01       	movw	r24, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_vwrite+0xc0>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	da 95       	dec	r29
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_vwrite+0xbc>
 2f0:	84 2b       	or	r24, r20
 2f2:	85 bb       	out	0x15, r24	; 21
			break;
 2f4:	77 c0       	rjmp	.+238    	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			SET_BIT(PORTD_, reg_numb);
 2f6:	42 b3       	in	r20, 0x12	; 18
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	c9 01       	movw	r24, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_vwrite+0xd8>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	da 95       	dec	r29
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_vwrite+0xd4>
 308:	84 2b       	or	r24, r20
 30a:	82 bb       	out	0x12, r24	; 18
			break;
 30c:	6b c0       	rjmp	.+214    	; 0x3e4 <DIO_vwrite+0x1b8>
			default:
			break;  // Handle unexpected port values
		}
	}
	else if (((strcmp(val, "LOW")) == 0) || ((strcmp(val, "low")) == 0) || ((strcmp(val, "0")) == 0))
 30e:	c8 01       	movw	r24, r16
 310:	66 e8       	ldi	r22, 0x86	; 134
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 318:	28 2f       	mov	r18, r24
 31a:	39 2f       	mov	r19, r25
 31c:	21 15       	cp	r18, r1
 31e:	31 05       	cpc	r19, r1
 320:	a9 f0       	breq	.+42     	; 0x34c <DIO_vwrite+0x120>
 322:	c8 01       	movw	r24, r16
 324:	6a e8       	ldi	r22, 0x8A	; 138
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 32c:	28 2f       	mov	r18, r24
 32e:	39 2f       	mov	r19, r25
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	59 f0       	breq	.+22     	; 0x34c <DIO_vwrite+0x120>
 336:	c8 01       	movw	r24, r16
 338:	6e e8       	ldi	r22, 0x8E	; 142
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 04 04 	call	0x808	; 0x808 <strcmp>
 340:	28 2f       	mov	r18, r24
 342:	39 2f       	mov	r19, r25
 344:	21 15       	cp	r18, r1
 346:	31 05       	cpc	r19, r1
 348:	09 f0       	breq	.+2      	; 0x34c <DIO_vwrite+0x120>
 34a:	4c c0       	rjmp	.+152    	; 0x3e4 <DIO_vwrite+0x1b8>
	{
		switch (port)
 34c:	c4 34       	cpi	r28, 0x44	; 68
 34e:	09 f4       	brne	.+2      	; 0x352 <DIO_vwrite+0x126>
 350:	3d c0       	rjmp	.+122    	; 0x3cc <DIO_vwrite+0x1a0>
 352:	c5 34       	cpi	r28, 0x45	; 69
 354:	40 f4       	brcc	.+16     	; 0x366 <DIO_vwrite+0x13a>
 356:	c2 34       	cpi	r28, 0x42	; 66
 358:	f9 f0       	breq	.+62     	; 0x398 <DIO_vwrite+0x16c>
 35a:	c3 34       	cpi	r28, 0x43	; 67
 35c:	50 f5       	brcc	.+84     	; 0x3b2 <DIO_vwrite+0x186>
 35e:	c1 34       	cpi	r28, 0x41	; 65
 360:	09 f0       	breq	.+2      	; 0x364 <DIO_vwrite+0x138>
 362:	40 c0       	rjmp	.+128    	; 0x3e4 <DIO_vwrite+0x1b8>
 364:	0c c0       	rjmp	.+24     	; 0x37e <DIO_vwrite+0x152>
 366:	c2 36       	cpi	r28, 0x62	; 98
 368:	b9 f0       	breq	.+46     	; 0x398 <DIO_vwrite+0x16c>
 36a:	c3 36       	cpi	r28, 0x63	; 99
 36c:	18 f4       	brcc	.+6      	; 0x374 <DIO_vwrite+0x148>
 36e:	c1 36       	cpi	r28, 0x61	; 97
 370:	c9 f5       	brne	.+114    	; 0x3e4 <DIO_vwrite+0x1b8>
 372:	05 c0       	rjmp	.+10     	; 0x37e <DIO_vwrite+0x152>
 374:	c3 36       	cpi	r28, 0x63	; 99
 376:	e9 f0       	breq	.+58     	; 0x3b2 <DIO_vwrite+0x186>
 378:	c4 36       	cpi	r28, 0x64	; 100
 37a:	a1 f5       	brne	.+104    	; 0x3e4 <DIO_vwrite+0x1b8>
 37c:	27 c0       	rjmp	.+78     	; 0x3cc <DIO_vwrite+0x1a0>
		{
			case 'A':
			case 'a':
			CLEAR_BIT(PORTA_, reg_numb);
 37e:	4b b3       	in	r20, 0x1b	; 27
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	c9 01       	movw	r24, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_vwrite+0x160>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	da 95       	dec	r29
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_vwrite+0x15c>
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	8b bb       	out	0x1b, r24	; 27
			break;
 396:	26 c0       	rjmp	.+76     	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'B':
			case 'b':
			CLEAR_BIT(PORTB_, reg_numb);
 398:	48 b3       	in	r20, 0x18	; 24
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	c9 01       	movw	r24, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_vwrite+0x17a>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	da 95       	dec	r29
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_vwrite+0x176>
 3aa:	80 95       	com	r24
 3ac:	84 23       	and	r24, r20
 3ae:	88 bb       	out	0x18, r24	; 24
			break;
 3b0:	19 c0       	rjmp	.+50     	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'C':
			case 'c':
			CLEAR_BIT(PORTC_, reg_numb);
 3b2:	45 b3       	in	r20, 0x15	; 21
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	c9 01       	movw	r24, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_vwrite+0x194>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	da 95       	dec	r29
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_vwrite+0x190>
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	85 bb       	out	0x15, r24	; 21
			break;
 3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <DIO_vwrite+0x1b8>
			case 'D':   // Fixed inconsistency
			case 'd':
			CLEAR_BIT(PORTD_, reg_numb);
 3cc:	42 b3       	in	r20, 0x12	; 18
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	c9 01       	movw	r24, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_vwrite+0x1ae>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	da 95       	dec	r29
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_vwrite+0x1aa>
 3de:	80 95       	com	r24
 3e0:	84 23       	and	r24, r20
 3e2:	82 bb       	out	0x12, r24	; 18
			default:
			break;  // Handle unexpected port values
		}
	}
	
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <DIO_vToggle>:

void DIO_vToggle(unsigned char port , unsigned char reg_numb)
{
	switch (port)
 3ee:	84 34       	cpi	r24, 0x44	; 68
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_vToggle+0x6>
 3f2:	3d c0       	rjmp	.+122    	; 0x46e <DIO_vToggle+0x80>
 3f4:	85 34       	cpi	r24, 0x45	; 69
 3f6:	40 f4       	brcc	.+16     	; 0x408 <DIO_vToggle+0x1a>
 3f8:	82 34       	cpi	r24, 0x42	; 66
 3fa:	f9 f0       	breq	.+62     	; 0x43a <DIO_vToggle+0x4c>
 3fc:	83 34       	cpi	r24, 0x43	; 67
 3fe:	50 f5       	brcc	.+84     	; 0x454 <DIO_vToggle+0x66>
 400:	81 34       	cpi	r24, 0x41	; 65
 402:	09 f0       	breq	.+2      	; 0x406 <DIO_vToggle+0x18>
 404:	40 c0       	rjmp	.+128    	; 0x486 <DIO_vToggle+0x98>
 406:	0c c0       	rjmp	.+24     	; 0x420 <DIO_vToggle+0x32>
 408:	82 36       	cpi	r24, 0x62	; 98
 40a:	b9 f0       	breq	.+46     	; 0x43a <DIO_vToggle+0x4c>
 40c:	83 36       	cpi	r24, 0x63	; 99
 40e:	18 f4       	brcc	.+6      	; 0x416 <DIO_vToggle+0x28>
 410:	81 36       	cpi	r24, 0x61	; 97
 412:	c9 f5       	brne	.+114    	; 0x486 <DIO_vToggle+0x98>
 414:	05 c0       	rjmp	.+10     	; 0x420 <DIO_vToggle+0x32>
 416:	83 36       	cpi	r24, 0x63	; 99
 418:	e9 f0       	breq	.+58     	; 0x454 <DIO_vToggle+0x66>
 41a:	84 36       	cpi	r24, 0x64	; 100
 41c:	a1 f5       	brne	.+104    	; 0x486 <DIO_vToggle+0x98>
 41e:	27 c0       	rjmp	.+78     	; 0x46e <DIO_vToggle+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA_, reg_numb);
 420:	2b b3       	in	r18, 0x1b	; 27
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	ac 01       	movw	r20, r24
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_vToggle+0x40>
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_vToggle+0x3c>
 432:	ba 01       	movw	r22, r20
 434:	62 27       	eor	r22, r18
 436:	6b bb       	out	0x1b, r22	; 27
		break;
 438:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB_, reg_numb);
 43a:	28 b3       	in	r18, 0x18	; 24
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	ac 01       	movw	r20, r24
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_vToggle+0x5a>
 444:	44 0f       	add	r20, r20
 446:	55 1f       	adc	r21, r21
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_vToggle+0x56>
 44c:	ba 01       	movw	r22, r20
 44e:	62 27       	eor	r22, r18
 450:	68 bb       	out	0x18, r22	; 24
		break;
 452:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC_, reg_numb);
 454:	25 b3       	in	r18, 0x15	; 21
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	ac 01       	movw	r20, r24
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_vToggle+0x74>
 45e:	44 0f       	add	r20, r20
 460:	55 1f       	adc	r21, r21
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_vToggle+0x70>
 466:	ba 01       	movw	r22, r20
 468:	62 27       	eor	r22, r18
 46a:	65 bb       	out	0x15, r22	; 21
		break;
 46c:	08 95       	ret
		case 'D':   // Fixed inconsistency
		case 'd':
		TOG_BIT(PORTD_, reg_numb);
 46e:	22 b3       	in	r18, 0x12	; 18
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	ac 01       	movw	r20, r24
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_vToggle+0x8e>
 478:	44 0f       	add	r20, r20
 47a:	55 1f       	adc	r21, r21
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_vToggle+0x8a>
 480:	ba 01       	movw	r22, r20
 482:	62 27       	eor	r22, r18
 484:	62 bb       	out	0x12, r22	; 18
 486:	08 95       	ret

00000488 <DIO_u8Read_pin>:
}

unsigned char DIO_u8Read_pin(unsigned char port , unsigned char reg_numb)
{
	
	switch (port)
 488:	84 34       	cpi	r24, 0x44	; 68
 48a:	09 f4       	brne	.+2      	; 0x48e <DIO_u8Read_pin+0x6>
 48c:	4e c0       	rjmp	.+156    	; 0x52a <DIO_u8Read_pin+0xa2>
 48e:	85 34       	cpi	r24, 0x45	; 69
 490:	40 f4       	brcc	.+16     	; 0x4a2 <DIO_u8Read_pin+0x1a>
 492:	82 34       	cpi	r24, 0x42	; 66
 494:	31 f1       	breq	.+76     	; 0x4e2 <DIO_u8Read_pin+0x5a>
 496:	83 34       	cpi	r24, 0x43	; 67
 498:	b0 f5       	brcc	.+108    	; 0x506 <DIO_u8Read_pin+0x7e>
 49a:	81 34       	cpi	r24, 0x41	; 65
 49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_u8Read_pin+0x18>
 49e:	57 c0       	rjmp	.+174    	; 0x54e <DIO_u8Read_pin+0xc6>
 4a0:	0e c0       	rjmp	.+28     	; 0x4be <DIO_u8Read_pin+0x36>
 4a2:	82 36       	cpi	r24, 0x62	; 98
 4a4:	f1 f0       	breq	.+60     	; 0x4e2 <DIO_u8Read_pin+0x5a>
 4a6:	83 36       	cpi	r24, 0x63	; 99
 4a8:	20 f4       	brcc	.+8      	; 0x4b2 <DIO_u8Read_pin+0x2a>
 4aa:	81 36       	cpi	r24, 0x61	; 97
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <DIO_u8Read_pin+0x28>
 4ae:	4f c0       	rjmp	.+158    	; 0x54e <DIO_u8Read_pin+0xc6>
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <DIO_u8Read_pin+0x36>
 4b2:	83 36       	cpi	r24, 0x63	; 99
 4b4:	41 f1       	breq	.+80     	; 0x506 <DIO_u8Read_pin+0x7e>
 4b6:	84 36       	cpi	r24, 0x64	; 100
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_u8Read_pin+0x34>
 4ba:	49 c0       	rjmp	.+146    	; 0x54e <DIO_u8Read_pin+0xc6>
 4bc:	36 c0       	rjmp	.+108    	; 0x52a <DIO_u8Read_pin+0xa2>
	{
		case 'A':
		case 'a':
		return READ_BIT(PINA_, reg_numb);
 4be:	29 b3       	in	r18, 0x19	; 25
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	06 2e       	mov	r0, r22
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_u8Read_pin+0x44>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_u8Read_pin+0x40>
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	82 23       	and	r24, r18
 4d4:	93 23       	and	r25, r19
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8Read_pin+0x54>
 4d8:	95 95       	asr	r25
 4da:	87 95       	ror	r24
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8Read_pin+0x50>
 4e0:	08 95       	ret
		break;
		case 'B':
		case 'b':
		return READ_BIT(PINB_, reg_numb);
 4e2:	26 b3       	in	r18, 0x16	; 22
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	06 2e       	mov	r0, r22
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_u8Read_pin+0x68>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_u8Read_pin+0x64>
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	82 23       	and	r24, r18
 4f8:	93 23       	and	r25, r19
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_u8Read_pin+0x78>
 4fc:	95 95       	asr	r25
 4fe:	87 95       	ror	r24
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_u8Read_pin+0x74>
 504:	08 95       	ret
		break;
		case 'C':
		case 'c':
		return READ_BIT(PINC_, reg_numb);
 506:	23 b3       	in	r18, 0x13	; 19
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	06 2e       	mov	r0, r22
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8Read_pin+0x8c>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8Read_pin+0x88>
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	82 23       	and	r24, r18
 51c:	93 23       	and	r25, r19
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_u8Read_pin+0x9c>
 520:	95 95       	asr	r25
 522:	87 95       	ror	r24
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_u8Read_pin+0x98>
 528:	08 95       	ret
		break;
		case 'D':   // Fixed inconsistency
		case 'd':
		return READ_BIT(PIND_, reg_numb);
 52a:	20 b3       	in	r18, 0x10	; 16
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	06 2e       	mov	r0, r22
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8Read_pin+0xb0>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8Read_pin+0xac>
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	82 23       	and	r24, r18
 540:	93 23       	and	r25, r19
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_u8Read_pin+0xc0>
 544:	95 95       	asr	r25
 546:	87 95       	ror	r24
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_u8Read_pin+0xbc>
 54c:	08 95       	ret
		break;
		default:
		break;  // Handle unexpected port values
	}
}
 54e:	08 95       	ret

00000550 <DIO_VSet_port_Direction>:


void DIO_VSet_port_Direction(unsigned char port , unsigned char dir)
{
	switch(port)
 550:	84 34       	cpi	r24, 0x44	; 68
 552:	d9 f0       	breq	.+54     	; 0x58a <DIO_VSet_port_Direction+0x3a>
 554:	85 34       	cpi	r24, 0x45	; 69
 556:	38 f4       	brcc	.+14     	; 0x566 <DIO_VSet_port_Direction+0x16>
 558:	82 34       	cpi	r24, 0x42	; 66
 55a:	99 f0       	breq	.+38     	; 0x582 <DIO_VSet_port_Direction+0x32>
 55c:	83 34       	cpi	r24, 0x43	; 67
 55e:	98 f4       	brcc	.+38     	; 0x586 <DIO_VSet_port_Direction+0x36>
 560:	81 34       	cpi	r24, 0x41	; 65
 562:	a1 f4       	brne	.+40     	; 0x58c <DIO_VSet_port_Direction+0x3c>
 564:	0c c0       	rjmp	.+24     	; 0x57e <DIO_VSet_port_Direction+0x2e>
 566:	82 36       	cpi	r24, 0x62	; 98
 568:	61 f0       	breq	.+24     	; 0x582 <DIO_VSet_port_Direction+0x32>
 56a:	83 36       	cpi	r24, 0x63	; 99
 56c:	18 f4       	brcc	.+6      	; 0x574 <DIO_VSet_port_Direction+0x24>
 56e:	81 36       	cpi	r24, 0x61	; 97
 570:	69 f4       	brne	.+26     	; 0x58c <DIO_VSet_port_Direction+0x3c>
 572:	05 c0       	rjmp	.+10     	; 0x57e <DIO_VSet_port_Direction+0x2e>
 574:	83 36       	cpi	r24, 0x63	; 99
 576:	39 f0       	breq	.+14     	; 0x586 <DIO_VSet_port_Direction+0x36>
 578:	84 36       	cpi	r24, 0x64	; 100
 57a:	41 f4       	brne	.+16     	; 0x58c <DIO_VSet_port_Direction+0x3c>
 57c:	06 c0       	rjmp	.+12     	; 0x58a <DIO_VSet_port_Direction+0x3a>
	{
		case'a':
		case'A':
			DDRA_ = dir;
 57e:	6a bb       	out	0x1a, r22	; 26
		break;
 580:	08 95       	ret
		case 'b':
		case 'B':
			DDRB_ = dir;
 582:	67 bb       	out	0x17, r22	; 23
			break;
 584:	08 95       	ret
		case 'C':
		case 'c':
			DDRC_ = dir;
 586:	64 bb       	out	0x14, r22	; 20
			break;
 588:	08 95       	ret
		case 'd':
		case 'D':
			DDRD_ = dir;
 58a:	61 bb       	out	0x11, r22	; 17
 58c:	08 95       	ret

0000058e <DIO_VWrite_port>:
	}
}

void DIO_VWrite_port(unsigned char port , unsigned char val)
{
	switch(port)
 58e:	84 34       	cpi	r24, 0x44	; 68
 590:	d9 f0       	breq	.+54     	; 0x5c8 <DIO_VWrite_port+0x3a>
 592:	85 34       	cpi	r24, 0x45	; 69
 594:	38 f4       	brcc	.+14     	; 0x5a4 <DIO_VWrite_port+0x16>
 596:	82 34       	cpi	r24, 0x42	; 66
 598:	99 f0       	breq	.+38     	; 0x5c0 <DIO_VWrite_port+0x32>
 59a:	83 34       	cpi	r24, 0x43	; 67
 59c:	98 f4       	brcc	.+38     	; 0x5c4 <DIO_VWrite_port+0x36>
 59e:	81 34       	cpi	r24, 0x41	; 65
 5a0:	a1 f4       	brne	.+40     	; 0x5ca <DIO_VWrite_port+0x3c>
 5a2:	0c c0       	rjmp	.+24     	; 0x5bc <DIO_VWrite_port+0x2e>
 5a4:	82 36       	cpi	r24, 0x62	; 98
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <DIO_VWrite_port+0x32>
 5a8:	83 36       	cpi	r24, 0x63	; 99
 5aa:	18 f4       	brcc	.+6      	; 0x5b2 <DIO_VWrite_port+0x24>
 5ac:	81 36       	cpi	r24, 0x61	; 97
 5ae:	69 f4       	brne	.+26     	; 0x5ca <DIO_VWrite_port+0x3c>
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <DIO_VWrite_port+0x2e>
 5b2:	83 36       	cpi	r24, 0x63	; 99
 5b4:	39 f0       	breq	.+14     	; 0x5c4 <DIO_VWrite_port+0x36>
 5b6:	84 36       	cpi	r24, 0x64	; 100
 5b8:	41 f4       	brne	.+16     	; 0x5ca <DIO_VWrite_port+0x3c>
 5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <DIO_VWrite_port+0x3a>
	{
		case'a':
		case'A':
			PORTA_ = val;
 5bc:	6b bb       	out	0x1b, r22	; 27
			break;
 5be:	08 95       	ret
		case 'b':
		case 'B':
			PORTB_ = val;
 5c0:	68 bb       	out	0x18, r22	; 24
			break;
 5c2:	08 95       	ret
		case 'C':
		case 'c':
			PORTC_ = val;
 5c4:	65 bb       	out	0x15, r22	; 21
			break;
 5c6:	08 95       	ret
		case 'd':
		case 'D':
			PORTD_ = val;
 5c8:	62 bb       	out	0x12, r22	; 18
 5ca:	08 95       	ret

000005cc <DIO_U8Read_port>:
	}
}

unsigned char DIO_U8Read_port(unsigned char port)
{
	switch(port)
 5cc:	84 34       	cpi	r24, 0x44	; 68
 5ce:	d9 f0       	breq	.+54     	; 0x606 <DIO_U8Read_port+0x3a>
 5d0:	85 34       	cpi	r24, 0x45	; 69
 5d2:	38 f4       	brcc	.+14     	; 0x5e2 <DIO_U8Read_port+0x16>
 5d4:	82 34       	cpi	r24, 0x42	; 66
 5d6:	99 f0       	breq	.+38     	; 0x5fe <DIO_U8Read_port+0x32>
 5d8:	83 34       	cpi	r24, 0x43	; 67
 5da:	98 f4       	brcc	.+38     	; 0x602 <DIO_U8Read_port+0x36>
 5dc:	81 34       	cpi	r24, 0x41	; 65
 5de:	a9 f4       	brne	.+42     	; 0x60a <DIO_U8Read_port+0x3e>
 5e0:	0c c0       	rjmp	.+24     	; 0x5fa <DIO_U8Read_port+0x2e>
 5e2:	82 36       	cpi	r24, 0x62	; 98
 5e4:	61 f0       	breq	.+24     	; 0x5fe <DIO_U8Read_port+0x32>
 5e6:	83 36       	cpi	r24, 0x63	; 99
 5e8:	18 f4       	brcc	.+6      	; 0x5f0 <DIO_U8Read_port+0x24>
 5ea:	81 36       	cpi	r24, 0x61	; 97
 5ec:	71 f4       	brne	.+28     	; 0x60a <DIO_U8Read_port+0x3e>
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <DIO_U8Read_port+0x2e>
 5f0:	83 36       	cpi	r24, 0x63	; 99
 5f2:	39 f0       	breq	.+14     	; 0x602 <DIO_U8Read_port+0x36>
 5f4:	84 36       	cpi	r24, 0x64	; 100
 5f6:	49 f4       	brne	.+18     	; 0x60a <DIO_U8Read_port+0x3e>
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <DIO_U8Read_port+0x3a>
	{
		case'a':
		case'A':
			return PINA_ ;
 5fa:	89 b3       	in	r24, 0x19	; 25
 5fc:	08 95       	ret
			break;
		case 'b':
		case 'B':
			return PINB_;
 5fe:	86 b3       	in	r24, 0x16	; 22
 600:	08 95       	ret
			break;
		case 'C':
		case 'c':
			return PINC_;
 602:	83 b3       	in	r24, 0x13	; 19
 604:	08 95       	ret
			break;
		case 'd':
		case 'D':
			return PIND_;
 606:	80 b3       	in	r24, 0x10	; 16
 608:	08 95       	ret
			break;
	}
}
 60a:	08 95       	ret

0000060c <DIO_VToggle_port>:


void DIO_VToggle_port(unsigned char port)

{
	switch(port)
 60c:	84 34       	cpi	r24, 0x44	; 68
 60e:	09 f1       	breq	.+66     	; 0x652 <DIO_VToggle_port+0x46>
 610:	85 34       	cpi	r24, 0x45	; 69
 612:	38 f4       	brcc	.+14     	; 0x622 <DIO_VToggle_port+0x16>
 614:	82 34       	cpi	r24, 0x42	; 66
 616:	a9 f0       	breq	.+42     	; 0x642 <DIO_VToggle_port+0x36>
 618:	83 34       	cpi	r24, 0x43	; 67
 61a:	b8 f4       	brcc	.+46     	; 0x64a <DIO_VToggle_port+0x3e>
 61c:	81 34       	cpi	r24, 0x41	; 65
 61e:	e1 f4       	brne	.+56     	; 0x658 <DIO_VToggle_port+0x4c>
 620:	0c c0       	rjmp	.+24     	; 0x63a <DIO_VToggle_port+0x2e>
 622:	82 36       	cpi	r24, 0x62	; 98
 624:	71 f0       	breq	.+28     	; 0x642 <DIO_VToggle_port+0x36>
 626:	83 36       	cpi	r24, 0x63	; 99
 628:	18 f4       	brcc	.+6      	; 0x630 <DIO_VToggle_port+0x24>
 62a:	81 36       	cpi	r24, 0x61	; 97
 62c:	a9 f4       	brne	.+42     	; 0x658 <DIO_VToggle_port+0x4c>
 62e:	05 c0       	rjmp	.+10     	; 0x63a <DIO_VToggle_port+0x2e>
 630:	83 36       	cpi	r24, 0x63	; 99
 632:	59 f0       	breq	.+22     	; 0x64a <DIO_VToggle_port+0x3e>
 634:	84 36       	cpi	r24, 0x64	; 100
 636:	81 f4       	brne	.+32     	; 0x658 <DIO_VToggle_port+0x4c>
 638:	0c c0       	rjmp	.+24     	; 0x652 <DIO_VToggle_port+0x46>
	{
		case'a':
		case'A':
			PORTA_ ^= (0xff);
 63a:	8b b3       	in	r24, 0x1b	; 27
 63c:	80 95       	com	r24
 63e:	8b bb       	out	0x1b, r24	; 27
			break;
 640:	08 95       	ret
		case 'b':
		case 'B':
			PORTB_ ^= (0xff);
 642:	88 b3       	in	r24, 0x18	; 24
 644:	80 95       	com	r24
 646:	88 bb       	out	0x18, r24	; 24
			break;
 648:	08 95       	ret
		case 'C':
		case 'c':
			PORTC_ ^= (0xff);
 64a:	85 b3       	in	r24, 0x15	; 21
 64c:	80 95       	com	r24
 64e:	85 bb       	out	0x15, r24	; 21
			break;
 650:	08 95       	ret
		case 'd':
		case 'D':
			return PORTD_ ^= (0xff);
 652:	82 b3       	in	r24, 0x12	; 18
 654:	80 95       	com	r24
 656:	82 bb       	out	0x12, r24	; 18
 658:	08 95       	ret

0000065a <Dio_connect_pullup>:


void Dio_connect_pullup(unsigned char port , unsigned char pin_numb , unsigned char state)
{
// by default the PUD of SFIOR is set to low which means the pull-up is enabled
	switch(port)
 65a:	84 34       	cpi	r24, 0x44	; 68
 65c:	09 f4       	brne	.+2      	; 0x660 <Dio_connect_pullup+0x6>
 65e:	71 c0       	rjmp	.+226    	; 0x742 <Dio_connect_pullup+0xe8>
 660:	85 34       	cpi	r24, 0x45	; 69
 662:	48 f4       	brcc	.+18     	; 0x676 <Dio_connect_pullup+0x1c>
 664:	82 34       	cpi	r24, 0x42	; 66
 666:	99 f1       	breq	.+102    	; 0x6ce <Dio_connect_pullup+0x74>
 668:	83 34       	cpi	r24, 0x43	; 67
 66a:	08 f0       	brcs	.+2      	; 0x66e <Dio_connect_pullup+0x14>
 66c:	4d c0       	rjmp	.+154    	; 0x708 <Dio_connect_pullup+0xae>
 66e:	81 34       	cpi	r24, 0x41	; 65
 670:	09 f0       	breq	.+2      	; 0x674 <Dio_connect_pullup+0x1a>
 672:	83 c0       	rjmp	.+262    	; 0x77a <Dio_connect_pullup+0x120>
 674:	0f c0       	rjmp	.+30     	; 0x694 <Dio_connect_pullup+0x3a>
 676:	82 36       	cpi	r24, 0x62	; 98
 678:	51 f1       	breq	.+84     	; 0x6ce <Dio_connect_pullup+0x74>
 67a:	83 36       	cpi	r24, 0x63	; 99
 67c:	20 f4       	brcc	.+8      	; 0x686 <Dio_connect_pullup+0x2c>
 67e:	81 36       	cpi	r24, 0x61	; 97
 680:	09 f0       	breq	.+2      	; 0x684 <Dio_connect_pullup+0x2a>
 682:	7b c0       	rjmp	.+246    	; 0x77a <Dio_connect_pullup+0x120>
 684:	07 c0       	rjmp	.+14     	; 0x694 <Dio_connect_pullup+0x3a>
 686:	83 36       	cpi	r24, 0x63	; 99
 688:	09 f4       	brne	.+2      	; 0x68c <Dio_connect_pullup+0x32>
 68a:	3e c0       	rjmp	.+124    	; 0x708 <Dio_connect_pullup+0xae>
 68c:	84 36       	cpi	r24, 0x64	; 100
 68e:	09 f0       	breq	.+2      	; 0x692 <Dio_connect_pullup+0x38>
 690:	74 c0       	rjmp	.+232    	; 0x77a <Dio_connect_pullup+0x120>
 692:	57 c0       	rjmp	.+174    	; 0x742 <Dio_connect_pullup+0xe8>
	{
		case 'A':
		case 'a':			
			(state == 1) ?  (SET_BIT(PORTA_ , pin_numb),0) : (CLEAR_BIT(PORTA_,pin_numb),0);
 694:	41 30       	cpi	r20, 0x01	; 1
 696:	69 f4       	brne	.+26     	; 0x6b2 <Dio_connect_pullup+0x58>
 698:	2b b3       	in	r18, 0x1b	; 27
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	ac 01       	movw	r20, r24
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Dio_connect_pullup+0x4c>
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <Dio_connect_pullup+0x48>
 6aa:	ba 01       	movw	r22, r20
 6ac:	62 2b       	or	r22, r18
 6ae:	6b bb       	out	0x1b, r22	; 27
 6b0:	08 95       	ret
 6b2:	2b b3       	in	r18, 0x1b	; 27
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	ac 01       	movw	r20, r24
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <Dio_connect_pullup+0x66>
 6bc:	44 0f       	add	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <Dio_connect_pullup+0x62>
 6c4:	ba 01       	movw	r22, r20
 6c6:	60 95       	com	r22
 6c8:	62 23       	and	r22, r18
 6ca:	6b bb       	out	0x1b, r22	; 27
 6cc:	08 95       	ret
			break;
		case 'B':
		case 'b':
			(state == 1) ?  (SET_BIT(PORTB_ , pin_numb),0) : (CLEAR_BIT(PORTB_,pin_numb),0);
 6ce:	41 30       	cpi	r20, 0x01	; 1
 6d0:	69 f4       	brne	.+26     	; 0x6ec <Dio_connect_pullup+0x92>
 6d2:	28 b3       	in	r18, 0x18	; 24
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	ac 01       	movw	r20, r24
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Dio_connect_pullup+0x86>
 6dc:	44 0f       	add	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <Dio_connect_pullup+0x82>
 6e4:	ba 01       	movw	r22, r20
 6e6:	62 2b       	or	r22, r18
 6e8:	68 bb       	out	0x18, r22	; 24
 6ea:	08 95       	ret
 6ec:	28 b3       	in	r18, 0x18	; 24
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	ac 01       	movw	r20, r24
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <Dio_connect_pullup+0xa0>
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	6a 95       	dec	r22
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <Dio_connect_pullup+0x9c>
 6fe:	ba 01       	movw	r22, r20
 700:	60 95       	com	r22
 702:	62 23       	and	r22, r18
 704:	68 bb       	out	0x18, r22	; 24
 706:	08 95       	ret
			break;
		case 'C':
		case 'c':
			(state == 1) ?  (SET_BIT(PORTC_ , pin_numb),0) : (CLEAR_BIT(PORTC_,pin_numb),0);
 708:	41 30       	cpi	r20, 0x01	; 1
 70a:	69 f4       	brne	.+26     	; 0x726 <Dio_connect_pullup+0xcc>
 70c:	25 b3       	in	r18, 0x15	; 21
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	ac 01       	movw	r20, r24
 714:	02 c0       	rjmp	.+4      	; 0x71a <Dio_connect_pullup+0xc0>
 716:	44 0f       	add	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <Dio_connect_pullup+0xbc>
 71e:	ba 01       	movw	r22, r20
 720:	62 2b       	or	r22, r18
 722:	65 bb       	out	0x15, r22	; 21
 724:	08 95       	ret
 726:	25 b3       	in	r18, 0x15	; 21
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	ac 01       	movw	r20, r24
 72e:	02 c0       	rjmp	.+4      	; 0x734 <Dio_connect_pullup+0xda>
 730:	44 0f       	add	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <Dio_connect_pullup+0xd6>
 738:	ba 01       	movw	r22, r20
 73a:	60 95       	com	r22
 73c:	62 23       	and	r22, r18
 73e:	65 bb       	out	0x15, r22	; 21
 740:	08 95       	ret
			break;
		case 'D':
		case 'd':
			(state == 1) ?  (SET_BIT(PORTD_ , pin_numb),0) : (CLEAR_BIT(PORTD_,pin_numb),0);
 742:	41 30       	cpi	r20, 0x01	; 1
 744:	69 f4       	brne	.+26     	; 0x760 <Dio_connect_pullup+0x106>
 746:	22 b3       	in	r18, 0x12	; 18
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	ac 01       	movw	r20, r24
 74e:	02 c0       	rjmp	.+4      	; 0x754 <Dio_connect_pullup+0xfa>
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <Dio_connect_pullup+0xf6>
 758:	ba 01       	movw	r22, r20
 75a:	62 2b       	or	r22, r18
 75c:	62 bb       	out	0x12, r22	; 18
 75e:	08 95       	ret
 760:	22 b3       	in	r18, 0x12	; 18
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	ac 01       	movw	r20, r24
 768:	02 c0       	rjmp	.+4      	; 0x76e <Dio_connect_pullup+0x114>
 76a:	44 0f       	add	r20, r20
 76c:	55 1f       	adc	r21, r21
 76e:	6a 95       	dec	r22
 770:	e2 f7       	brpl	.-8      	; 0x76a <Dio_connect_pullup+0x110>
 772:	ba 01       	movw	r22, r20
 774:	60 95       	com	r22
 776:	62 23       	and	r22, r18
 778:	62 bb       	out	0x12, r22	; 18
 77a:	08 95       	ret

0000077c <main>:
		
    }*/
	
	// second lab
	unsigned char state , flag =0;
	led_initialize('a',0);
 77c:	81 e6       	ldi	r24, 0x61	; 97
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	0e 94 e6 03 	call	0x7cc	; 0x7cc <led_initialize>
	led_initialize('a',1);
 784:	81 e6       	ldi	r24, 0x61	; 97
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	0e 94 e6 03 	call	0x7cc	; 0x7cc <led_initialize>
	pushButton_Intialize_V8('c',0);
 78c:	83 e6       	ldi	r24, 0x63	; 99
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <pushButton_Intialize_V8>
	Dio_connect_pullup('C',0,1);
 794:	83 e4       	ldi	r24, 0x43	; 67
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	0e 94 2d 03 	call	0x65a	; 0x65a <Dio_connect_pullup>
		
		
    }*/
	
	// second lab
	unsigned char state , flag =0;
 7a4:	c0 e0       	ldi	r28, 0x00	; 0
	*/
	state = PushButton_read_state('c',0);
	if (state == 0 && flag == 0)
	{
		led_toggle('a',0);
		flag = 1;
 7a6:	d1 e0       	ldi	r29, 0x01	; 1
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <main+0x34>
	}
	else
	{
		flag = 0;
 7aa:	c0 e0       	ldi	r28, 0x00	; 0
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <main+0x34>
 7ae:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	prev_state = current_state;  // Update state for next check
	4-
	*/
	state = PushButton_read_state('c',0);
 7b0:	83 e6       	ldi	r24, 0x63	; 99
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <PushButton_read_state>
	if (state == 0 && flag == 0)
 7b8:	88 23       	and	r24, r24
 7ba:	b9 f7       	brne	.-18     	; 0x7aa <main+0x2e>
 7bc:	cc 23       	and	r28, r28
 7be:	b9 f7       	brne	.-18     	; 0x7ae <main+0x32>
	{
		led_toggle('a',0);
 7c0:	81 e6       	ldi	r24, 0x61	; 97
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <led_toggle>
		flag = 1;
 7c8:	cd 2f       	mov	r28, r29
 7ca:	f2 cf       	rjmp	.-28     	; 0x7b0 <main+0x34>

000007cc <led_initialize>:
 */ 
#include "DIO.h"

void led_initialize(unsigned char port , unsigned char bin_numb)
{
	Dio_VSet_pin_Dir(port , bin_numb, "OUTPUT");
 7cc:	40 e9       	ldi	r20, 0x90	; 144
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
	return 0;
}
 7d4:	08 95       	ret

000007d6 <led_on>:

void led_on(unsigned char port , unsigned char bin_numb)
{
	DIO_vwrite(port,bin_numb,"HIGH");
 7d6:	47 e9       	ldi	r20, 0x97	; 151
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
}
 7de:	08 95       	ret

000007e0 <led_off>:

void led_off(unsigned char port , unsigned char bin_numb)
{
	DIO_vwrite(port,bin_numb,"LOW");
 7e0:	4c e9       	ldi	r20, 0x9C	; 156
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_vwrite>
}
 7e8:	08 95       	ret

000007ea <led_toggle>:
void led_toggle(unsigned char port , unsigned char bin_numb)
{
	DIO_vToggle(port,bin_numb);
 7ea:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_vToggle>
 7ee:	08 95       	ret

000007f0 <pushButton_Intialize_V8>:
 *  Author: Ammar
 */ 

void pushButton_Intialize_V8(unsigned char port , unsigned char pin_numb)
{
	Dio_VSet_pin_Dir(port , pin_numb , "INPUT");
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	40 ea       	ldi	r20, 0xA0	; 160
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	0e 94 49 00 	call	0x92	; 0x92 <Dio_VSet_pin_Dir>
}
 7fc:	08 95       	ret

000007fe <PushButton_read_state>:

unsigned char PushButton_read_state(unsigned char port , unsigned char pin_numb)
{
	return DIO_u8Read_pin(port , pin_numb);
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	0e 94 44 02 	call	0x488	; 0x488 <DIO_u8Read_pin>
 806:	08 95       	ret

00000808 <strcmp>:
 808:	fb 01       	movw	r30, r22
 80a:	dc 01       	movw	r26, r24
 80c:	8d 91       	ld	r24, X+
 80e:	01 90       	ld	r0, Z+
 810:	80 19       	sub	r24, r0
 812:	01 10       	cpse	r0, r1
 814:	d9 f3       	breq	.-10     	; 0x80c <strcmp+0x4>
 816:	99 0b       	sbc	r25, r25
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
